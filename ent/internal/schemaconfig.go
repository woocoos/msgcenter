// Code generated by ent, DO NOT EDIT.

package internal

import "context"

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig struct {
	MsgAlert      string // MsgAlert table.
	MsgChannel    string // MsgChannel table.
	MsgEvent      string // MsgEvent table.
	MsgInternal   string // MsgInternal table.
	MsgInternalTo string // MsgInternalTo table.
	MsgSubscriber string // MsgSubscriber table.
	MsgTemplate   string // MsgTemplate table.
	MsgType       string // MsgType table.
	Nlog          string // Nlog table.
	NlogAlert     string // NlogAlert table.
	OrgRoleUser   string // OrgRoleUser table.
	Silence       string // Silence table.
	User          string // User table.
}

type schemaCtxKey struct{}

// SchemaConfigFromContext returns a SchemaConfig stored inside a context, or empty if there isn't one.
func SchemaConfigFromContext(ctx context.Context) SchemaConfig {
	config, _ := ctx.Value(schemaCtxKey{}).(SchemaConfig)
	return config
}

// NewSchemaConfigContext returns a new context with the given SchemaConfig attached.
func NewSchemaConfigContext(parent context.Context, config SchemaConfig) context.Context {
	return context.WithValue(parent, schemaCtxKey{}, config)
}
