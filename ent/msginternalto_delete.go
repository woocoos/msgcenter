// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
	"github.com/woocoos/msgcenter/ent/msginternalto"
)

// MsgInternalToDelete is the builder for deleting a MsgInternalTo entity.
type MsgInternalToDelete struct {
	config
	hooks    []Hook
	mutation *MsgInternalToMutation
}

// Where appends a list predicates to the MsgInternalToDelete builder.
func (mitd *MsgInternalToDelete) Where(ps ...predicate.MsgInternalTo) *MsgInternalToDelete {
	mitd.mutation.Where(ps...)
	return mitd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mitd *MsgInternalToDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mitd.sqlExec, mitd.mutation, mitd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mitd *MsgInternalToDelete) ExecX(ctx context.Context) int {
	n, err := mitd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mitd *MsgInternalToDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(msginternalto.Table, sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt))
	_spec.Node.Schema = mitd.schemaConfig.MsgInternalTo
	ctx = internal.NewSchemaConfigContext(ctx, mitd.schemaConfig)
	if ps := mitd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mitd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mitd.mutation.done = true
	return affected, err
}

// MsgInternalToDeleteOne is the builder for deleting a single MsgInternalTo entity.
type MsgInternalToDeleteOne struct {
	mitd *MsgInternalToDelete
}

// Where appends a list predicates to the MsgInternalToDelete builder.
func (mitdo *MsgInternalToDeleteOne) Where(ps ...predicate.MsgInternalTo) *MsgInternalToDeleteOne {
	mitdo.mitd.mutation.Where(ps...)
	return mitdo
}

// Exec executes the deletion query.
func (mitdo *MsgInternalToDeleteOne) Exec(ctx context.Context) error {
	n, err := mitdo.mitd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{msginternalto.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mitdo *MsgInternalToDeleteOne) ExecX(ctx context.Context) {
	if err := mitdo.Exec(ctx); err != nil {
		panic(err)
	}
}
