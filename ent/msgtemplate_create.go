// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/msgcenter/ent/msgevent"
	"github.com/woocoos/msgcenter/ent/msgtemplate"
	"github.com/woocoos/msgcenter/pkg/profile"
)

// MsgTemplateCreate is the builder for creating a MsgTemplate entity.
type MsgTemplateCreate struct {
	config
	mutation *MsgTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mtc *MsgTemplateCreate) SetCreatedBy(i int) *MsgTemplateCreate {
	mtc.mutation.SetCreatedBy(i)
	return mtc
}

// SetCreatedAt sets the "created_at" field.
func (mtc *MsgTemplateCreate) SetCreatedAt(t time.Time) *MsgTemplateCreate {
	mtc.mutation.SetCreatedAt(t)
	return mtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableCreatedAt(t *time.Time) *MsgTemplateCreate {
	if t != nil {
		mtc.SetCreatedAt(*t)
	}
	return mtc
}

// SetUpdatedBy sets the "updated_by" field.
func (mtc *MsgTemplateCreate) SetUpdatedBy(i int) *MsgTemplateCreate {
	mtc.mutation.SetUpdatedBy(i)
	return mtc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableUpdatedBy(i *int) *MsgTemplateCreate {
	if i != nil {
		mtc.SetUpdatedBy(*i)
	}
	return mtc
}

// SetUpdatedAt sets the "updated_at" field.
func (mtc *MsgTemplateCreate) SetUpdatedAt(t time.Time) *MsgTemplateCreate {
	mtc.mutation.SetUpdatedAt(t)
	return mtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableUpdatedAt(t *time.Time) *MsgTemplateCreate {
	if t != nil {
		mtc.SetUpdatedAt(*t)
	}
	return mtc
}

// SetMsgTypeID sets the "msg_type_id" field.
func (mtc *MsgTemplateCreate) SetMsgTypeID(i int) *MsgTemplateCreate {
	mtc.mutation.SetMsgTypeID(i)
	return mtc
}

// SetMsgEventID sets the "msg_event_id" field.
func (mtc *MsgTemplateCreate) SetMsgEventID(i int) *MsgTemplateCreate {
	mtc.mutation.SetMsgEventID(i)
	return mtc
}

// SetTenantID sets the "tenant_id" field.
func (mtc *MsgTemplateCreate) SetTenantID(i int) *MsgTemplateCreate {
	mtc.mutation.SetTenantID(i)
	return mtc
}

// SetName sets the "name" field.
func (mtc *MsgTemplateCreate) SetName(s string) *MsgTemplateCreate {
	mtc.mutation.SetName(s)
	return mtc
}

// SetStatus sets the "status" field.
func (mtc *MsgTemplateCreate) SetStatus(ts typex.SimpleStatus) *MsgTemplateCreate {
	mtc.mutation.SetStatus(ts)
	return mtc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableStatus(ts *typex.SimpleStatus) *MsgTemplateCreate {
	if ts != nil {
		mtc.SetStatus(*ts)
	}
	return mtc
}

// SetReceiverType sets the "receiver_type" field.
func (mtc *MsgTemplateCreate) SetReceiverType(pt profile.ReceiverType) *MsgTemplateCreate {
	mtc.mutation.SetReceiverType(pt)
	return mtc
}

// SetFormat sets the "format" field.
func (mtc *MsgTemplateCreate) SetFormat(m msgtemplate.Format) *MsgTemplateCreate {
	mtc.mutation.SetFormat(m)
	return mtc
}

// SetSubject sets the "subject" field.
func (mtc *MsgTemplateCreate) SetSubject(s string) *MsgTemplateCreate {
	mtc.mutation.SetSubject(s)
	return mtc
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableSubject(s *string) *MsgTemplateCreate {
	if s != nil {
		mtc.SetSubject(*s)
	}
	return mtc
}

// SetFrom sets the "from" field.
func (mtc *MsgTemplateCreate) SetFrom(s string) *MsgTemplateCreate {
	mtc.mutation.SetFrom(s)
	return mtc
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableFrom(s *string) *MsgTemplateCreate {
	if s != nil {
		mtc.SetFrom(*s)
	}
	return mtc
}

// SetTo sets the "to" field.
func (mtc *MsgTemplateCreate) SetTo(s string) *MsgTemplateCreate {
	mtc.mutation.SetTo(s)
	return mtc
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableTo(s *string) *MsgTemplateCreate {
	if s != nil {
		mtc.SetTo(*s)
	}
	return mtc
}

// SetCc sets the "cc" field.
func (mtc *MsgTemplateCreate) SetCc(s string) *MsgTemplateCreate {
	mtc.mutation.SetCc(s)
	return mtc
}

// SetNillableCc sets the "cc" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableCc(s *string) *MsgTemplateCreate {
	if s != nil {
		mtc.SetCc(*s)
	}
	return mtc
}

// SetBcc sets the "bcc" field.
func (mtc *MsgTemplateCreate) SetBcc(s string) *MsgTemplateCreate {
	mtc.mutation.SetBcc(s)
	return mtc
}

// SetNillableBcc sets the "bcc" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableBcc(s *string) *MsgTemplateCreate {
	if s != nil {
		mtc.SetBcc(*s)
	}
	return mtc
}

// SetBody sets the "body" field.
func (mtc *MsgTemplateCreate) SetBody(s string) *MsgTemplateCreate {
	mtc.mutation.SetBody(s)
	return mtc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableBody(s *string) *MsgTemplateCreate {
	if s != nil {
		mtc.SetBody(*s)
	}
	return mtc
}

// SetTpl sets the "tpl" field.
func (mtc *MsgTemplateCreate) SetTpl(s string) *MsgTemplateCreate {
	mtc.mutation.SetTpl(s)
	return mtc
}

// SetNillableTpl sets the "tpl" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableTpl(s *string) *MsgTemplateCreate {
	if s != nil {
		mtc.SetTpl(*s)
	}
	return mtc
}

// SetTplFileID sets the "tpl_file_id" field.
func (mtc *MsgTemplateCreate) SetTplFileID(i int) *MsgTemplateCreate {
	mtc.mutation.SetTplFileID(i)
	return mtc
}

// SetNillableTplFileID sets the "tpl_file_id" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableTplFileID(i *int) *MsgTemplateCreate {
	if i != nil {
		mtc.SetTplFileID(*i)
	}
	return mtc
}

// SetAttachments sets the "attachments" field.
func (mtc *MsgTemplateCreate) SetAttachments(s []string) *MsgTemplateCreate {
	mtc.mutation.SetAttachments(s)
	return mtc
}

// SetAttachmentsFileIds sets the "attachments_file_ids" field.
func (mtc *MsgTemplateCreate) SetAttachmentsFileIds(i []int) *MsgTemplateCreate {
	mtc.mutation.SetAttachmentsFileIds(i)
	return mtc
}

// SetComments sets the "comments" field.
func (mtc *MsgTemplateCreate) SetComments(s string) *MsgTemplateCreate {
	mtc.mutation.SetComments(s)
	return mtc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (mtc *MsgTemplateCreate) SetNillableComments(s *string) *MsgTemplateCreate {
	if s != nil {
		mtc.SetComments(*s)
	}
	return mtc
}

// SetID sets the "id" field.
func (mtc *MsgTemplateCreate) SetID(i int) *MsgTemplateCreate {
	mtc.mutation.SetID(i)
	return mtc
}

// SetEventID sets the "event" edge to the MsgEvent entity by ID.
func (mtc *MsgTemplateCreate) SetEventID(id int) *MsgTemplateCreate {
	mtc.mutation.SetEventID(id)
	return mtc
}

// SetEvent sets the "event" edge to the MsgEvent entity.
func (mtc *MsgTemplateCreate) SetEvent(m *MsgEvent) *MsgTemplateCreate {
	return mtc.SetEventID(m.ID)
}

// Mutation returns the MsgTemplateMutation object of the builder.
func (mtc *MsgTemplateCreate) Mutation() *MsgTemplateMutation {
	return mtc.mutation
}

// Save creates the MsgTemplate in the database.
func (mtc *MsgTemplateCreate) Save(ctx context.Context) (*MsgTemplate, error) {
	if err := mtc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mtc.sqlSave, mtc.mutation, mtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MsgTemplateCreate) SaveX(ctx context.Context) *MsgTemplate {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *MsgTemplateCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *MsgTemplateCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtc *MsgTemplateCreate) defaults() error {
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		if msgtemplate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized msgtemplate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := msgtemplate.DefaultCreatedAt()
		mtc.mutation.SetCreatedAt(v)
	}
	if _, ok := mtc.mutation.Status(); !ok {
		v := msgtemplate.DefaultStatus
		mtc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MsgTemplateCreate) check() error {
	if _, ok := mtc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "MsgTemplate.created_by"`)}
	}
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MsgTemplate.created_at"`)}
	}
	if _, ok := mtc.mutation.MsgTypeID(); !ok {
		return &ValidationError{Name: "msg_type_id", err: errors.New(`ent: missing required field "MsgTemplate.msg_type_id"`)}
	}
	if _, ok := mtc.mutation.MsgEventID(); !ok {
		return &ValidationError{Name: "msg_event_id", err: errors.New(`ent: missing required field "MsgTemplate.msg_event_id"`)}
	}
	if _, ok := mtc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "MsgTemplate.tenant_id"`)}
	}
	if _, ok := mtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MsgTemplate.name"`)}
	}
	if v, ok := mtc.mutation.Name(); ok {
		if err := msgtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.name": %w`, err)}
		}
	}
	if v, ok := mtc.mutation.Status(); ok {
		if err := msgtemplate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.status": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.ReceiverType(); !ok {
		return &ValidationError{Name: "receiver_type", err: errors.New(`ent: missing required field "MsgTemplate.receiver_type"`)}
	}
	if v, ok := mtc.mutation.ReceiverType(); ok {
		if err := msgtemplate.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.receiver_type": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "MsgTemplate.format"`)}
	}
	if v, ok := mtc.mutation.Format(); ok {
		if err := msgtemplate.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.format": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "MsgTemplate.event"`)}
	}
	return nil
}

func (mtc *MsgTemplateCreate) sqlSave(ctx context.Context) (*MsgTemplate, error) {
	if err := mtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mtc.mutation.id = &_node.ID
	mtc.mutation.done = true
	return _node, nil
}

func (mtc *MsgTemplateCreate) createSpec() (*MsgTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &MsgTemplate{config: mtc.config}
		_spec = sqlgraph.NewCreateSpec(msgtemplate.Table, sqlgraph.NewFieldSpec(msgtemplate.FieldID, field.TypeInt))
	)
	_spec.Schema = mtc.schemaConfig.MsgTemplate
	_spec.OnConflict = mtc.conflict
	if id, ok := mtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mtc.mutation.CreatedBy(); ok {
		_spec.SetField(msgtemplate.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := mtc.mutation.CreatedAt(); ok {
		_spec.SetField(msgtemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mtc.mutation.UpdatedBy(); ok {
		_spec.SetField(msgtemplate.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := mtc.mutation.UpdatedAt(); ok {
		_spec.SetField(msgtemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mtc.mutation.MsgTypeID(); ok {
		_spec.SetField(msgtemplate.FieldMsgTypeID, field.TypeInt, value)
		_node.MsgTypeID = value
	}
	if value, ok := mtc.mutation.TenantID(); ok {
		_spec.SetField(msgtemplate.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := mtc.mutation.Name(); ok {
		_spec.SetField(msgtemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mtc.mutation.Status(); ok {
		_spec.SetField(msgtemplate.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mtc.mutation.ReceiverType(); ok {
		_spec.SetField(msgtemplate.FieldReceiverType, field.TypeEnum, value)
		_node.ReceiverType = value
	}
	if value, ok := mtc.mutation.Format(); ok {
		_spec.SetField(msgtemplate.FieldFormat, field.TypeEnum, value)
		_node.Format = value
	}
	if value, ok := mtc.mutation.Subject(); ok {
		_spec.SetField(msgtemplate.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := mtc.mutation.From(); ok {
		_spec.SetField(msgtemplate.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := mtc.mutation.To(); ok {
		_spec.SetField(msgtemplate.FieldTo, field.TypeString, value)
		_node.To = value
	}
	if value, ok := mtc.mutation.Cc(); ok {
		_spec.SetField(msgtemplate.FieldCc, field.TypeString, value)
		_node.Cc = value
	}
	if value, ok := mtc.mutation.Bcc(); ok {
		_spec.SetField(msgtemplate.FieldBcc, field.TypeString, value)
		_node.Bcc = value
	}
	if value, ok := mtc.mutation.Body(); ok {
		_spec.SetField(msgtemplate.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := mtc.mutation.Tpl(); ok {
		_spec.SetField(msgtemplate.FieldTpl, field.TypeString, value)
		_node.Tpl = value
	}
	if value, ok := mtc.mutation.TplFileID(); ok {
		_spec.SetField(msgtemplate.FieldTplFileID, field.TypeInt, value)
		_node.TplFileID = &value
	}
	if value, ok := mtc.mutation.Attachments(); ok {
		_spec.SetField(msgtemplate.FieldAttachments, field.TypeJSON, value)
		_node.Attachments = value
	}
	if value, ok := mtc.mutation.AttachmentsFileIds(); ok {
		_spec.SetField(msgtemplate.FieldAttachmentsFileIds, field.TypeJSON, value)
		_node.AttachmentsFileIds = value
	}
	if value, ok := mtc.mutation.Comments(); ok {
		_spec.SetField(msgtemplate.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if nodes := mtc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgtemplate.EventTable,
			Columns: []string{msgtemplate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtc.schemaConfig.MsgTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MsgEventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgTemplate.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgTemplateUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mtc *MsgTemplateCreate) OnConflict(opts ...sql.ConflictOption) *MsgTemplateUpsertOne {
	mtc.conflict = opts
	return &MsgTemplateUpsertOne{
		create: mtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mtc *MsgTemplateCreate) OnConflictColumns(columns ...string) *MsgTemplateUpsertOne {
	mtc.conflict = append(mtc.conflict, sql.ConflictColumns(columns...))
	return &MsgTemplateUpsertOne{
		create: mtc,
	}
}

type (
	// MsgTemplateUpsertOne is the builder for "upsert"-ing
	//  one MsgTemplate node.
	MsgTemplateUpsertOne struct {
		create *MsgTemplateCreate
	}

	// MsgTemplateUpsert is the "OnConflict" setter.
	MsgTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgTemplateUpsert) SetUpdatedBy(v int) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateUpdatedBy() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgTemplateUpsert) AddUpdatedBy(v int) *MsgTemplateUpsert {
	u.Add(msgtemplate.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgTemplateUpsert) ClearUpdatedBy() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgTemplateUpsert) SetUpdatedAt(v time.Time) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateUpdatedAt() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgTemplateUpsert) ClearUpdatedAt() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldUpdatedAt)
	return u
}

// SetMsgTypeID sets the "msg_type_id" field.
func (u *MsgTemplateUpsert) SetMsgTypeID(v int) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldMsgTypeID, v)
	return u
}

// UpdateMsgTypeID sets the "msg_type_id" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateMsgTypeID() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldMsgTypeID)
	return u
}

// AddMsgTypeID adds v to the "msg_type_id" field.
func (u *MsgTemplateUpsert) AddMsgTypeID(v int) *MsgTemplateUpsert {
	u.Add(msgtemplate.FieldMsgTypeID, v)
	return u
}

// SetMsgEventID sets the "msg_event_id" field.
func (u *MsgTemplateUpsert) SetMsgEventID(v int) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldMsgEventID, v)
	return u
}

// UpdateMsgEventID sets the "msg_event_id" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateMsgEventID() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldMsgEventID)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgTemplateUpsert) SetTenantID(v int) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateTenantID() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldTenantID)
	return u
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgTemplateUpsert) AddTenantID(v int) *MsgTemplateUpsert {
	u.Add(msgtemplate.FieldTenantID, v)
	return u
}

// SetName sets the "name" field.
func (u *MsgTemplateUpsert) SetName(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateName() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *MsgTemplateUpsert) SetStatus(v typex.SimpleStatus) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateStatus() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *MsgTemplateUpsert) ClearStatus() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldStatus)
	return u
}

// SetReceiverType sets the "receiver_type" field.
func (u *MsgTemplateUpsert) SetReceiverType(v profile.ReceiverType) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldReceiverType, v)
	return u
}

// UpdateReceiverType sets the "receiver_type" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateReceiverType() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldReceiverType)
	return u
}

// SetFormat sets the "format" field.
func (u *MsgTemplateUpsert) SetFormat(v msgtemplate.Format) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateFormat() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldFormat)
	return u
}

// SetSubject sets the "subject" field.
func (u *MsgTemplateUpsert) SetSubject(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldSubject, v)
	return u
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateSubject() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldSubject)
	return u
}

// ClearSubject clears the value of the "subject" field.
func (u *MsgTemplateUpsert) ClearSubject() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldSubject)
	return u
}

// SetFrom sets the "from" field.
func (u *MsgTemplateUpsert) SetFrom(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldFrom, v)
	return u
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateFrom() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldFrom)
	return u
}

// ClearFrom clears the value of the "from" field.
func (u *MsgTemplateUpsert) ClearFrom() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldFrom)
	return u
}

// SetTo sets the "to" field.
func (u *MsgTemplateUpsert) SetTo(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldTo, v)
	return u
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateTo() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldTo)
	return u
}

// ClearTo clears the value of the "to" field.
func (u *MsgTemplateUpsert) ClearTo() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldTo)
	return u
}

// SetCc sets the "cc" field.
func (u *MsgTemplateUpsert) SetCc(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldCc, v)
	return u
}

// UpdateCc sets the "cc" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateCc() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldCc)
	return u
}

// ClearCc clears the value of the "cc" field.
func (u *MsgTemplateUpsert) ClearCc() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldCc)
	return u
}

// SetBcc sets the "bcc" field.
func (u *MsgTemplateUpsert) SetBcc(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldBcc, v)
	return u
}

// UpdateBcc sets the "bcc" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateBcc() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldBcc)
	return u
}

// ClearBcc clears the value of the "bcc" field.
func (u *MsgTemplateUpsert) ClearBcc() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldBcc)
	return u
}

// SetBody sets the "body" field.
func (u *MsgTemplateUpsert) SetBody(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateBody() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldBody)
	return u
}

// ClearBody clears the value of the "body" field.
func (u *MsgTemplateUpsert) ClearBody() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldBody)
	return u
}

// SetTpl sets the "tpl" field.
func (u *MsgTemplateUpsert) SetTpl(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldTpl, v)
	return u
}

// UpdateTpl sets the "tpl" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateTpl() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldTpl)
	return u
}

// ClearTpl clears the value of the "tpl" field.
func (u *MsgTemplateUpsert) ClearTpl() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldTpl)
	return u
}

// SetTplFileID sets the "tpl_file_id" field.
func (u *MsgTemplateUpsert) SetTplFileID(v int) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldTplFileID, v)
	return u
}

// UpdateTplFileID sets the "tpl_file_id" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateTplFileID() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldTplFileID)
	return u
}

// AddTplFileID adds v to the "tpl_file_id" field.
func (u *MsgTemplateUpsert) AddTplFileID(v int) *MsgTemplateUpsert {
	u.Add(msgtemplate.FieldTplFileID, v)
	return u
}

// ClearTplFileID clears the value of the "tpl_file_id" field.
func (u *MsgTemplateUpsert) ClearTplFileID() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldTplFileID)
	return u
}

// SetAttachments sets the "attachments" field.
func (u *MsgTemplateUpsert) SetAttachments(v []string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldAttachments, v)
	return u
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateAttachments() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldAttachments)
	return u
}

// ClearAttachments clears the value of the "attachments" field.
func (u *MsgTemplateUpsert) ClearAttachments() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldAttachments)
	return u
}

// SetAttachmentsFileIds sets the "attachments_file_ids" field.
func (u *MsgTemplateUpsert) SetAttachmentsFileIds(v []int) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldAttachmentsFileIds, v)
	return u
}

// UpdateAttachmentsFileIds sets the "attachments_file_ids" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateAttachmentsFileIds() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldAttachmentsFileIds)
	return u
}

// ClearAttachmentsFileIds clears the value of the "attachments_file_ids" field.
func (u *MsgTemplateUpsert) ClearAttachmentsFileIds() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldAttachmentsFileIds)
	return u
}

// SetComments sets the "comments" field.
func (u *MsgTemplateUpsert) SetComments(v string) *MsgTemplateUpsert {
	u.Set(msgtemplate.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *MsgTemplateUpsert) UpdateComments() *MsgTemplateUpsert {
	u.SetExcluded(msgtemplate.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *MsgTemplateUpsert) ClearComments() *MsgTemplateUpsert {
	u.SetNull(msgtemplate.FieldComments)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MsgTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msgtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgTemplateUpsertOne) UpdateNewValues() *MsgTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(msgtemplate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(msgtemplate.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(msgtemplate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MsgTemplateUpsertOne) Ignore() *MsgTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgTemplateUpsertOne) DoNothing() *MsgTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgTemplateCreate.OnConflict
// documentation for more info.
func (u *MsgTemplateUpsertOne) Update(set func(*MsgTemplateUpsert)) *MsgTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgTemplateUpsertOne) SetUpdatedBy(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgTemplateUpsertOne) AddUpdatedBy(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateUpdatedBy() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgTemplateUpsertOne) ClearUpdatedBy() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgTemplateUpsertOne) SetUpdatedAt(v time.Time) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateUpdatedAt() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgTemplateUpsertOne) ClearUpdatedAt() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetMsgTypeID sets the "msg_type_id" field.
func (u *MsgTemplateUpsertOne) SetMsgTypeID(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetMsgTypeID(v)
	})
}

// AddMsgTypeID adds v to the "msg_type_id" field.
func (u *MsgTemplateUpsertOne) AddMsgTypeID(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.AddMsgTypeID(v)
	})
}

// UpdateMsgTypeID sets the "msg_type_id" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateMsgTypeID() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateMsgTypeID()
	})
}

// SetMsgEventID sets the "msg_event_id" field.
func (u *MsgTemplateUpsertOne) SetMsgEventID(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetMsgEventID(v)
	})
}

// UpdateMsgEventID sets the "msg_event_id" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateMsgEventID() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateMsgEventID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgTemplateUpsertOne) SetTenantID(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgTemplateUpsertOne) AddTenantID(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateTenantID() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *MsgTemplateUpsertOne) SetName(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateName() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *MsgTemplateUpsertOne) SetStatus(v typex.SimpleStatus) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateStatus() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MsgTemplateUpsertOne) ClearStatus() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearStatus()
	})
}

// SetReceiverType sets the "receiver_type" field.
func (u *MsgTemplateUpsertOne) SetReceiverType(v profile.ReceiverType) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetReceiverType(v)
	})
}

// UpdateReceiverType sets the "receiver_type" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateReceiverType() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateReceiverType()
	})
}

// SetFormat sets the "format" field.
func (u *MsgTemplateUpsertOne) SetFormat(v msgtemplate.Format) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateFormat() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateFormat()
	})
}

// SetSubject sets the "subject" field.
func (u *MsgTemplateUpsertOne) SetSubject(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateSubject() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateSubject()
	})
}

// ClearSubject clears the value of the "subject" field.
func (u *MsgTemplateUpsertOne) ClearSubject() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearSubject()
	})
}

// SetFrom sets the "from" field.
func (u *MsgTemplateUpsertOne) SetFrom(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateFrom() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateFrom()
	})
}

// ClearFrom clears the value of the "from" field.
func (u *MsgTemplateUpsertOne) ClearFrom() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearFrom()
	})
}

// SetTo sets the "to" field.
func (u *MsgTemplateUpsertOne) SetTo(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetTo(v)
	})
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateTo() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateTo()
	})
}

// ClearTo clears the value of the "to" field.
func (u *MsgTemplateUpsertOne) ClearTo() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearTo()
	})
}

// SetCc sets the "cc" field.
func (u *MsgTemplateUpsertOne) SetCc(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetCc(v)
	})
}

// UpdateCc sets the "cc" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateCc() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateCc()
	})
}

// ClearCc clears the value of the "cc" field.
func (u *MsgTemplateUpsertOne) ClearCc() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearCc()
	})
}

// SetBcc sets the "bcc" field.
func (u *MsgTemplateUpsertOne) SetBcc(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetBcc(v)
	})
}

// UpdateBcc sets the "bcc" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateBcc() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateBcc()
	})
}

// ClearBcc clears the value of the "bcc" field.
func (u *MsgTemplateUpsertOne) ClearBcc() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearBcc()
	})
}

// SetBody sets the "body" field.
func (u *MsgTemplateUpsertOne) SetBody(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateBody() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *MsgTemplateUpsertOne) ClearBody() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearBody()
	})
}

// SetTpl sets the "tpl" field.
func (u *MsgTemplateUpsertOne) SetTpl(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetTpl(v)
	})
}

// UpdateTpl sets the "tpl" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateTpl() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateTpl()
	})
}

// ClearTpl clears the value of the "tpl" field.
func (u *MsgTemplateUpsertOne) ClearTpl() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearTpl()
	})
}

// SetTplFileID sets the "tpl_file_id" field.
func (u *MsgTemplateUpsertOne) SetTplFileID(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetTplFileID(v)
	})
}

// AddTplFileID adds v to the "tpl_file_id" field.
func (u *MsgTemplateUpsertOne) AddTplFileID(v int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.AddTplFileID(v)
	})
}

// UpdateTplFileID sets the "tpl_file_id" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateTplFileID() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateTplFileID()
	})
}

// ClearTplFileID clears the value of the "tpl_file_id" field.
func (u *MsgTemplateUpsertOne) ClearTplFileID() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearTplFileID()
	})
}

// SetAttachments sets the "attachments" field.
func (u *MsgTemplateUpsertOne) SetAttachments(v []string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetAttachments(v)
	})
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateAttachments() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateAttachments()
	})
}

// ClearAttachments clears the value of the "attachments" field.
func (u *MsgTemplateUpsertOne) ClearAttachments() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearAttachments()
	})
}

// SetAttachmentsFileIds sets the "attachments_file_ids" field.
func (u *MsgTemplateUpsertOne) SetAttachmentsFileIds(v []int) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetAttachmentsFileIds(v)
	})
}

// UpdateAttachmentsFileIds sets the "attachments_file_ids" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateAttachmentsFileIds() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateAttachmentsFileIds()
	})
}

// ClearAttachmentsFileIds clears the value of the "attachments_file_ids" field.
func (u *MsgTemplateUpsertOne) ClearAttachmentsFileIds() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearAttachmentsFileIds()
	})
}

// SetComments sets the "comments" field.
func (u *MsgTemplateUpsertOne) SetComments(v string) *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *MsgTemplateUpsertOne) UpdateComments() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *MsgTemplateUpsertOne) ClearComments() *MsgTemplateUpsertOne {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *MsgTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MsgTemplateUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MsgTemplateUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MsgTemplateCreateBulk is the builder for creating many MsgTemplate entities in bulk.
type MsgTemplateCreateBulk struct {
	config
	builders []*MsgTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the MsgTemplate entities in the database.
func (mtcb *MsgTemplateCreateBulk) Save(ctx context.Context) ([]*MsgTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MsgTemplate, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *MsgTemplateCreateBulk) SaveX(ctx context.Context) []*MsgTemplate {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *MsgTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *MsgTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgTemplateUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mtcb *MsgTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *MsgTemplateUpsertBulk {
	mtcb.conflict = opts
	return &MsgTemplateUpsertBulk{
		create: mtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mtcb *MsgTemplateCreateBulk) OnConflictColumns(columns ...string) *MsgTemplateUpsertBulk {
	mtcb.conflict = append(mtcb.conflict, sql.ConflictColumns(columns...))
	return &MsgTemplateUpsertBulk{
		create: mtcb,
	}
}

// MsgTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of MsgTemplate nodes.
type MsgTemplateUpsertBulk struct {
	create *MsgTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MsgTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msgtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgTemplateUpsertBulk) UpdateNewValues() *MsgTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(msgtemplate.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(msgtemplate.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(msgtemplate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MsgTemplateUpsertBulk) Ignore() *MsgTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgTemplateUpsertBulk) DoNothing() *MsgTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *MsgTemplateUpsertBulk) Update(set func(*MsgTemplateUpsert)) *MsgTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgTemplateUpsertBulk) SetUpdatedBy(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgTemplateUpsertBulk) AddUpdatedBy(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateUpdatedBy() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgTemplateUpsertBulk) ClearUpdatedBy() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgTemplateUpsertBulk) SetUpdatedAt(v time.Time) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateUpdatedAt() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgTemplateUpsertBulk) ClearUpdatedAt() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetMsgTypeID sets the "msg_type_id" field.
func (u *MsgTemplateUpsertBulk) SetMsgTypeID(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetMsgTypeID(v)
	})
}

// AddMsgTypeID adds v to the "msg_type_id" field.
func (u *MsgTemplateUpsertBulk) AddMsgTypeID(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.AddMsgTypeID(v)
	})
}

// UpdateMsgTypeID sets the "msg_type_id" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateMsgTypeID() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateMsgTypeID()
	})
}

// SetMsgEventID sets the "msg_event_id" field.
func (u *MsgTemplateUpsertBulk) SetMsgEventID(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetMsgEventID(v)
	})
}

// UpdateMsgEventID sets the "msg_event_id" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateMsgEventID() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateMsgEventID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgTemplateUpsertBulk) SetTenantID(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgTemplateUpsertBulk) AddTenantID(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateTenantID() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *MsgTemplateUpsertBulk) SetName(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateName() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *MsgTemplateUpsertBulk) SetStatus(v typex.SimpleStatus) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateStatus() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MsgTemplateUpsertBulk) ClearStatus() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearStatus()
	})
}

// SetReceiverType sets the "receiver_type" field.
func (u *MsgTemplateUpsertBulk) SetReceiverType(v profile.ReceiverType) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetReceiverType(v)
	})
}

// UpdateReceiverType sets the "receiver_type" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateReceiverType() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateReceiverType()
	})
}

// SetFormat sets the "format" field.
func (u *MsgTemplateUpsertBulk) SetFormat(v msgtemplate.Format) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateFormat() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateFormat()
	})
}

// SetSubject sets the "subject" field.
func (u *MsgTemplateUpsertBulk) SetSubject(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateSubject() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateSubject()
	})
}

// ClearSubject clears the value of the "subject" field.
func (u *MsgTemplateUpsertBulk) ClearSubject() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearSubject()
	})
}

// SetFrom sets the "from" field.
func (u *MsgTemplateUpsertBulk) SetFrom(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateFrom() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateFrom()
	})
}

// ClearFrom clears the value of the "from" field.
func (u *MsgTemplateUpsertBulk) ClearFrom() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearFrom()
	})
}

// SetTo sets the "to" field.
func (u *MsgTemplateUpsertBulk) SetTo(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetTo(v)
	})
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateTo() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateTo()
	})
}

// ClearTo clears the value of the "to" field.
func (u *MsgTemplateUpsertBulk) ClearTo() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearTo()
	})
}

// SetCc sets the "cc" field.
func (u *MsgTemplateUpsertBulk) SetCc(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetCc(v)
	})
}

// UpdateCc sets the "cc" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateCc() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateCc()
	})
}

// ClearCc clears the value of the "cc" field.
func (u *MsgTemplateUpsertBulk) ClearCc() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearCc()
	})
}

// SetBcc sets the "bcc" field.
func (u *MsgTemplateUpsertBulk) SetBcc(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetBcc(v)
	})
}

// UpdateBcc sets the "bcc" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateBcc() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateBcc()
	})
}

// ClearBcc clears the value of the "bcc" field.
func (u *MsgTemplateUpsertBulk) ClearBcc() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearBcc()
	})
}

// SetBody sets the "body" field.
func (u *MsgTemplateUpsertBulk) SetBody(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateBody() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *MsgTemplateUpsertBulk) ClearBody() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearBody()
	})
}

// SetTpl sets the "tpl" field.
func (u *MsgTemplateUpsertBulk) SetTpl(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetTpl(v)
	})
}

// UpdateTpl sets the "tpl" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateTpl() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateTpl()
	})
}

// ClearTpl clears the value of the "tpl" field.
func (u *MsgTemplateUpsertBulk) ClearTpl() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearTpl()
	})
}

// SetTplFileID sets the "tpl_file_id" field.
func (u *MsgTemplateUpsertBulk) SetTplFileID(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetTplFileID(v)
	})
}

// AddTplFileID adds v to the "tpl_file_id" field.
func (u *MsgTemplateUpsertBulk) AddTplFileID(v int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.AddTplFileID(v)
	})
}

// UpdateTplFileID sets the "tpl_file_id" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateTplFileID() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateTplFileID()
	})
}

// ClearTplFileID clears the value of the "tpl_file_id" field.
func (u *MsgTemplateUpsertBulk) ClearTplFileID() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearTplFileID()
	})
}

// SetAttachments sets the "attachments" field.
func (u *MsgTemplateUpsertBulk) SetAttachments(v []string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetAttachments(v)
	})
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateAttachments() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateAttachments()
	})
}

// ClearAttachments clears the value of the "attachments" field.
func (u *MsgTemplateUpsertBulk) ClearAttachments() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearAttachments()
	})
}

// SetAttachmentsFileIds sets the "attachments_file_ids" field.
func (u *MsgTemplateUpsertBulk) SetAttachmentsFileIds(v []int) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetAttachmentsFileIds(v)
	})
}

// UpdateAttachmentsFileIds sets the "attachments_file_ids" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateAttachmentsFileIds() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateAttachmentsFileIds()
	})
}

// ClearAttachmentsFileIds clears the value of the "attachments_file_ids" field.
func (u *MsgTemplateUpsertBulk) ClearAttachmentsFileIds() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearAttachmentsFileIds()
	})
}

// SetComments sets the "comments" field.
func (u *MsgTemplateUpsertBulk) SetComments(v string) *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *MsgTemplateUpsertBulk) UpdateComments() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *MsgTemplateUpsertBulk) ClearComments() *MsgTemplateUpsertBulk {
	return u.Update(func(s *MsgTemplateUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *MsgTemplateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MsgTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
