// Code generated by ent, DO NOT EDIT.

package nlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/msgcenter/ent/predicate"
	"github.com/woocoos/msgcenter/pkg/profile"

	"github.com/woocoos/msgcenter/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldTenantID, v))
}

// GroupKey applies equality check predicate on the "group_key" field. It's identical to GroupKeyEQ.
func GroupKey(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldGroupKey, v))
}

// Receiver applies equality check predicate on the "receiver" field. It's identical to ReceiverEQ.
func Receiver(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldReceiver, v))
}

// Idx applies equality check predicate on the "idx" field. It's identical to IdxEQ.
func Idx(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldIdx, v))
}

// SendAt applies equality check predicate on the "send_at" field. It's identical to SendAtEQ.
func SendAt(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldSendAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldUpdatedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldExpiresAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldTenantID, v))
}

// GroupKeyEQ applies the EQ predicate on the "group_key" field.
func GroupKeyEQ(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldGroupKey, v))
}

// GroupKeyNEQ applies the NEQ predicate on the "group_key" field.
func GroupKeyNEQ(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldGroupKey, v))
}

// GroupKeyIn applies the In predicate on the "group_key" field.
func GroupKeyIn(vs ...string) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldGroupKey, vs...))
}

// GroupKeyNotIn applies the NotIn predicate on the "group_key" field.
func GroupKeyNotIn(vs ...string) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldGroupKey, vs...))
}

// GroupKeyGT applies the GT predicate on the "group_key" field.
func GroupKeyGT(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldGroupKey, v))
}

// GroupKeyGTE applies the GTE predicate on the "group_key" field.
func GroupKeyGTE(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldGroupKey, v))
}

// GroupKeyLT applies the LT predicate on the "group_key" field.
func GroupKeyLT(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldGroupKey, v))
}

// GroupKeyLTE applies the LTE predicate on the "group_key" field.
func GroupKeyLTE(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldGroupKey, v))
}

// GroupKeyContains applies the Contains predicate on the "group_key" field.
func GroupKeyContains(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldContains(FieldGroupKey, v))
}

// GroupKeyHasPrefix applies the HasPrefix predicate on the "group_key" field.
func GroupKeyHasPrefix(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldHasPrefix(FieldGroupKey, v))
}

// GroupKeyHasSuffix applies the HasSuffix predicate on the "group_key" field.
func GroupKeyHasSuffix(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldHasSuffix(FieldGroupKey, v))
}

// GroupKeyEqualFold applies the EqualFold predicate on the "group_key" field.
func GroupKeyEqualFold(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldEqualFold(FieldGroupKey, v))
}

// GroupKeyContainsFold applies the ContainsFold predicate on the "group_key" field.
func GroupKeyContainsFold(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldContainsFold(FieldGroupKey, v))
}

// ReceiverEQ applies the EQ predicate on the "receiver" field.
func ReceiverEQ(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldReceiver, v))
}

// ReceiverNEQ applies the NEQ predicate on the "receiver" field.
func ReceiverNEQ(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldReceiver, v))
}

// ReceiverIn applies the In predicate on the "receiver" field.
func ReceiverIn(vs ...string) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldReceiver, vs...))
}

// ReceiverNotIn applies the NotIn predicate on the "receiver" field.
func ReceiverNotIn(vs ...string) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldReceiver, vs...))
}

// ReceiverGT applies the GT predicate on the "receiver" field.
func ReceiverGT(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldReceiver, v))
}

// ReceiverGTE applies the GTE predicate on the "receiver" field.
func ReceiverGTE(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldReceiver, v))
}

// ReceiverLT applies the LT predicate on the "receiver" field.
func ReceiverLT(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldReceiver, v))
}

// ReceiverLTE applies the LTE predicate on the "receiver" field.
func ReceiverLTE(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldReceiver, v))
}

// ReceiverContains applies the Contains predicate on the "receiver" field.
func ReceiverContains(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldContains(FieldReceiver, v))
}

// ReceiverHasPrefix applies the HasPrefix predicate on the "receiver" field.
func ReceiverHasPrefix(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldHasPrefix(FieldReceiver, v))
}

// ReceiverHasSuffix applies the HasSuffix predicate on the "receiver" field.
func ReceiverHasSuffix(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldHasSuffix(FieldReceiver, v))
}

// ReceiverEqualFold applies the EqualFold predicate on the "receiver" field.
func ReceiverEqualFold(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldEqualFold(FieldReceiver, v))
}

// ReceiverContainsFold applies the ContainsFold predicate on the "receiver" field.
func ReceiverContainsFold(v string) predicate.Nlog {
	return predicate.Nlog(sql.FieldContainsFold(FieldReceiver, v))
}

// ReceiverTypeEQ applies the EQ predicate on the "receiver_type" field.
func ReceiverTypeEQ(v profile.ReceiverType) predicate.Nlog {
	vc := v
	return predicate.Nlog(sql.FieldEQ(FieldReceiverType, vc))
}

// ReceiverTypeNEQ applies the NEQ predicate on the "receiver_type" field.
func ReceiverTypeNEQ(v profile.ReceiverType) predicate.Nlog {
	vc := v
	return predicate.Nlog(sql.FieldNEQ(FieldReceiverType, vc))
}

// ReceiverTypeIn applies the In predicate on the "receiver_type" field.
func ReceiverTypeIn(vs ...profile.ReceiverType) predicate.Nlog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nlog(sql.FieldIn(FieldReceiverType, v...))
}

// ReceiverTypeNotIn applies the NotIn predicate on the "receiver_type" field.
func ReceiverTypeNotIn(vs ...profile.ReceiverType) predicate.Nlog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nlog(sql.FieldNotIn(FieldReceiverType, v...))
}

// IdxEQ applies the EQ predicate on the "idx" field.
func IdxEQ(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldIdx, v))
}

// IdxNEQ applies the NEQ predicate on the "idx" field.
func IdxNEQ(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldIdx, v))
}

// IdxIn applies the In predicate on the "idx" field.
func IdxIn(vs ...int) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldIdx, vs...))
}

// IdxNotIn applies the NotIn predicate on the "idx" field.
func IdxNotIn(vs ...int) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldIdx, vs...))
}

// IdxGT applies the GT predicate on the "idx" field.
func IdxGT(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldIdx, v))
}

// IdxGTE applies the GTE predicate on the "idx" field.
func IdxGTE(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldIdx, v))
}

// IdxLT applies the LT predicate on the "idx" field.
func IdxLT(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldIdx, v))
}

// IdxLTE applies the LTE predicate on the "idx" field.
func IdxLTE(v int) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldIdx, v))
}

// SendAtEQ applies the EQ predicate on the "send_at" field.
func SendAtEQ(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldSendAt, v))
}

// SendAtNEQ applies the NEQ predicate on the "send_at" field.
func SendAtNEQ(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldSendAt, v))
}

// SendAtIn applies the In predicate on the "send_at" field.
func SendAtIn(vs ...time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldSendAt, vs...))
}

// SendAtNotIn applies the NotIn predicate on the "send_at" field.
func SendAtNotIn(vs ...time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldSendAt, vs...))
}

// SendAtGT applies the GT predicate on the "send_at" field.
func SendAtGT(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldSendAt, v))
}

// SendAtGTE applies the GTE predicate on the "send_at" field.
func SendAtGTE(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldSendAt, v))
}

// SendAtLT applies the LT predicate on the "send_at" field.
func SendAtLT(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldSendAt, v))
}

// SendAtLTE applies the LTE predicate on the "send_at" field.
func SendAtLTE(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldSendAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Nlog {
	return predicate.Nlog(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Nlog {
	return predicate.Nlog(sql.FieldNotNull(FieldUpdatedAt))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Nlog {
	return predicate.Nlog(sql.FieldLTE(FieldExpiresAt, v))
}

// HasAlerts applies the HasEdge predicate on the "alerts" edge.
func HasAlerts() predicate.Nlog {
	return predicate.Nlog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AlertsTable, AlertsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgAlert
		step.Edge.Schema = schemaConfig.NlogAlert
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlertsWith applies the HasEdge predicate on the "alerts" edge with a given conditions (other predicates).
func HasAlertsWith(preds ...predicate.MsgAlert) predicate.Nlog {
	return predicate.Nlog(func(s *sql.Selector) {
		step := newAlertsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgAlert
		step.Edge.Schema = schemaConfig.NlogAlert
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNlogAlert applies the HasEdge predicate on the "nlog_alert" edge.
func HasNlogAlert() predicate.Nlog {
	return predicate.Nlog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NlogAlertTable, NlogAlertColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.NlogAlert
		step.Edge.Schema = schemaConfig.NlogAlert
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNlogAlertWith applies the HasEdge predicate on the "nlog_alert" edge with a given conditions (other predicates).
func HasNlogAlertWith(preds ...predicate.NlogAlert) predicate.Nlog {
	return predicate.Nlog(func(s *sql.Selector) {
		step := newNlogAlertStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.NlogAlert
		step.Edge.Schema = schemaConfig.NlogAlert
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Nlog) predicate.Nlog {
	return predicate.Nlog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Nlog) predicate.Nlog {
	return predicate.Nlog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Nlog) predicate.Nlog {
	return predicate.Nlog(sql.NotPredicates(p))
}
