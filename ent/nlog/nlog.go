// Code generated by ent, DO NOT EDIT.

package nlog

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/woocoos/msgcenter/pkg/profile"
)

const (
	// Label holds the string label denoting the nlog type in the database.
	Label = "nlog"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldGroupKey holds the string denoting the group_key field in the database.
	FieldGroupKey = "group_key"
	// FieldReceiver holds the string denoting the receiver field in the database.
	FieldReceiver = "receiver"
	// FieldReceiverType holds the string denoting the receiver_type field in the database.
	FieldReceiverType = "receiver_type"
	// FieldIdx holds the string denoting the idx field in the database.
	FieldIdx = "idx"
	// FieldSendAt holds the string denoting the send_at field in the database.
	FieldSendAt = "send_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// EdgeAlerts holds the string denoting the alerts edge name in mutations.
	EdgeAlerts = "alerts"
	// EdgeNlogAlert holds the string denoting the nlog_alert edge name in mutations.
	EdgeNlogAlert = "nlog_alert"
	// Table holds the table name of the nlog in the database.
	Table = "msg_nlog"
	// AlertsTable is the table that holds the alerts relation/edge. The primary key declared below.
	AlertsTable = "msg_nlog_alert"
	// AlertsInverseTable is the table name for the MsgAlert entity.
	// It exists in this package in order to avoid circular dependency with the "msgalert" package.
	AlertsInverseTable = "msg_alert"
	// NlogAlertTable is the table that holds the nlog_alert relation/edge.
	NlogAlertTable = "msg_nlog_alert"
	// NlogAlertInverseTable is the table name for the NlogAlert entity.
	// It exists in this package in order to avoid circular dependency with the "nlogalert" package.
	NlogAlertInverseTable = "msg_nlog_alert"
	// NlogAlertColumn is the table column denoting the nlog_alert relation/edge.
	NlogAlertColumn = "nlog_id"
)

// Columns holds all SQL columns for nlog fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldGroupKey,
	FieldReceiver,
	FieldReceiverType,
	FieldIdx,
	FieldSendAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldExpiresAt,
}

var (
	// AlertsPrimaryKey and AlertsColumn2 are the table columns denoting the
	// primary key for the alerts relation (M2M).
	AlertsPrimaryKey = []string{"nlog_id", "alert_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/msgcenter/ent/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// ReceiverTypeValidator is a validator for the "receiver_type" field enum values. It is called by the builders before save.
func ReceiverTypeValidator(rt profile.ReceiverType) error {
	switch rt.String() {
	case "email", "message", "webhook":
		return nil
	default:
		return fmt.Errorf("nlog: invalid enum value for receiver_type field: %q", rt)
	}
}

// OrderOption defines the ordering options for the Nlog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByGroupKey orders the results by the group_key field.
func ByGroupKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupKey, opts...).ToFunc()
}

// ByReceiver orders the results by the receiver field.
func ByReceiver(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiver, opts...).ToFunc()
}

// ByReceiverType orders the results by the receiver_type field.
func ByReceiverType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverType, opts...).ToFunc()
}

// ByIdx orders the results by the idx field.
func ByIdx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdx, opts...).ToFunc()
}

// BySendAt orders the results by the send_at field.
func BySendAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByAlertsCount orders the results by alerts count.
func ByAlertsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAlertsStep(), opts...)
	}
}

// ByAlerts orders the results by alerts terms.
func ByAlerts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlertsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNlogAlertCount orders the results by nlog_alert count.
func ByNlogAlertCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNlogAlertStep(), opts...)
	}
}

// ByNlogAlert orders the results by nlog_alert terms.
func ByNlogAlert(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNlogAlertStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAlertsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlertsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AlertsTable, AlertsPrimaryKey...),
	)
}
func newNlogAlertStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NlogAlertInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NlogAlertTable, NlogAlertColumn),
	)
}

var (
	// profile.ReceiverType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*profile.ReceiverType)(nil)
	// profile.ReceiverType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*profile.ReceiverType)(nil)
)
