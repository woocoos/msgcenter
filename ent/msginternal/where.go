// Code generated by ent, DO NOT EDIT.

package msginternal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldUpdatedAt, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldCategory, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldSubject, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldBody, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldFormat, v))
}

// Redirect applies equality check predicate on the "redirect" field. It's identical to RedirectEQ.
func Redirect(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldRedirect, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotNull(FieldUpdatedAt))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContainsFold(FieldCategory, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContainsFold(FieldSubject, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasSuffix(FieldBody, v))
}

// BodyIsNil applies the IsNil predicate on the "body" field.
func BodyIsNil() predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIsNull(FieldBody))
}

// BodyNotNil applies the NotNil predicate on the "body" field.
func BodyNotNil() predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotNull(FieldBody))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContainsFold(FieldBody, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContainsFold(FieldFormat, v))
}

// RedirectEQ applies the EQ predicate on the "redirect" field.
func RedirectEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEQ(FieldRedirect, v))
}

// RedirectNEQ applies the NEQ predicate on the "redirect" field.
func RedirectNEQ(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNEQ(FieldRedirect, v))
}

// RedirectIn applies the In predicate on the "redirect" field.
func RedirectIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIn(FieldRedirect, vs...))
}

// RedirectNotIn applies the NotIn predicate on the "redirect" field.
func RedirectNotIn(vs ...string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotIn(FieldRedirect, vs...))
}

// RedirectGT applies the GT predicate on the "redirect" field.
func RedirectGT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGT(FieldRedirect, v))
}

// RedirectGTE applies the GTE predicate on the "redirect" field.
func RedirectGTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldGTE(FieldRedirect, v))
}

// RedirectLT applies the LT predicate on the "redirect" field.
func RedirectLT(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLT(FieldRedirect, v))
}

// RedirectLTE applies the LTE predicate on the "redirect" field.
func RedirectLTE(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldLTE(FieldRedirect, v))
}

// RedirectContains applies the Contains predicate on the "redirect" field.
func RedirectContains(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContains(FieldRedirect, v))
}

// RedirectHasPrefix applies the HasPrefix predicate on the "redirect" field.
func RedirectHasPrefix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasPrefix(FieldRedirect, v))
}

// RedirectHasSuffix applies the HasSuffix predicate on the "redirect" field.
func RedirectHasSuffix(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldHasSuffix(FieldRedirect, v))
}

// RedirectIsNil applies the IsNil predicate on the "redirect" field.
func RedirectIsNil() predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldIsNull(FieldRedirect))
}

// RedirectNotNil applies the NotNil predicate on the "redirect" field.
func RedirectNotNil() predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldNotNull(FieldRedirect))
}

// RedirectEqualFold applies the EqualFold predicate on the "redirect" field.
func RedirectEqualFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldEqualFold(FieldRedirect, v))
}

// RedirectContainsFold applies the ContainsFold predicate on the "redirect" field.
func RedirectContainsFold(v string) predicate.MsgInternal {
	return predicate.MsgInternal(sql.FieldContainsFold(FieldRedirect, v))
}

// HasMsgInternalTo applies the HasEdge predicate on the "msg_internal_to" edge.
func HasMsgInternalTo() predicate.MsgInternal {
	return predicate.MsgInternal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MsgInternalToTable, MsgInternalToColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgInternalTo
		step.Edge.Schema = schemaConfig.MsgInternalTo
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMsgInternalToWith applies the HasEdge predicate on the "msg_internal_to" edge with a given conditions (other predicates).
func HasMsgInternalToWith(preds ...predicate.MsgInternalTo) predicate.MsgInternal {
	return predicate.MsgInternal(func(s *sql.Selector) {
		step := newMsgInternalToStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgInternalTo
		step.Edge.Schema = schemaConfig.MsgInternalTo
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MsgInternal) predicate.MsgInternal {
	return predicate.MsgInternal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MsgInternal) predicate.MsgInternal {
	return predicate.MsgInternal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MsgInternal) predicate.MsgInternal {
	return predicate.MsgInternal(sql.NotPredicates(p))
}
