// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/fileidentity"
	"github.com/woocoos/msgcenter/ent/filesource"
)

// FileIdentityCreate is the builder for creating a FileIdentity entity.
type FileIdentityCreate struct {
	config
	mutation *FileIdentityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (fic *FileIdentityCreate) SetTenantID(i int) *FileIdentityCreate {
	fic.mutation.SetTenantID(i)
	return fic
}

// SetAccessKeyID sets the "access_key_id" field.
func (fic *FileIdentityCreate) SetAccessKeyID(s string) *FileIdentityCreate {
	fic.mutation.SetAccessKeyID(s)
	return fic
}

// SetAccessKeySecret sets the "access_key_secret" field.
func (fic *FileIdentityCreate) SetAccessKeySecret(s string) *FileIdentityCreate {
	fic.mutation.SetAccessKeySecret(s)
	return fic
}

// SetFileSourceID sets the "file_source_id" field.
func (fic *FileIdentityCreate) SetFileSourceID(i int) *FileIdentityCreate {
	fic.mutation.SetFileSourceID(i)
	return fic
}

// SetRoleArn sets the "role_arn" field.
func (fic *FileIdentityCreate) SetRoleArn(s string) *FileIdentityCreate {
	fic.mutation.SetRoleArn(s)
	return fic
}

// SetPolicy sets the "policy" field.
func (fic *FileIdentityCreate) SetPolicy(s string) *FileIdentityCreate {
	fic.mutation.SetPolicy(s)
	return fic
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (fic *FileIdentityCreate) SetNillablePolicy(s *string) *FileIdentityCreate {
	if s != nil {
		fic.SetPolicy(*s)
	}
	return fic
}

// SetDurationSeconds sets the "duration_seconds" field.
func (fic *FileIdentityCreate) SetDurationSeconds(i int) *FileIdentityCreate {
	fic.mutation.SetDurationSeconds(i)
	return fic
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (fic *FileIdentityCreate) SetNillableDurationSeconds(i *int) *FileIdentityCreate {
	if i != nil {
		fic.SetDurationSeconds(*i)
	}
	return fic
}

// SetIsDefault sets the "is_default" field.
func (fic *FileIdentityCreate) SetIsDefault(b bool) *FileIdentityCreate {
	fic.mutation.SetIsDefault(b)
	return fic
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (fic *FileIdentityCreate) SetNillableIsDefault(b *bool) *FileIdentityCreate {
	if b != nil {
		fic.SetIsDefault(*b)
	}
	return fic
}

// SetComments sets the "comments" field.
func (fic *FileIdentityCreate) SetComments(s string) *FileIdentityCreate {
	fic.mutation.SetComments(s)
	return fic
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (fic *FileIdentityCreate) SetNillableComments(s *string) *FileIdentityCreate {
	if s != nil {
		fic.SetComments(*s)
	}
	return fic
}

// SetID sets the "id" field.
func (fic *FileIdentityCreate) SetID(i int) *FileIdentityCreate {
	fic.mutation.SetID(i)
	return fic
}

// SetSourceID sets the "source" edge to the FileSource entity by ID.
func (fic *FileIdentityCreate) SetSourceID(id int) *FileIdentityCreate {
	fic.mutation.SetSourceID(id)
	return fic
}

// SetSource sets the "source" edge to the FileSource entity.
func (fic *FileIdentityCreate) SetSource(f *FileSource) *FileIdentityCreate {
	return fic.SetSourceID(f.ID)
}

// Mutation returns the FileIdentityMutation object of the builder.
func (fic *FileIdentityCreate) Mutation() *FileIdentityMutation {
	return fic.mutation
}

// Save creates the FileIdentity in the database.
func (fic *FileIdentityCreate) Save(ctx context.Context) (*FileIdentity, error) {
	if err := fic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FileIdentityCreate) SaveX(ctx context.Context) *FileIdentity {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FileIdentityCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FileIdentityCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FileIdentityCreate) defaults() error {
	if _, ok := fic.mutation.DurationSeconds(); !ok {
		v := fileidentity.DefaultDurationSeconds
		fic.mutation.SetDurationSeconds(v)
	}
	if _, ok := fic.mutation.IsDefault(); !ok {
		v := fileidentity.DefaultIsDefault
		fic.mutation.SetIsDefault(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fic *FileIdentityCreate) check() error {
	if _, ok := fic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "FileIdentity.tenant_id"`)}
	}
	if _, ok := fic.mutation.AccessKeyID(); !ok {
		return &ValidationError{Name: "access_key_id", err: errors.New(`ent: missing required field "FileIdentity.access_key_id"`)}
	}
	if v, ok := fic.mutation.AccessKeyID(); ok {
		if err := fileidentity.AccessKeyIDValidator(v); err != nil {
			return &ValidationError{Name: "access_key_id", err: fmt.Errorf(`ent: validator failed for field "FileIdentity.access_key_id": %w`, err)}
		}
	}
	if _, ok := fic.mutation.AccessKeySecret(); !ok {
		return &ValidationError{Name: "access_key_secret", err: errors.New(`ent: missing required field "FileIdentity.access_key_secret"`)}
	}
	if v, ok := fic.mutation.AccessKeySecret(); ok {
		if err := fileidentity.AccessKeySecretValidator(v); err != nil {
			return &ValidationError{Name: "access_key_secret", err: fmt.Errorf(`ent: validator failed for field "FileIdentity.access_key_secret": %w`, err)}
		}
	}
	if _, ok := fic.mutation.FileSourceID(); !ok {
		return &ValidationError{Name: "file_source_id", err: errors.New(`ent: missing required field "FileIdentity.file_source_id"`)}
	}
	if _, ok := fic.mutation.RoleArn(); !ok {
		return &ValidationError{Name: "role_arn", err: errors.New(`ent: missing required field "FileIdentity.role_arn"`)}
	}
	if v, ok := fic.mutation.RoleArn(); ok {
		if err := fileidentity.RoleArnValidator(v); err != nil {
			return &ValidationError{Name: "role_arn", err: fmt.Errorf(`ent: validator failed for field "FileIdentity.role_arn": %w`, err)}
		}
	}
	if _, ok := fic.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "FileIdentity.is_default"`)}
	}
	if len(fic.mutation.SourceIDs()) == 0 {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required edge "FileIdentity.source"`)}
	}
	return nil
}

func (fic *FileIdentityCreate) sqlSave(ctx context.Context) (*FileIdentity, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FileIdentityCreate) createSpec() (*FileIdentity, *sqlgraph.CreateSpec) {
	var (
		_node = &FileIdentity{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(fileidentity.Table, sqlgraph.NewFieldSpec(fileidentity.FieldID, field.TypeInt))
	)
	_spec.Schema = fic.schemaConfig.FileIdentity
	_spec.OnConflict = fic.conflict
	if id, ok := fic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fic.mutation.TenantID(); ok {
		_spec.SetField(fileidentity.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := fic.mutation.AccessKeyID(); ok {
		_spec.SetField(fileidentity.FieldAccessKeyID, field.TypeString, value)
		_node.AccessKeyID = value
	}
	if value, ok := fic.mutation.AccessKeySecret(); ok {
		_spec.SetField(fileidentity.FieldAccessKeySecret, field.TypeString, value)
		_node.AccessKeySecret = value
	}
	if value, ok := fic.mutation.RoleArn(); ok {
		_spec.SetField(fileidentity.FieldRoleArn, field.TypeString, value)
		_node.RoleArn = value
	}
	if value, ok := fic.mutation.Policy(); ok {
		_spec.SetField(fileidentity.FieldPolicy, field.TypeString, value)
		_node.Policy = value
	}
	if value, ok := fic.mutation.DurationSeconds(); ok {
		_spec.SetField(fileidentity.FieldDurationSeconds, field.TypeInt, value)
		_node.DurationSeconds = value
	}
	if value, ok := fic.mutation.IsDefault(); ok {
		_spec.SetField(fileidentity.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := fic.mutation.Comments(); ok {
		_spec.SetField(fileidentity.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if nodes := fic.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileidentity.SourceTable,
			Columns: []string{fileidentity.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesource.FieldID, field.TypeInt),
			},
		}
		edge.Schema = fic.schemaConfig.FileIdentity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FileSourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileIdentity.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileIdentityUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (fic *FileIdentityCreate) OnConflict(opts ...sql.ConflictOption) *FileIdentityUpsertOne {
	fic.conflict = opts
	return &FileIdentityUpsertOne{
		create: fic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileIdentity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fic *FileIdentityCreate) OnConflictColumns(columns ...string) *FileIdentityUpsertOne {
	fic.conflict = append(fic.conflict, sql.ConflictColumns(columns...))
	return &FileIdentityUpsertOne{
		create: fic,
	}
}

type (
	// FileIdentityUpsertOne is the builder for "upsert"-ing
	//  one FileIdentity node.
	FileIdentityUpsertOne struct {
		create *FileIdentityCreate
	}

	// FileIdentityUpsert is the "OnConflict" setter.
	FileIdentityUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *FileIdentityUpsert) SetTenantID(v int) *FileIdentityUpsert {
	u.Set(fileidentity.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdateTenantID() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldTenantID)
	return u
}

// AddTenantID adds v to the "tenant_id" field.
func (u *FileIdentityUpsert) AddTenantID(v int) *FileIdentityUpsert {
	u.Add(fileidentity.FieldTenantID, v)
	return u
}

// SetAccessKeyID sets the "access_key_id" field.
func (u *FileIdentityUpsert) SetAccessKeyID(v string) *FileIdentityUpsert {
	u.Set(fileidentity.FieldAccessKeyID, v)
	return u
}

// UpdateAccessKeyID sets the "access_key_id" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdateAccessKeyID() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldAccessKeyID)
	return u
}

// SetAccessKeySecret sets the "access_key_secret" field.
func (u *FileIdentityUpsert) SetAccessKeySecret(v string) *FileIdentityUpsert {
	u.Set(fileidentity.FieldAccessKeySecret, v)
	return u
}

// UpdateAccessKeySecret sets the "access_key_secret" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdateAccessKeySecret() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldAccessKeySecret)
	return u
}

// SetFileSourceID sets the "file_source_id" field.
func (u *FileIdentityUpsert) SetFileSourceID(v int) *FileIdentityUpsert {
	u.Set(fileidentity.FieldFileSourceID, v)
	return u
}

// UpdateFileSourceID sets the "file_source_id" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdateFileSourceID() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldFileSourceID)
	return u
}

// SetRoleArn sets the "role_arn" field.
func (u *FileIdentityUpsert) SetRoleArn(v string) *FileIdentityUpsert {
	u.Set(fileidentity.FieldRoleArn, v)
	return u
}

// UpdateRoleArn sets the "role_arn" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdateRoleArn() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldRoleArn)
	return u
}

// SetPolicy sets the "policy" field.
func (u *FileIdentityUpsert) SetPolicy(v string) *FileIdentityUpsert {
	u.Set(fileidentity.FieldPolicy, v)
	return u
}

// UpdatePolicy sets the "policy" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdatePolicy() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldPolicy)
	return u
}

// ClearPolicy clears the value of the "policy" field.
func (u *FileIdentityUpsert) ClearPolicy() *FileIdentityUpsert {
	u.SetNull(fileidentity.FieldPolicy)
	return u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FileIdentityUpsert) SetDurationSeconds(v int) *FileIdentityUpsert {
	u.Set(fileidentity.FieldDurationSeconds, v)
	return u
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdateDurationSeconds() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldDurationSeconds)
	return u
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FileIdentityUpsert) AddDurationSeconds(v int) *FileIdentityUpsert {
	u.Add(fileidentity.FieldDurationSeconds, v)
	return u
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FileIdentityUpsert) ClearDurationSeconds() *FileIdentityUpsert {
	u.SetNull(fileidentity.FieldDurationSeconds)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *FileIdentityUpsert) SetIsDefault(v bool) *FileIdentityUpsert {
	u.Set(fileidentity.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdateIsDefault() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldIsDefault)
	return u
}

// SetComments sets the "comments" field.
func (u *FileIdentityUpsert) SetComments(v string) *FileIdentityUpsert {
	u.Set(fileidentity.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *FileIdentityUpsert) UpdateComments() *FileIdentityUpsert {
	u.SetExcluded(fileidentity.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *FileIdentityUpsert) ClearComments() *FileIdentityUpsert {
	u.SetNull(fileidentity.FieldComments)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FileIdentity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fileidentity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileIdentityUpsertOne) UpdateNewValues() *FileIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fileidentity.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileIdentity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FileIdentityUpsertOne) Ignore() *FileIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileIdentityUpsertOne) DoNothing() *FileIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileIdentityCreate.OnConflict
// documentation for more info.
func (u *FileIdentityUpsertOne) Update(set func(*FileIdentityUpsert)) *FileIdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileIdentityUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *FileIdentityUpsertOne) SetTenantID(v int) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *FileIdentityUpsertOne) AddTenantID(v int) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdateTenantID() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateTenantID()
	})
}

// SetAccessKeyID sets the "access_key_id" field.
func (u *FileIdentityUpsertOne) SetAccessKeyID(v string) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetAccessKeyID(v)
	})
}

// UpdateAccessKeyID sets the "access_key_id" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdateAccessKeyID() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateAccessKeyID()
	})
}

// SetAccessKeySecret sets the "access_key_secret" field.
func (u *FileIdentityUpsertOne) SetAccessKeySecret(v string) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetAccessKeySecret(v)
	})
}

// UpdateAccessKeySecret sets the "access_key_secret" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdateAccessKeySecret() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateAccessKeySecret()
	})
}

// SetFileSourceID sets the "file_source_id" field.
func (u *FileIdentityUpsertOne) SetFileSourceID(v int) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetFileSourceID(v)
	})
}

// UpdateFileSourceID sets the "file_source_id" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdateFileSourceID() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateFileSourceID()
	})
}

// SetRoleArn sets the "role_arn" field.
func (u *FileIdentityUpsertOne) SetRoleArn(v string) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetRoleArn(v)
	})
}

// UpdateRoleArn sets the "role_arn" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdateRoleArn() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateRoleArn()
	})
}

// SetPolicy sets the "policy" field.
func (u *FileIdentityUpsertOne) SetPolicy(v string) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetPolicy(v)
	})
}

// UpdatePolicy sets the "policy" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdatePolicy() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdatePolicy()
	})
}

// ClearPolicy clears the value of the "policy" field.
func (u *FileIdentityUpsertOne) ClearPolicy() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.ClearPolicy()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FileIdentityUpsertOne) SetDurationSeconds(v int) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FileIdentityUpsertOne) AddDurationSeconds(v int) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdateDurationSeconds() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FileIdentityUpsertOne) ClearDurationSeconds() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.ClearDurationSeconds()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *FileIdentityUpsertOne) SetIsDefault(v bool) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdateIsDefault() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateIsDefault()
	})
}

// SetComments sets the "comments" field.
func (u *FileIdentityUpsertOne) SetComments(v string) *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *FileIdentityUpsertOne) UpdateComments() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *FileIdentityUpsertOne) ClearComments() *FileIdentityUpsertOne {
	return u.Update(func(s *FileIdentityUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *FileIdentityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileIdentityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileIdentityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FileIdentityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FileIdentityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FileIdentityCreateBulk is the builder for creating many FileIdentity entities in bulk.
type FileIdentityCreateBulk struct {
	config
	err      error
	builders []*FileIdentityCreate
	conflict []sql.ConflictOption
}

// Save creates the FileIdentity entities in the database.
func (ficb *FileIdentityCreateBulk) Save(ctx context.Context) ([]*FileIdentity, error) {
	if ficb.err != nil {
		return nil, ficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FileIdentity, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileIdentityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ficb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FileIdentityCreateBulk) SaveX(ctx context.Context) []*FileIdentity {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FileIdentityCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FileIdentityCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileIdentity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileIdentityUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ficb *FileIdentityCreateBulk) OnConflict(opts ...sql.ConflictOption) *FileIdentityUpsertBulk {
	ficb.conflict = opts
	return &FileIdentityUpsertBulk{
		create: ficb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileIdentity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ficb *FileIdentityCreateBulk) OnConflictColumns(columns ...string) *FileIdentityUpsertBulk {
	ficb.conflict = append(ficb.conflict, sql.ConflictColumns(columns...))
	return &FileIdentityUpsertBulk{
		create: ficb,
	}
}

// FileIdentityUpsertBulk is the builder for "upsert"-ing
// a bulk of FileIdentity nodes.
type FileIdentityUpsertBulk struct {
	create *FileIdentityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FileIdentity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fileidentity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileIdentityUpsertBulk) UpdateNewValues() *FileIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fileidentity.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileIdentity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FileIdentityUpsertBulk) Ignore() *FileIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileIdentityUpsertBulk) DoNothing() *FileIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileIdentityCreateBulk.OnConflict
// documentation for more info.
func (u *FileIdentityUpsertBulk) Update(set func(*FileIdentityUpsert)) *FileIdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileIdentityUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *FileIdentityUpsertBulk) SetTenantID(v int) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *FileIdentityUpsertBulk) AddTenantID(v int) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdateTenantID() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateTenantID()
	})
}

// SetAccessKeyID sets the "access_key_id" field.
func (u *FileIdentityUpsertBulk) SetAccessKeyID(v string) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetAccessKeyID(v)
	})
}

// UpdateAccessKeyID sets the "access_key_id" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdateAccessKeyID() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateAccessKeyID()
	})
}

// SetAccessKeySecret sets the "access_key_secret" field.
func (u *FileIdentityUpsertBulk) SetAccessKeySecret(v string) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetAccessKeySecret(v)
	})
}

// UpdateAccessKeySecret sets the "access_key_secret" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdateAccessKeySecret() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateAccessKeySecret()
	})
}

// SetFileSourceID sets the "file_source_id" field.
func (u *FileIdentityUpsertBulk) SetFileSourceID(v int) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetFileSourceID(v)
	})
}

// UpdateFileSourceID sets the "file_source_id" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdateFileSourceID() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateFileSourceID()
	})
}

// SetRoleArn sets the "role_arn" field.
func (u *FileIdentityUpsertBulk) SetRoleArn(v string) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetRoleArn(v)
	})
}

// UpdateRoleArn sets the "role_arn" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdateRoleArn() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateRoleArn()
	})
}

// SetPolicy sets the "policy" field.
func (u *FileIdentityUpsertBulk) SetPolicy(v string) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetPolicy(v)
	})
}

// UpdatePolicy sets the "policy" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdatePolicy() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdatePolicy()
	})
}

// ClearPolicy clears the value of the "policy" field.
func (u *FileIdentityUpsertBulk) ClearPolicy() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.ClearPolicy()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *FileIdentityUpsertBulk) SetDurationSeconds(v int) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *FileIdentityUpsertBulk) AddDurationSeconds(v int) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdateDurationSeconds() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *FileIdentityUpsertBulk) ClearDurationSeconds() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.ClearDurationSeconds()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *FileIdentityUpsertBulk) SetIsDefault(v bool) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdateIsDefault() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateIsDefault()
	})
}

// SetComments sets the "comments" field.
func (u *FileIdentityUpsertBulk) SetComments(v string) *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *FileIdentityUpsertBulk) UpdateComments() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *FileIdentityUpsertBulk) ClearComments() *FileIdentityUpsertBulk {
	return u.Update(func(s *FileIdentityUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *FileIdentityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FileIdentityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileIdentityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileIdentityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
