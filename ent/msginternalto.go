// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/msgcenter/ent/msginternal"
	"github.com/woocoos/msgcenter/ent/msginternalto"
	"github.com/woocoos/msgcenter/ent/user"
)

// MsgInternalTo is the model entity for the MsgInternalTo schema.
type MsgInternalTo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// 站内信ID
	MsgInternalID int `json:"msg_internal_id,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 阅读时间
	ReadAt time.Time `json:"read_at,omitempty"`
	// 删除时间
	DeleteAt time.Time `json:"delete_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MsgInternalToQuery when eager-loading is set.
	Edges        MsgInternalToEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MsgInternalToEdges holds the relations/edges for other nodes in the graph.
type MsgInternalToEdges struct {
	// MsgInternal holds the value of the msg_internal edge.
	MsgInternal *MsgInternal `json:"msg_internal,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// MsgInternalOrErr returns the MsgInternal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MsgInternalToEdges) MsgInternalOrErr() (*MsgInternal, error) {
	if e.loadedTypes[0] {
		if e.MsgInternal == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: msginternal.Label}
		}
		return e.MsgInternal, nil
	}
	return nil, &NotLoadedError{edge: "msg_internal"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MsgInternalToEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MsgInternalTo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msginternalto.FieldID, msginternalto.FieldTenantID, msginternalto.FieldMsgInternalID, msginternalto.FieldUserID:
			values[i] = new(sql.NullInt64)
		case msginternalto.FieldReadAt, msginternalto.FieldDeleteAt, msginternalto.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MsgInternalTo fields.
func (mit *MsgInternalTo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msginternalto.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mit.ID = int(value.Int64)
		case msginternalto.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				mit.TenantID = int(value.Int64)
			}
		case msginternalto.FieldMsgInternalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_internal_id", values[i])
			} else if value.Valid {
				mit.MsgInternalID = int(value.Int64)
			}
		case msginternalto.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				mit.UserID = int(value.Int64)
			}
		case msginternalto.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field read_at", values[i])
			} else if value.Valid {
				mit.ReadAt = value.Time
			}
		case msginternalto.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				mit.DeleteAt = value.Time
			}
		case msginternalto.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mit.CreatedAt = value.Time
			}
		default:
			mit.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MsgInternalTo.
// This includes values selected through modifiers, order, etc.
func (mit *MsgInternalTo) Value(name string) (ent.Value, error) {
	return mit.selectValues.Get(name)
}

// QueryMsgInternal queries the "msg_internal" edge of the MsgInternalTo entity.
func (mit *MsgInternalTo) QueryMsgInternal() *MsgInternalQuery {
	return NewMsgInternalToClient(mit.config).QueryMsgInternal(mit)
}

// QueryUser queries the "user" edge of the MsgInternalTo entity.
func (mit *MsgInternalTo) QueryUser() *UserQuery {
	return NewMsgInternalToClient(mit.config).QueryUser(mit)
}

// Update returns a builder for updating this MsgInternalTo.
// Note that you need to call MsgInternalTo.Unwrap() before calling this method if this MsgInternalTo
// was returned from a transaction, and the transaction was committed or rolled back.
func (mit *MsgInternalTo) Update() *MsgInternalToUpdateOne {
	return NewMsgInternalToClient(mit.config).UpdateOne(mit)
}

// Unwrap unwraps the MsgInternalTo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mit *MsgInternalTo) Unwrap() *MsgInternalTo {
	_tx, ok := mit.config.driver.(*txDriver)
	if !ok {
		panic("ent: MsgInternalTo is not a transactional entity")
	}
	mit.config.driver = _tx.drv
	return mit
}

// String implements the fmt.Stringer.
func (mit *MsgInternalTo) String() string {
	var builder strings.Builder
	builder.WriteString("MsgInternalTo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mit.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", mit.TenantID))
	builder.WriteString(", ")
	builder.WriteString("msg_internal_id=")
	builder.WriteString(fmt.Sprintf("%v", mit.MsgInternalID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", mit.UserID))
	builder.WriteString(", ")
	builder.WriteString("read_at=")
	builder.WriteString(mit.ReadAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(mit.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mit.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MsgInternalTos is a parsable slice of MsgInternalTo.
type MsgInternalTos []*MsgInternalTo
