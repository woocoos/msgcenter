// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/msgcenter/ent/filesource"
)

// FileSource is the model entity for the FileSource schema.
type FileSource struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 文件来源
	Kind filesource.Kind `json:"kind,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// 对外服务的访问域名
	Endpoint string `json:"endpoint,omitempty"`
	// 是否禁止修改endpoint，如果是自定义域名设为true
	EndpointImmutable bool `json:"endpoint_immutable,omitempty"`
	// sts服务的访问域名
	StsEndpoint string `json:"sts_endpoint,omitempty"`
	// 地域，数据存储的物理位置
	Region string `json:"region,omitempty"`
	// 文件存储空间
	Bucket string `json:"bucket,omitempty"`
	// 文件存储空间地址，用于匹配url
	BucketURL string `json:"bucket_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileSourceQuery when eager-loading is set.
	Edges        FileSourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FileSourceEdges holds the relations/edges for other nodes in the graph.
type FileSourceEdges struct {
	// 来源凭证
	Identities []*FileIdentity `json:"identities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool

	namedIdentities map[string][]*FileIdentity
}

// IdentitiesOrErr returns the Identities value or an error if the edge
// was not loaded in eager-loading.
func (e FileSourceEdges) IdentitiesOrErr() ([]*FileIdentity, error) {
	if e.loadedTypes[0] {
		return e.Identities, nil
	}
	return nil, &NotLoadedError{edge: "identities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileSource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filesource.FieldEndpointImmutable:
			values[i] = new(sql.NullBool)
		case filesource.FieldID:
			values[i] = new(sql.NullInt64)
		case filesource.FieldKind, filesource.FieldComments, filesource.FieldEndpoint, filesource.FieldStsEndpoint, filesource.FieldRegion, filesource.FieldBucket, filesource.FieldBucketURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileSource fields.
func (fs *FileSource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filesource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fs.ID = int(value.Int64)
		case filesource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				fs.Kind = filesource.Kind(value.String)
			}
		case filesource.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				fs.Comments = value.String
			}
		case filesource.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				fs.Endpoint = value.String
			}
		case filesource.FieldEndpointImmutable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint_immutable", values[i])
			} else if value.Valid {
				fs.EndpointImmutable = value.Bool
			}
		case filesource.FieldStsEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sts_endpoint", values[i])
			} else if value.Valid {
				fs.StsEndpoint = value.String
			}
		case filesource.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				fs.Region = value.String
			}
		case filesource.FieldBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				fs.Bucket = value.String
			}
		case filesource.FieldBucketURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket_url", values[i])
			} else if value.Valid {
				fs.BucketURL = value.String
			}
		default:
			fs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileSource.
// This includes values selected through modifiers, order, etc.
func (fs *FileSource) Value(name string) (ent.Value, error) {
	return fs.selectValues.Get(name)
}

// QueryIdentities queries the "identities" edge of the FileSource entity.
func (fs *FileSource) QueryIdentities() *FileIdentityQuery {
	return NewFileSourceClient(fs.config).QueryIdentities(fs)
}

// Update returns a builder for updating this FileSource.
// Note that you need to call FileSource.Unwrap() before calling this method if this FileSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FileSource) Update() *FileSourceUpdateOne {
	return NewFileSourceClient(fs.config).UpdateOne(fs)
}

// Unwrap unwraps the FileSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FileSource) Unwrap() *FileSource {
	_tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileSource is not a transactional entity")
	}
	fs.config.driver = _tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FileSource) String() string {
	var builder strings.Builder
	builder.WriteString("FileSource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fs.ID))
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", fs.Kind))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(fs.Comments)
	builder.WriteString(", ")
	builder.WriteString("endpoint=")
	builder.WriteString(fs.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("endpoint_immutable=")
	builder.WriteString(fmt.Sprintf("%v", fs.EndpointImmutable))
	builder.WriteString(", ")
	builder.WriteString("sts_endpoint=")
	builder.WriteString(fs.StsEndpoint)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(fs.Region)
	builder.WriteString(", ")
	builder.WriteString("bucket=")
	builder.WriteString(fs.Bucket)
	builder.WriteString(", ")
	builder.WriteString("bucket_url=")
	builder.WriteString(fs.BucketURL)
	builder.WriteByte(')')
	return builder.String()
}

// NamedIdentities returns the Identities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (fs *FileSource) NamedIdentities(name string) ([]*FileIdentity, error) {
	if fs.Edges.namedIdentities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := fs.Edges.namedIdentities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (fs *FileSource) appendNamedIdentities(name string, edges ...*FileIdentity) {
	if fs.Edges.namedIdentities == nil {
		fs.Edges.namedIdentities = make(map[string][]*FileIdentity)
	}
	if len(edges) == 0 {
		fs.Edges.namedIdentities[name] = []*FileIdentity{}
	} else {
		fs.Edges.namedIdentities[name] = append(fs.Edges.namedIdentities[name], edges...)
	}
}

// FileSources is a parsable slice of FileSource.
type FileSources []*FileSource
