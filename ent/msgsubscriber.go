// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/msgcenter/ent/msgsubscriber"
	"github.com/woocoos/msgcenter/ent/msgtype"
	"github.com/woocoos/msgcenter/ent/user"
)

// MsgSubscriber is the model entity for the MsgSubscriber schema.
type MsgSubscriber struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 应用消息类型ID
	MsgTypeID int `json:"msg_type_id,omitempty"`
	// 组织ID
	TenantID int `json:"tenant_id,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 用户组ID
	OrgRoleID int `json:"org_role_id,omitempty"`
	// 是否排除
	Exclude bool `json:"exclude,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MsgSubscriberQuery when eager-loading is set.
	Edges        MsgSubscriberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MsgSubscriberEdges holds the relations/edges for other nodes in the graph.
type MsgSubscriberEdges struct {
	// MsgType holds the value of the msg_type edge.
	MsgType *MsgType `json:"msg_type,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// MsgTypeOrErr returns the MsgType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MsgSubscriberEdges) MsgTypeOrErr() (*MsgType, error) {
	if e.loadedTypes[0] {
		if e.MsgType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: msgtype.Label}
		}
		return e.MsgType, nil
	}
	return nil, &NotLoadedError{edge: "msg_type"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MsgSubscriberEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MsgSubscriber) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msgsubscriber.FieldExclude:
			values[i] = new(sql.NullBool)
		case msgsubscriber.FieldID, msgsubscriber.FieldCreatedBy, msgsubscriber.FieldUpdatedBy, msgsubscriber.FieldMsgTypeID, msgsubscriber.FieldTenantID, msgsubscriber.FieldUserID, msgsubscriber.FieldOrgRoleID:
			values[i] = new(sql.NullInt64)
		case msgsubscriber.FieldCreatedAt, msgsubscriber.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MsgSubscriber fields.
func (ms *MsgSubscriber) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msgsubscriber.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case msgsubscriber.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ms.CreatedBy = int(value.Int64)
			}
		case msgsubscriber.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ms.CreatedAt = value.Time
			}
		case msgsubscriber.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ms.UpdatedBy = int(value.Int64)
			}
		case msgsubscriber.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ms.UpdatedAt = value.Time
			}
		case msgsubscriber.FieldMsgTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_type_id", values[i])
			} else if value.Valid {
				ms.MsgTypeID = int(value.Int64)
			}
		case msgsubscriber.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ms.TenantID = int(value.Int64)
			}
		case msgsubscriber.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ms.UserID = int(value.Int64)
			}
		case msgsubscriber.FieldOrgRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_role_id", values[i])
			} else if value.Valid {
				ms.OrgRoleID = int(value.Int64)
			}
		case msgsubscriber.FieldExclude:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field exclude", values[i])
			} else if value.Valid {
				ms.Exclude = value.Bool
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MsgSubscriber.
// This includes values selected through modifiers, order, etc.
func (ms *MsgSubscriber) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// QueryMsgType queries the "msg_type" edge of the MsgSubscriber entity.
func (ms *MsgSubscriber) QueryMsgType() *MsgTypeQuery {
	return NewMsgSubscriberClient(ms.config).QueryMsgType(ms)
}

// QueryUser queries the "user" edge of the MsgSubscriber entity.
func (ms *MsgSubscriber) QueryUser() *UserQuery {
	return NewMsgSubscriberClient(ms.config).QueryUser(ms)
}

// Update returns a builder for updating this MsgSubscriber.
// Note that you need to call MsgSubscriber.Unwrap() before calling this method if this MsgSubscriber
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MsgSubscriber) Update() *MsgSubscriberUpdateOne {
	return NewMsgSubscriberClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MsgSubscriber entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MsgSubscriber) Unwrap() *MsgSubscriber {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MsgSubscriber is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MsgSubscriber) String() string {
	var builder strings.Builder
	builder.WriteString("MsgSubscriber(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ms.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ms.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ms.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("msg_type_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.MsgTypeID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.TenantID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.UserID))
	builder.WriteString(", ")
	builder.WriteString("org_role_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.OrgRoleID))
	builder.WriteString(", ")
	builder.WriteString("exclude=")
	builder.WriteString(fmt.Sprintf("%v", ms.Exclude))
	builder.WriteByte(')')
	return builder.String()
}

// MsgSubscribers is a parsable slice of MsgSubscriber.
type MsgSubscribers []*MsgSubscriber
