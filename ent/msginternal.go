// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/msgcenter/ent/msginternal"
)

// MsgInternal is the model entity for the MsgInternal schema.
type MsgInternal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 标题
	Subject string `json:"subject,omitempty"`
	// 消息体
	Body string `json:"body,omitempty"`
	// 内容类型: html,txt
	Format string `json:"format,omitempty"`
	// 消息跳转
	Redirect string `json:"redirect,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MsgInternalQuery when eager-loading is set.
	Edges        MsgInternalEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MsgInternalEdges holds the relations/edges for other nodes in the graph.
type MsgInternalEdges struct {
	// MsgInternalTo holds the value of the msg_internal_to edge.
	MsgInternalTo []*MsgInternalTo `json:"msg_internal_to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedMsgInternalTo map[string][]*MsgInternalTo
}

// MsgInternalToOrErr returns the MsgInternalTo value or an error if the edge
// was not loaded in eager-loading.
func (e MsgInternalEdges) MsgInternalToOrErr() ([]*MsgInternalTo, error) {
	if e.loadedTypes[0] {
		return e.MsgInternalTo, nil
	}
	return nil, &NotLoadedError{edge: "msg_internal_to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MsgInternal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msginternal.FieldID, msginternal.FieldTenantID, msginternal.FieldCreatedBy, msginternal.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case msginternal.FieldSubject, msginternal.FieldBody, msginternal.FieldFormat, msginternal.FieldRedirect:
			values[i] = new(sql.NullString)
		case msginternal.FieldCreatedAt, msginternal.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MsgInternal fields.
func (mi *MsgInternal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msginternal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mi.ID = int(value.Int64)
		case msginternal.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				mi.TenantID = int(value.Int64)
			}
		case msginternal.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mi.CreatedBy = int(value.Int64)
			}
		case msginternal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mi.CreatedAt = value.Time
			}
		case msginternal.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mi.UpdatedBy = int(value.Int64)
			}
		case msginternal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mi.UpdatedAt = value.Time
			}
		case msginternal.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				mi.Subject = value.String
			}
		case msginternal.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				mi.Body = value.String
			}
		case msginternal.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				mi.Format = value.String
			}
		case msginternal.FieldRedirect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect", values[i])
			} else if value.Valid {
				mi.Redirect = value.String
			}
		default:
			mi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MsgInternal.
// This includes values selected through modifiers, order, etc.
func (mi *MsgInternal) Value(name string) (ent.Value, error) {
	return mi.selectValues.Get(name)
}

// QueryMsgInternalTo queries the "msg_internal_to" edge of the MsgInternal entity.
func (mi *MsgInternal) QueryMsgInternalTo() *MsgInternalToQuery {
	return NewMsgInternalClient(mi.config).QueryMsgInternalTo(mi)
}

// Update returns a builder for updating this MsgInternal.
// Note that you need to call MsgInternal.Unwrap() before calling this method if this MsgInternal
// was returned from a transaction, and the transaction was committed or rolled back.
func (mi *MsgInternal) Update() *MsgInternalUpdateOne {
	return NewMsgInternalClient(mi.config).UpdateOne(mi)
}

// Unwrap unwraps the MsgInternal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mi *MsgInternal) Unwrap() *MsgInternal {
	_tx, ok := mi.config.driver.(*txDriver)
	if !ok {
		panic("ent: MsgInternal is not a transactional entity")
	}
	mi.config.driver = _tx.drv
	return mi
}

// String implements the fmt.Stringer.
func (mi *MsgInternal) String() string {
	var builder strings.Builder
	builder.WriteString("MsgInternal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mi.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", mi.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mi.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mi.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(mi.Subject)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(mi.Body)
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(mi.Format)
	builder.WriteString(", ")
	builder.WriteString("redirect=")
	builder.WriteString(mi.Redirect)
	builder.WriteByte(')')
	return builder.String()
}

// NamedMsgInternalTo returns the MsgInternalTo named value or an error if the edge was not
// loaded in eager-loading with this name.
func (mi *MsgInternal) NamedMsgInternalTo(name string) ([]*MsgInternalTo, error) {
	if mi.Edges.namedMsgInternalTo == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := mi.Edges.namedMsgInternalTo[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (mi *MsgInternal) appendNamedMsgInternalTo(name string, edges ...*MsgInternalTo) {
	if mi.Edges.namedMsgInternalTo == nil {
		mi.Edges.namedMsgInternalTo = make(map[string][]*MsgInternalTo)
	}
	if len(edges) == 0 {
		mi.Edges.namedMsgInternalTo[name] = []*MsgInternalTo{}
	} else {
		mi.Edges.namedMsgInternalTo[name] = append(mi.Edges.namedMsgInternalTo[name], edges...)
	}
}

// MsgInternals is a parsable slice of MsgInternal.
type MsgInternals []*MsgInternal
