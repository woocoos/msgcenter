// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msgalert"
	"github.com/woocoos/msgcenter/ent/nlog"
	"github.com/woocoos/msgcenter/ent/nlogalert"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// NlogAlertUpdate is the builder for updating NlogAlert entities.
type NlogAlertUpdate struct {
	config
	hooks    []Hook
	mutation *NlogAlertMutation
}

// Where appends a list predicates to the NlogAlertUpdate builder.
func (nau *NlogAlertUpdate) Where(ps ...predicate.NlogAlert) *NlogAlertUpdate {
	nau.mutation.Where(ps...)
	return nau
}

// SetNlogID sets the "nlog_id" field.
func (nau *NlogAlertUpdate) SetNlogID(i int) *NlogAlertUpdate {
	nau.mutation.SetNlogID(i)
	return nau
}

// SetNillableNlogID sets the "nlog_id" field if the given value is not nil.
func (nau *NlogAlertUpdate) SetNillableNlogID(i *int) *NlogAlertUpdate {
	if i != nil {
		nau.SetNlogID(*i)
	}
	return nau
}

// SetAlertID sets the "alert_id" field.
func (nau *NlogAlertUpdate) SetAlertID(i int) *NlogAlertUpdate {
	nau.mutation.SetAlertID(i)
	return nau
}

// SetNillableAlertID sets the "alert_id" field if the given value is not nil.
func (nau *NlogAlertUpdate) SetNillableAlertID(i *int) *NlogAlertUpdate {
	if i != nil {
		nau.SetAlertID(*i)
	}
	return nau
}

// SetNlog sets the "nlog" edge to the Nlog entity.
func (nau *NlogAlertUpdate) SetNlog(n *Nlog) *NlogAlertUpdate {
	return nau.SetNlogID(n.ID)
}

// SetAlert sets the "alert" edge to the MsgAlert entity.
func (nau *NlogAlertUpdate) SetAlert(m *MsgAlert) *NlogAlertUpdate {
	return nau.SetAlertID(m.ID)
}

// Mutation returns the NlogAlertMutation object of the builder.
func (nau *NlogAlertUpdate) Mutation() *NlogAlertMutation {
	return nau.mutation
}

// ClearNlog clears the "nlog" edge to the Nlog entity.
func (nau *NlogAlertUpdate) ClearNlog() *NlogAlertUpdate {
	nau.mutation.ClearNlog()
	return nau
}

// ClearAlert clears the "alert" edge to the MsgAlert entity.
func (nau *NlogAlertUpdate) ClearAlert() *NlogAlertUpdate {
	nau.mutation.ClearAlert()
	return nau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nau *NlogAlertUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nau.sqlSave, nau.mutation, nau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nau *NlogAlertUpdate) SaveX(ctx context.Context) int {
	affected, err := nau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nau *NlogAlertUpdate) Exec(ctx context.Context) error {
	_, err := nau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nau *NlogAlertUpdate) ExecX(ctx context.Context) {
	if err := nau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nau *NlogAlertUpdate) check() error {
	if nau.mutation.NlogCleared() && len(nau.mutation.NlogIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NlogAlert.nlog"`)
	}
	if nau.mutation.AlertCleared() && len(nau.mutation.AlertIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NlogAlert.alert"`)
	}
	return nil
}

func (nau *NlogAlertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(nlogalert.Table, nlogalert.Columns, sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt))
	if ps := nau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nau.mutation.NlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   nlogalert.NlogTable,
			Columns: []string{nlogalert.NlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nau.schemaConfig.NlogAlert
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nau.mutation.NlogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   nlogalert.NlogTable,
			Columns: []string{nlogalert.NlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nau.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nau.mutation.AlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   nlogalert.AlertTable,
			Columns: []string{nlogalert.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nau.schemaConfig.NlogAlert
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nau.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   nlogalert.AlertTable,
			Columns: []string{nlogalert.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nau.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = nau.schemaConfig.NlogAlert
	ctx = internal.NewSchemaConfigContext(ctx, nau.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, nau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nlogalert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nau.mutation.done = true
	return n, nil
}

// NlogAlertUpdateOne is the builder for updating a single NlogAlert entity.
type NlogAlertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NlogAlertMutation
}

// SetNlogID sets the "nlog_id" field.
func (nauo *NlogAlertUpdateOne) SetNlogID(i int) *NlogAlertUpdateOne {
	nauo.mutation.SetNlogID(i)
	return nauo
}

// SetNillableNlogID sets the "nlog_id" field if the given value is not nil.
func (nauo *NlogAlertUpdateOne) SetNillableNlogID(i *int) *NlogAlertUpdateOne {
	if i != nil {
		nauo.SetNlogID(*i)
	}
	return nauo
}

// SetAlertID sets the "alert_id" field.
func (nauo *NlogAlertUpdateOne) SetAlertID(i int) *NlogAlertUpdateOne {
	nauo.mutation.SetAlertID(i)
	return nauo
}

// SetNillableAlertID sets the "alert_id" field if the given value is not nil.
func (nauo *NlogAlertUpdateOne) SetNillableAlertID(i *int) *NlogAlertUpdateOne {
	if i != nil {
		nauo.SetAlertID(*i)
	}
	return nauo
}

// SetNlog sets the "nlog" edge to the Nlog entity.
func (nauo *NlogAlertUpdateOne) SetNlog(n *Nlog) *NlogAlertUpdateOne {
	return nauo.SetNlogID(n.ID)
}

// SetAlert sets the "alert" edge to the MsgAlert entity.
func (nauo *NlogAlertUpdateOne) SetAlert(m *MsgAlert) *NlogAlertUpdateOne {
	return nauo.SetAlertID(m.ID)
}

// Mutation returns the NlogAlertMutation object of the builder.
func (nauo *NlogAlertUpdateOne) Mutation() *NlogAlertMutation {
	return nauo.mutation
}

// ClearNlog clears the "nlog" edge to the Nlog entity.
func (nauo *NlogAlertUpdateOne) ClearNlog() *NlogAlertUpdateOne {
	nauo.mutation.ClearNlog()
	return nauo
}

// ClearAlert clears the "alert" edge to the MsgAlert entity.
func (nauo *NlogAlertUpdateOne) ClearAlert() *NlogAlertUpdateOne {
	nauo.mutation.ClearAlert()
	return nauo
}

// Where appends a list predicates to the NlogAlertUpdate builder.
func (nauo *NlogAlertUpdateOne) Where(ps ...predicate.NlogAlert) *NlogAlertUpdateOne {
	nauo.mutation.Where(ps...)
	return nauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nauo *NlogAlertUpdateOne) Select(field string, fields ...string) *NlogAlertUpdateOne {
	nauo.fields = append([]string{field}, fields...)
	return nauo
}

// Save executes the query and returns the updated NlogAlert entity.
func (nauo *NlogAlertUpdateOne) Save(ctx context.Context) (*NlogAlert, error) {
	return withHooks(ctx, nauo.sqlSave, nauo.mutation, nauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nauo *NlogAlertUpdateOne) SaveX(ctx context.Context) *NlogAlert {
	node, err := nauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nauo *NlogAlertUpdateOne) Exec(ctx context.Context) error {
	_, err := nauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nauo *NlogAlertUpdateOne) ExecX(ctx context.Context) {
	if err := nauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nauo *NlogAlertUpdateOne) check() error {
	if nauo.mutation.NlogCleared() && len(nauo.mutation.NlogIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NlogAlert.nlog"`)
	}
	if nauo.mutation.AlertCleared() && len(nauo.mutation.AlertIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NlogAlert.alert"`)
	}
	return nil
}

func (nauo *NlogAlertUpdateOne) sqlSave(ctx context.Context) (_node *NlogAlert, err error) {
	if err := nauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(nlogalert.Table, nlogalert.Columns, sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt))
	id, ok := nauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NlogAlert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nlogalert.FieldID)
		for _, f := range fields {
			if !nlogalert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nlogalert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nauo.mutation.NlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   nlogalert.NlogTable,
			Columns: []string{nlogalert.NlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nauo.schemaConfig.NlogAlert
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nauo.mutation.NlogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   nlogalert.NlogTable,
			Columns: []string{nlogalert.NlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nauo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nauo.mutation.AlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   nlogalert.AlertTable,
			Columns: []string{nlogalert.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nauo.schemaConfig.NlogAlert
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nauo.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   nlogalert.AlertTable,
			Columns: []string{nlogalert.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nauo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = nauo.schemaConfig.NlogAlert
	ctx = internal.NewSchemaConfigContext(ctx, nauo.schemaConfig)
	_node = &NlogAlert{config: nauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nlogalert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nauo.mutation.done = true
	return _node, nil
}
