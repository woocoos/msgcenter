// Code generated by ent, DO NOT EDIT.

package filesource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FileSource {
	return predicate.FileSource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FileSource {
	return predicate.FileSource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FileSource {
	return predicate.FileSource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FileSource {
	return predicate.FileSource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FileSource {
	return predicate.FileSource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FileSource {
	return predicate.FileSource(sql.FieldLTE(FieldID, id))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldComments, v))
}

// Endpoint applies equality check predicate on the "endpoint" field. It's identical to EndpointEQ.
func Endpoint(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldEndpoint, v))
}

// EndpointImmutable applies equality check predicate on the "endpoint_immutable" field. It's identical to EndpointImmutableEQ.
func EndpointImmutable(v bool) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldEndpointImmutable, v))
}

// StsEndpoint applies equality check predicate on the "sts_endpoint" field. It's identical to StsEndpointEQ.
func StsEndpoint(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldStsEndpoint, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldRegion, v))
}

// Bucket applies equality check predicate on the "bucket" field. It's identical to BucketEQ.
func Bucket(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldBucket, v))
}

// BucketURL applies equality check predicate on the "bucket_url" field. It's identical to BucketURLEQ.
func BucketURL(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldBucketURL, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v Kind) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v Kind) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...Kind) predicate.FileSource {
	return predicate.FileSource(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...Kind) predicate.FileSource {
	return predicate.FileSource(sql.FieldNotIn(FieldKind, vs...))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.FileSource {
	return predicate.FileSource(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.FileSource {
	return predicate.FileSource(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContainsFold(FieldComments, v))
}

// EndpointEQ applies the EQ predicate on the "endpoint" field.
func EndpointEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldEndpoint, v))
}

// EndpointNEQ applies the NEQ predicate on the "endpoint" field.
func EndpointNEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldEndpoint, v))
}

// EndpointIn applies the In predicate on the "endpoint" field.
func EndpointIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldIn(FieldEndpoint, vs...))
}

// EndpointNotIn applies the NotIn predicate on the "endpoint" field.
func EndpointNotIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNotIn(FieldEndpoint, vs...))
}

// EndpointGT applies the GT predicate on the "endpoint" field.
func EndpointGT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGT(FieldEndpoint, v))
}

// EndpointGTE applies the GTE predicate on the "endpoint" field.
func EndpointGTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGTE(FieldEndpoint, v))
}

// EndpointLT applies the LT predicate on the "endpoint" field.
func EndpointLT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLT(FieldEndpoint, v))
}

// EndpointLTE applies the LTE predicate on the "endpoint" field.
func EndpointLTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLTE(FieldEndpoint, v))
}

// EndpointContains applies the Contains predicate on the "endpoint" field.
func EndpointContains(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContains(FieldEndpoint, v))
}

// EndpointHasPrefix applies the HasPrefix predicate on the "endpoint" field.
func EndpointHasPrefix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasPrefix(FieldEndpoint, v))
}

// EndpointHasSuffix applies the HasSuffix predicate on the "endpoint" field.
func EndpointHasSuffix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasSuffix(FieldEndpoint, v))
}

// EndpointEqualFold applies the EqualFold predicate on the "endpoint" field.
func EndpointEqualFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEqualFold(FieldEndpoint, v))
}

// EndpointContainsFold applies the ContainsFold predicate on the "endpoint" field.
func EndpointContainsFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContainsFold(FieldEndpoint, v))
}

// EndpointImmutableEQ applies the EQ predicate on the "endpoint_immutable" field.
func EndpointImmutableEQ(v bool) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldEndpointImmutable, v))
}

// EndpointImmutableNEQ applies the NEQ predicate on the "endpoint_immutable" field.
func EndpointImmutableNEQ(v bool) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldEndpointImmutable, v))
}

// StsEndpointEQ applies the EQ predicate on the "sts_endpoint" field.
func StsEndpointEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldStsEndpoint, v))
}

// StsEndpointNEQ applies the NEQ predicate on the "sts_endpoint" field.
func StsEndpointNEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldStsEndpoint, v))
}

// StsEndpointIn applies the In predicate on the "sts_endpoint" field.
func StsEndpointIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldIn(FieldStsEndpoint, vs...))
}

// StsEndpointNotIn applies the NotIn predicate on the "sts_endpoint" field.
func StsEndpointNotIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNotIn(FieldStsEndpoint, vs...))
}

// StsEndpointGT applies the GT predicate on the "sts_endpoint" field.
func StsEndpointGT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGT(FieldStsEndpoint, v))
}

// StsEndpointGTE applies the GTE predicate on the "sts_endpoint" field.
func StsEndpointGTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGTE(FieldStsEndpoint, v))
}

// StsEndpointLT applies the LT predicate on the "sts_endpoint" field.
func StsEndpointLT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLT(FieldStsEndpoint, v))
}

// StsEndpointLTE applies the LTE predicate on the "sts_endpoint" field.
func StsEndpointLTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLTE(FieldStsEndpoint, v))
}

// StsEndpointContains applies the Contains predicate on the "sts_endpoint" field.
func StsEndpointContains(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContains(FieldStsEndpoint, v))
}

// StsEndpointHasPrefix applies the HasPrefix predicate on the "sts_endpoint" field.
func StsEndpointHasPrefix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasPrefix(FieldStsEndpoint, v))
}

// StsEndpointHasSuffix applies the HasSuffix predicate on the "sts_endpoint" field.
func StsEndpointHasSuffix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasSuffix(FieldStsEndpoint, v))
}

// StsEndpointEqualFold applies the EqualFold predicate on the "sts_endpoint" field.
func StsEndpointEqualFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEqualFold(FieldStsEndpoint, v))
}

// StsEndpointContainsFold applies the ContainsFold predicate on the "sts_endpoint" field.
func StsEndpointContainsFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContainsFold(FieldStsEndpoint, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContainsFold(FieldRegion, v))
}

// BucketEQ applies the EQ predicate on the "bucket" field.
func BucketEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldBucket, v))
}

// BucketNEQ applies the NEQ predicate on the "bucket" field.
func BucketNEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldBucket, v))
}

// BucketIn applies the In predicate on the "bucket" field.
func BucketIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldIn(FieldBucket, vs...))
}

// BucketNotIn applies the NotIn predicate on the "bucket" field.
func BucketNotIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNotIn(FieldBucket, vs...))
}

// BucketGT applies the GT predicate on the "bucket" field.
func BucketGT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGT(FieldBucket, v))
}

// BucketGTE applies the GTE predicate on the "bucket" field.
func BucketGTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGTE(FieldBucket, v))
}

// BucketLT applies the LT predicate on the "bucket" field.
func BucketLT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLT(FieldBucket, v))
}

// BucketLTE applies the LTE predicate on the "bucket" field.
func BucketLTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLTE(FieldBucket, v))
}

// BucketContains applies the Contains predicate on the "bucket" field.
func BucketContains(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContains(FieldBucket, v))
}

// BucketHasPrefix applies the HasPrefix predicate on the "bucket" field.
func BucketHasPrefix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasPrefix(FieldBucket, v))
}

// BucketHasSuffix applies the HasSuffix predicate on the "bucket" field.
func BucketHasSuffix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasSuffix(FieldBucket, v))
}

// BucketEqualFold applies the EqualFold predicate on the "bucket" field.
func BucketEqualFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEqualFold(FieldBucket, v))
}

// BucketContainsFold applies the ContainsFold predicate on the "bucket" field.
func BucketContainsFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContainsFold(FieldBucket, v))
}

// BucketURLEQ applies the EQ predicate on the "bucket_url" field.
func BucketURLEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEQ(FieldBucketURL, v))
}

// BucketURLNEQ applies the NEQ predicate on the "bucket_url" field.
func BucketURLNEQ(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNEQ(FieldBucketURL, v))
}

// BucketURLIn applies the In predicate on the "bucket_url" field.
func BucketURLIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldIn(FieldBucketURL, vs...))
}

// BucketURLNotIn applies the NotIn predicate on the "bucket_url" field.
func BucketURLNotIn(vs ...string) predicate.FileSource {
	return predicate.FileSource(sql.FieldNotIn(FieldBucketURL, vs...))
}

// BucketURLGT applies the GT predicate on the "bucket_url" field.
func BucketURLGT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGT(FieldBucketURL, v))
}

// BucketURLGTE applies the GTE predicate on the "bucket_url" field.
func BucketURLGTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldGTE(FieldBucketURL, v))
}

// BucketURLLT applies the LT predicate on the "bucket_url" field.
func BucketURLLT(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLT(FieldBucketURL, v))
}

// BucketURLLTE applies the LTE predicate on the "bucket_url" field.
func BucketURLLTE(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldLTE(FieldBucketURL, v))
}

// BucketURLContains applies the Contains predicate on the "bucket_url" field.
func BucketURLContains(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContains(FieldBucketURL, v))
}

// BucketURLHasPrefix applies the HasPrefix predicate on the "bucket_url" field.
func BucketURLHasPrefix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasPrefix(FieldBucketURL, v))
}

// BucketURLHasSuffix applies the HasSuffix predicate on the "bucket_url" field.
func BucketURLHasSuffix(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldHasSuffix(FieldBucketURL, v))
}

// BucketURLEqualFold applies the EqualFold predicate on the "bucket_url" field.
func BucketURLEqualFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldEqualFold(FieldBucketURL, v))
}

// BucketURLContainsFold applies the ContainsFold predicate on the "bucket_url" field.
func BucketURLContainsFold(v string) predicate.FileSource {
	return predicate.FileSource(sql.FieldContainsFold(FieldBucketURL, v))
}

// HasIdentities applies the HasEdge predicate on the "identities" edge.
func HasIdentities() predicate.FileSource {
	return predicate.FileSource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IdentitiesTable, IdentitiesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.FileIdentity
		step.Edge.Schema = schemaConfig.FileIdentity
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdentitiesWith applies the HasEdge predicate on the "identities" edge with a given conditions (other predicates).
func HasIdentitiesWith(preds ...predicate.FileIdentity) predicate.FileSource {
	return predicate.FileSource(func(s *sql.Selector) {
		step := newIdentitiesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.FileIdentity
		step.Edge.Schema = schemaConfig.FileIdentity
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileSource) predicate.FileSource {
	return predicate.FileSource(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileSource) predicate.FileSource {
	return predicate.FileSource(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileSource) predicate.FileSource {
	return predicate.FileSource(sql.NotPredicates(p))
}
