// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/msgcenter/ent/msgchannel"
	"github.com/woocoos/msgcenter/pkg/profile"
)

// MsgChannelCreate is the builder for creating a MsgChannel entity.
type MsgChannelCreate struct {
	config
	mutation *MsgChannelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (mcc *MsgChannelCreate) SetCreatedBy(i int) *MsgChannelCreate {
	mcc.mutation.SetCreatedBy(i)
	return mcc
}

// SetCreatedAt sets the "created_at" field.
func (mcc *MsgChannelCreate) SetCreatedAt(t time.Time) *MsgChannelCreate {
	mcc.mutation.SetCreatedAt(t)
	return mcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mcc *MsgChannelCreate) SetNillableCreatedAt(t *time.Time) *MsgChannelCreate {
	if t != nil {
		mcc.SetCreatedAt(*t)
	}
	return mcc
}

// SetUpdatedBy sets the "updated_by" field.
func (mcc *MsgChannelCreate) SetUpdatedBy(i int) *MsgChannelCreate {
	mcc.mutation.SetUpdatedBy(i)
	return mcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcc *MsgChannelCreate) SetNillableUpdatedBy(i *int) *MsgChannelCreate {
	if i != nil {
		mcc.SetUpdatedBy(*i)
	}
	return mcc
}

// SetUpdatedAt sets the "updated_at" field.
func (mcc *MsgChannelCreate) SetUpdatedAt(t time.Time) *MsgChannelCreate {
	mcc.mutation.SetUpdatedAt(t)
	return mcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mcc *MsgChannelCreate) SetNillableUpdatedAt(t *time.Time) *MsgChannelCreate {
	if t != nil {
		mcc.SetUpdatedAt(*t)
	}
	return mcc
}

// SetName sets the "name" field.
func (mcc *MsgChannelCreate) SetName(s string) *MsgChannelCreate {
	mcc.mutation.SetName(s)
	return mcc
}

// SetTenantID sets the "tenant_id" field.
func (mcc *MsgChannelCreate) SetTenantID(i int) *MsgChannelCreate {
	mcc.mutation.SetTenantID(i)
	return mcc
}

// SetReceiverType sets the "receiver_type" field.
func (mcc *MsgChannelCreate) SetReceiverType(pt profile.ReceiverType) *MsgChannelCreate {
	mcc.mutation.SetReceiverType(pt)
	return mcc
}

// SetStatus sets the "status" field.
func (mcc *MsgChannelCreate) SetStatus(ts typex.SimpleStatus) *MsgChannelCreate {
	mcc.mutation.SetStatus(ts)
	return mcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcc *MsgChannelCreate) SetNillableStatus(ts *typex.SimpleStatus) *MsgChannelCreate {
	if ts != nil {
		mcc.SetStatus(*ts)
	}
	return mcc
}

// SetReceiver sets the "receiver" field.
func (mcc *MsgChannelCreate) SetReceiver(pr *profile.Receiver) *MsgChannelCreate {
	mcc.mutation.SetReceiver(pr)
	return mcc
}

// SetComments sets the "comments" field.
func (mcc *MsgChannelCreate) SetComments(s string) *MsgChannelCreate {
	mcc.mutation.SetComments(s)
	return mcc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (mcc *MsgChannelCreate) SetNillableComments(s *string) *MsgChannelCreate {
	if s != nil {
		mcc.SetComments(*s)
	}
	return mcc
}

// SetID sets the "id" field.
func (mcc *MsgChannelCreate) SetID(i int) *MsgChannelCreate {
	mcc.mutation.SetID(i)
	return mcc
}

// Mutation returns the MsgChannelMutation object of the builder.
func (mcc *MsgChannelCreate) Mutation() *MsgChannelMutation {
	return mcc.mutation
}

// Save creates the MsgChannel in the database.
func (mcc *MsgChannelCreate) Save(ctx context.Context) (*MsgChannel, error) {
	if err := mcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mcc.sqlSave, mcc.mutation, mcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MsgChannelCreate) SaveX(ctx context.Context) *MsgChannel {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcc *MsgChannelCreate) Exec(ctx context.Context) error {
	_, err := mcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcc *MsgChannelCreate) ExecX(ctx context.Context) {
	if err := mcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcc *MsgChannelCreate) defaults() error {
	if _, ok := mcc.mutation.CreatedAt(); !ok {
		if msgchannel.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized msgchannel.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := msgchannel.DefaultCreatedAt()
		mcc.mutation.SetCreatedAt(v)
	}
	if _, ok := mcc.mutation.Status(); !ok {
		v := msgchannel.DefaultStatus
		mcc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mcc *MsgChannelCreate) check() error {
	if _, ok := mcc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "MsgChannel.created_by"`)}
	}
	if _, ok := mcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MsgChannel.created_at"`)}
	}
	if _, ok := mcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MsgChannel.name"`)}
	}
	if v, ok := mcc.mutation.Name(); ok {
		if err := msgchannel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.name": %w`, err)}
		}
	}
	if _, ok := mcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "MsgChannel.tenant_id"`)}
	}
	if _, ok := mcc.mutation.ReceiverType(); !ok {
		return &ValidationError{Name: "receiver_type", err: errors.New(`ent: missing required field "MsgChannel.receiver_type"`)}
	}
	if v, ok := mcc.mutation.ReceiverType(); ok {
		if err := msgchannel.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.receiver_type": %w`, err)}
		}
	}
	if v, ok := mcc.mutation.Status(); ok {
		if err := msgchannel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.status": %w`, err)}
		}
	}
	return nil
}

func (mcc *MsgChannelCreate) sqlSave(ctx context.Context) (*MsgChannel, error) {
	if err := mcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mcc.mutation.id = &_node.ID
	mcc.mutation.done = true
	return _node, nil
}

func (mcc *MsgChannelCreate) createSpec() (*MsgChannel, *sqlgraph.CreateSpec) {
	var (
		_node = &MsgChannel{config: mcc.config}
		_spec = sqlgraph.NewCreateSpec(msgchannel.Table, sqlgraph.NewFieldSpec(msgchannel.FieldID, field.TypeInt))
	)
	_spec.Schema = mcc.schemaConfig.MsgChannel
	_spec.OnConflict = mcc.conflict
	if id, ok := mcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mcc.mutation.CreatedBy(); ok {
		_spec.SetField(msgchannel.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := mcc.mutation.CreatedAt(); ok {
		_spec.SetField(msgchannel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mcc.mutation.UpdatedBy(); ok {
		_spec.SetField(msgchannel.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := mcc.mutation.UpdatedAt(); ok {
		_spec.SetField(msgchannel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mcc.mutation.Name(); ok {
		_spec.SetField(msgchannel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mcc.mutation.TenantID(); ok {
		_spec.SetField(msgchannel.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := mcc.mutation.ReceiverType(); ok {
		_spec.SetField(msgchannel.FieldReceiverType, field.TypeEnum, value)
		_node.ReceiverType = value
	}
	if value, ok := mcc.mutation.Status(); ok {
		_spec.SetField(msgchannel.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mcc.mutation.Receiver(); ok {
		_spec.SetField(msgchannel.FieldReceiver, field.TypeJSON, value)
		_node.Receiver = value
	}
	if value, ok := mcc.mutation.Comments(); ok {
		_spec.SetField(msgchannel.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgChannel.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgChannelUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mcc *MsgChannelCreate) OnConflict(opts ...sql.ConflictOption) *MsgChannelUpsertOne {
	mcc.conflict = opts
	return &MsgChannelUpsertOne{
		create: mcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgChannel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcc *MsgChannelCreate) OnConflictColumns(columns ...string) *MsgChannelUpsertOne {
	mcc.conflict = append(mcc.conflict, sql.ConflictColumns(columns...))
	return &MsgChannelUpsertOne{
		create: mcc,
	}
}

type (
	// MsgChannelUpsertOne is the builder for "upsert"-ing
	//  one MsgChannel node.
	MsgChannelUpsertOne struct {
		create *MsgChannelCreate
	}

	// MsgChannelUpsert is the "OnConflict" setter.
	MsgChannelUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgChannelUpsert) SetUpdatedBy(v int) *MsgChannelUpsert {
	u.Set(msgchannel.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgChannelUpsert) UpdateUpdatedBy() *MsgChannelUpsert {
	u.SetExcluded(msgchannel.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgChannelUpsert) AddUpdatedBy(v int) *MsgChannelUpsert {
	u.Add(msgchannel.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgChannelUpsert) ClearUpdatedBy() *MsgChannelUpsert {
	u.SetNull(msgchannel.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgChannelUpsert) SetUpdatedAt(v time.Time) *MsgChannelUpsert {
	u.Set(msgchannel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgChannelUpsert) UpdateUpdatedAt() *MsgChannelUpsert {
	u.SetExcluded(msgchannel.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgChannelUpsert) ClearUpdatedAt() *MsgChannelUpsert {
	u.SetNull(msgchannel.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *MsgChannelUpsert) SetName(v string) *MsgChannelUpsert {
	u.Set(msgchannel.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MsgChannelUpsert) UpdateName() *MsgChannelUpsert {
	u.SetExcluded(msgchannel.FieldName)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgChannelUpsert) SetTenantID(v int) *MsgChannelUpsert {
	u.Set(msgchannel.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgChannelUpsert) UpdateTenantID() *MsgChannelUpsert {
	u.SetExcluded(msgchannel.FieldTenantID)
	return u
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgChannelUpsert) AddTenantID(v int) *MsgChannelUpsert {
	u.Add(msgchannel.FieldTenantID, v)
	return u
}

// SetReceiverType sets the "receiver_type" field.
func (u *MsgChannelUpsert) SetReceiverType(v profile.ReceiverType) *MsgChannelUpsert {
	u.Set(msgchannel.FieldReceiverType, v)
	return u
}

// UpdateReceiverType sets the "receiver_type" field to the value that was provided on create.
func (u *MsgChannelUpsert) UpdateReceiverType() *MsgChannelUpsert {
	u.SetExcluded(msgchannel.FieldReceiverType)
	return u
}

// SetStatus sets the "status" field.
func (u *MsgChannelUpsert) SetStatus(v typex.SimpleStatus) *MsgChannelUpsert {
	u.Set(msgchannel.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MsgChannelUpsert) UpdateStatus() *MsgChannelUpsert {
	u.SetExcluded(msgchannel.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *MsgChannelUpsert) ClearStatus() *MsgChannelUpsert {
	u.SetNull(msgchannel.FieldStatus)
	return u
}

// SetReceiver sets the "receiver" field.
func (u *MsgChannelUpsert) SetReceiver(v *profile.Receiver) *MsgChannelUpsert {
	u.Set(msgchannel.FieldReceiver, v)
	return u
}

// UpdateReceiver sets the "receiver" field to the value that was provided on create.
func (u *MsgChannelUpsert) UpdateReceiver() *MsgChannelUpsert {
	u.SetExcluded(msgchannel.FieldReceiver)
	return u
}

// ClearReceiver clears the value of the "receiver" field.
func (u *MsgChannelUpsert) ClearReceiver() *MsgChannelUpsert {
	u.SetNull(msgchannel.FieldReceiver)
	return u
}

// SetComments sets the "comments" field.
func (u *MsgChannelUpsert) SetComments(v string) *MsgChannelUpsert {
	u.Set(msgchannel.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *MsgChannelUpsert) UpdateComments() *MsgChannelUpsert {
	u.SetExcluded(msgchannel.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *MsgChannelUpsert) ClearComments() *MsgChannelUpsert {
	u.SetNull(msgchannel.FieldComments)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MsgChannel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msgchannel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgChannelUpsertOne) UpdateNewValues() *MsgChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(msgchannel.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(msgchannel.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(msgchannel.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgChannel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MsgChannelUpsertOne) Ignore() *MsgChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgChannelUpsertOne) DoNothing() *MsgChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgChannelCreate.OnConflict
// documentation for more info.
func (u *MsgChannelUpsertOne) Update(set func(*MsgChannelUpsert)) *MsgChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgChannelUpsertOne) SetUpdatedBy(v int) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgChannelUpsertOne) AddUpdatedBy(v int) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgChannelUpsertOne) UpdateUpdatedBy() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgChannelUpsertOne) ClearUpdatedBy() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgChannelUpsertOne) SetUpdatedAt(v time.Time) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgChannelUpsertOne) UpdateUpdatedAt() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgChannelUpsertOne) ClearUpdatedAt() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *MsgChannelUpsertOne) SetName(v string) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MsgChannelUpsertOne) UpdateName() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateName()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgChannelUpsertOne) SetTenantID(v int) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgChannelUpsertOne) AddTenantID(v int) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgChannelUpsertOne) UpdateTenantID() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateTenantID()
	})
}

// SetReceiverType sets the "receiver_type" field.
func (u *MsgChannelUpsertOne) SetReceiverType(v profile.ReceiverType) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetReceiverType(v)
	})
}

// UpdateReceiverType sets the "receiver_type" field to the value that was provided on create.
func (u *MsgChannelUpsertOne) UpdateReceiverType() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateReceiverType()
	})
}

// SetStatus sets the "status" field.
func (u *MsgChannelUpsertOne) SetStatus(v typex.SimpleStatus) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MsgChannelUpsertOne) UpdateStatus() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MsgChannelUpsertOne) ClearStatus() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearStatus()
	})
}

// SetReceiver sets the "receiver" field.
func (u *MsgChannelUpsertOne) SetReceiver(v *profile.Receiver) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetReceiver(v)
	})
}

// UpdateReceiver sets the "receiver" field to the value that was provided on create.
func (u *MsgChannelUpsertOne) UpdateReceiver() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateReceiver()
	})
}

// ClearReceiver clears the value of the "receiver" field.
func (u *MsgChannelUpsertOne) ClearReceiver() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearReceiver()
	})
}

// SetComments sets the "comments" field.
func (u *MsgChannelUpsertOne) SetComments(v string) *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *MsgChannelUpsertOne) UpdateComments() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *MsgChannelUpsertOne) ClearComments() *MsgChannelUpsertOne {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *MsgChannelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgChannelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgChannelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MsgChannelUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MsgChannelUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MsgChannelCreateBulk is the builder for creating many MsgChannel entities in bulk.
type MsgChannelCreateBulk struct {
	config
	err      error
	builders []*MsgChannelCreate
	conflict []sql.ConflictOption
}

// Save creates the MsgChannel entities in the database.
func (mccb *MsgChannelCreateBulk) Save(ctx context.Context) ([]*MsgChannel, error) {
	if mccb.err != nil {
		return nil, mccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mccb.builders))
	nodes := make([]*MsgChannel, len(mccb.builders))
	mutators := make([]Mutator, len(mccb.builders))
	for i := range mccb.builders {
		func(i int, root context.Context) {
			builder := mccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mccb *MsgChannelCreateBulk) SaveX(ctx context.Context) []*MsgChannel {
	v, err := mccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mccb *MsgChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := mccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mccb *MsgChannelCreateBulk) ExecX(ctx context.Context) {
	if err := mccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgChannel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgChannelUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mccb *MsgChannelCreateBulk) OnConflict(opts ...sql.ConflictOption) *MsgChannelUpsertBulk {
	mccb.conflict = opts
	return &MsgChannelUpsertBulk{
		create: mccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgChannel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mccb *MsgChannelCreateBulk) OnConflictColumns(columns ...string) *MsgChannelUpsertBulk {
	mccb.conflict = append(mccb.conflict, sql.ConflictColumns(columns...))
	return &MsgChannelUpsertBulk{
		create: mccb,
	}
}

// MsgChannelUpsertBulk is the builder for "upsert"-ing
// a bulk of MsgChannel nodes.
type MsgChannelUpsertBulk struct {
	create *MsgChannelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MsgChannel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msgchannel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgChannelUpsertBulk) UpdateNewValues() *MsgChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(msgchannel.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(msgchannel.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(msgchannel.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgChannel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MsgChannelUpsertBulk) Ignore() *MsgChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgChannelUpsertBulk) DoNothing() *MsgChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgChannelCreateBulk.OnConflict
// documentation for more info.
func (u *MsgChannelUpsertBulk) Update(set func(*MsgChannelUpsert)) *MsgChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgChannelUpsertBulk) SetUpdatedBy(v int) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgChannelUpsertBulk) AddUpdatedBy(v int) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgChannelUpsertBulk) UpdateUpdatedBy() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgChannelUpsertBulk) ClearUpdatedBy() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgChannelUpsertBulk) SetUpdatedAt(v time.Time) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgChannelUpsertBulk) UpdateUpdatedAt() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgChannelUpsertBulk) ClearUpdatedAt() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *MsgChannelUpsertBulk) SetName(v string) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MsgChannelUpsertBulk) UpdateName() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateName()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgChannelUpsertBulk) SetTenantID(v int) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgChannelUpsertBulk) AddTenantID(v int) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgChannelUpsertBulk) UpdateTenantID() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateTenantID()
	})
}

// SetReceiverType sets the "receiver_type" field.
func (u *MsgChannelUpsertBulk) SetReceiverType(v profile.ReceiverType) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetReceiverType(v)
	})
}

// UpdateReceiverType sets the "receiver_type" field to the value that was provided on create.
func (u *MsgChannelUpsertBulk) UpdateReceiverType() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateReceiverType()
	})
}

// SetStatus sets the "status" field.
func (u *MsgChannelUpsertBulk) SetStatus(v typex.SimpleStatus) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MsgChannelUpsertBulk) UpdateStatus() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MsgChannelUpsertBulk) ClearStatus() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearStatus()
	})
}

// SetReceiver sets the "receiver" field.
func (u *MsgChannelUpsertBulk) SetReceiver(v *profile.Receiver) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetReceiver(v)
	})
}

// UpdateReceiver sets the "receiver" field to the value that was provided on create.
func (u *MsgChannelUpsertBulk) UpdateReceiver() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateReceiver()
	})
}

// ClearReceiver clears the value of the "receiver" field.
func (u *MsgChannelUpsertBulk) ClearReceiver() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearReceiver()
	})
}

// SetComments sets the "comments" field.
func (u *MsgChannelUpsertBulk) SetComments(v string) *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *MsgChannelUpsertBulk) UpdateComments() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *MsgChannelUpsertBulk) ClearComments() *MsgChannelUpsertBulk {
	return u.Update(func(s *MsgChannelUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *MsgChannelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MsgChannelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgChannelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgChannelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
