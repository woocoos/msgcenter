// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msgalert"
	"github.com/woocoos/msgcenter/ent/nlog"
	"github.com/woocoos/msgcenter/ent/nlogalert"
	"github.com/woocoos/msgcenter/ent/predicate"
	"github.com/woocoos/msgcenter/pkg/label"

	"github.com/woocoos/msgcenter/ent/internal"
)

// MsgAlertUpdate is the builder for updating MsgAlert entities.
type MsgAlertUpdate struct {
	config
	hooks    []Hook
	mutation *MsgAlertMutation
}

// Where appends a list predicates to the MsgAlertUpdate builder.
func (mau *MsgAlertUpdate) Where(ps ...predicate.MsgAlert) *MsgAlertUpdate {
	mau.mutation.Where(ps...)
	return mau
}

// SetLabels sets the "labels" field.
func (mau *MsgAlertUpdate) SetLabels(ls *label.LabelSet) *MsgAlertUpdate {
	mau.mutation.SetLabels(ls)
	return mau
}

// ClearLabels clears the value of the "labels" field.
func (mau *MsgAlertUpdate) ClearLabels() *MsgAlertUpdate {
	mau.mutation.ClearLabels()
	return mau
}

// SetAnnotations sets the "annotations" field.
func (mau *MsgAlertUpdate) SetAnnotations(ls *label.LabelSet) *MsgAlertUpdate {
	mau.mutation.SetAnnotations(ls)
	return mau
}

// ClearAnnotations clears the value of the "annotations" field.
func (mau *MsgAlertUpdate) ClearAnnotations() *MsgAlertUpdate {
	mau.mutation.ClearAnnotations()
	return mau
}

// SetStartsAt sets the "starts_at" field.
func (mau *MsgAlertUpdate) SetStartsAt(t time.Time) *MsgAlertUpdate {
	mau.mutation.SetStartsAt(t)
	return mau
}

// SetEndsAt sets the "ends_at" field.
func (mau *MsgAlertUpdate) SetEndsAt(t time.Time) *MsgAlertUpdate {
	mau.mutation.SetEndsAt(t)
	return mau
}

// SetURL sets the "url" field.
func (mau *MsgAlertUpdate) SetURL(s string) *MsgAlertUpdate {
	mau.mutation.SetURL(s)
	return mau
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mau *MsgAlertUpdate) SetNillableURL(s *string) *MsgAlertUpdate {
	if s != nil {
		mau.SetURL(*s)
	}
	return mau
}

// ClearURL clears the value of the "url" field.
func (mau *MsgAlertUpdate) ClearURL() *MsgAlertUpdate {
	mau.mutation.ClearURL()
	return mau
}

// SetTimeout sets the "timeout" field.
func (mau *MsgAlertUpdate) SetTimeout(b bool) *MsgAlertUpdate {
	mau.mutation.SetTimeout(b)
	return mau
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (mau *MsgAlertUpdate) SetNillableTimeout(b *bool) *MsgAlertUpdate {
	if b != nil {
		mau.SetTimeout(*b)
	}
	return mau
}

// SetFingerprint sets the "fingerprint" field.
func (mau *MsgAlertUpdate) SetFingerprint(s string) *MsgAlertUpdate {
	mau.mutation.SetFingerprint(s)
	return mau
}

// SetUpdatedAt sets the "updated_at" field.
func (mau *MsgAlertUpdate) SetUpdatedAt(t time.Time) *MsgAlertUpdate {
	mau.mutation.SetUpdatedAt(t)
	return mau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mau *MsgAlertUpdate) SetNillableUpdatedAt(t *time.Time) *MsgAlertUpdate {
	if t != nil {
		mau.SetUpdatedAt(*t)
	}
	return mau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mau *MsgAlertUpdate) ClearUpdatedAt() *MsgAlertUpdate {
	mau.mutation.ClearUpdatedAt()
	return mau
}

// SetDeleted sets the "deleted" field.
func (mau *MsgAlertUpdate) SetDeleted(b bool) *MsgAlertUpdate {
	mau.mutation.SetDeleted(b)
	return mau
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (mau *MsgAlertUpdate) SetNillableDeleted(b *bool) *MsgAlertUpdate {
	if b != nil {
		mau.SetDeleted(*b)
	}
	return mau
}

// AddNlogIDs adds the "nlog" edge to the Nlog entity by IDs.
func (mau *MsgAlertUpdate) AddNlogIDs(ids ...int) *MsgAlertUpdate {
	mau.mutation.AddNlogIDs(ids...)
	return mau
}

// AddNlog adds the "nlog" edges to the Nlog entity.
func (mau *MsgAlertUpdate) AddNlog(n ...*Nlog) *MsgAlertUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mau.AddNlogIDs(ids...)
}

// AddNlogAlertIDs adds the "nlog_alerts" edge to the NlogAlert entity by IDs.
func (mau *MsgAlertUpdate) AddNlogAlertIDs(ids ...int) *MsgAlertUpdate {
	mau.mutation.AddNlogAlertIDs(ids...)
	return mau
}

// AddNlogAlerts adds the "nlog_alerts" edges to the NlogAlert entity.
func (mau *MsgAlertUpdate) AddNlogAlerts(n ...*NlogAlert) *MsgAlertUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mau.AddNlogAlertIDs(ids...)
}

// Mutation returns the MsgAlertMutation object of the builder.
func (mau *MsgAlertUpdate) Mutation() *MsgAlertMutation {
	return mau.mutation
}

// ClearNlog clears all "nlog" edges to the Nlog entity.
func (mau *MsgAlertUpdate) ClearNlog() *MsgAlertUpdate {
	mau.mutation.ClearNlog()
	return mau
}

// RemoveNlogIDs removes the "nlog" edge to Nlog entities by IDs.
func (mau *MsgAlertUpdate) RemoveNlogIDs(ids ...int) *MsgAlertUpdate {
	mau.mutation.RemoveNlogIDs(ids...)
	return mau
}

// RemoveNlog removes "nlog" edges to Nlog entities.
func (mau *MsgAlertUpdate) RemoveNlog(n ...*Nlog) *MsgAlertUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mau.RemoveNlogIDs(ids...)
}

// ClearNlogAlerts clears all "nlog_alerts" edges to the NlogAlert entity.
func (mau *MsgAlertUpdate) ClearNlogAlerts() *MsgAlertUpdate {
	mau.mutation.ClearNlogAlerts()
	return mau
}

// RemoveNlogAlertIDs removes the "nlog_alerts" edge to NlogAlert entities by IDs.
func (mau *MsgAlertUpdate) RemoveNlogAlertIDs(ids ...int) *MsgAlertUpdate {
	mau.mutation.RemoveNlogAlertIDs(ids...)
	return mau
}

// RemoveNlogAlerts removes "nlog_alerts" edges to NlogAlert entities.
func (mau *MsgAlertUpdate) RemoveNlogAlerts(n ...*NlogAlert) *MsgAlertUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mau.RemoveNlogAlertIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mau *MsgAlertUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mau.sqlSave, mau.mutation, mau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mau *MsgAlertUpdate) SaveX(ctx context.Context) int {
	affected, err := mau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mau *MsgAlertUpdate) Exec(ctx context.Context) error {
	_, err := mau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mau *MsgAlertUpdate) ExecX(ctx context.Context) {
	if err := mau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mau *MsgAlertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(msgalert.Table, msgalert.Columns, sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt))
	if ps := mau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mau.mutation.Labels(); ok {
		_spec.SetField(msgalert.FieldLabels, field.TypeJSON, value)
	}
	if mau.mutation.LabelsCleared() {
		_spec.ClearField(msgalert.FieldLabels, field.TypeJSON)
	}
	if value, ok := mau.mutation.Annotations(); ok {
		_spec.SetField(msgalert.FieldAnnotations, field.TypeJSON, value)
	}
	if mau.mutation.AnnotationsCleared() {
		_spec.ClearField(msgalert.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := mau.mutation.StartsAt(); ok {
		_spec.SetField(msgalert.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := mau.mutation.EndsAt(); ok {
		_spec.SetField(msgalert.FieldEndsAt, field.TypeTime, value)
	}
	if value, ok := mau.mutation.URL(); ok {
		_spec.SetField(msgalert.FieldURL, field.TypeString, value)
	}
	if mau.mutation.URLCleared() {
		_spec.ClearField(msgalert.FieldURL, field.TypeString)
	}
	if value, ok := mau.mutation.Timeout(); ok {
		_spec.SetField(msgalert.FieldTimeout, field.TypeBool, value)
	}
	if value, ok := mau.mutation.Fingerprint(); ok {
		_spec.SetField(msgalert.FieldFingerprint, field.TypeString, value)
	}
	if value, ok := mau.mutation.UpdatedAt(); ok {
		_spec.SetField(msgalert.FieldUpdatedAt, field.TypeTime, value)
	}
	if mau.mutation.UpdatedAtCleared() {
		_spec.ClearField(msgalert.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mau.mutation.Deleted(); ok {
		_spec.SetField(msgalert.FieldDeleted, field.TypeBool, value)
	}
	if mau.mutation.NlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msgalert.NlogTable,
			Columns: msgalert.NlogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mau.schemaConfig.NlogAlert
		createE := &NlogAlertCreate{config: mau.config, mutation: newNlogAlertMutation(mau.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.RemovedNlogIDs(); len(nodes) > 0 && !mau.mutation.NlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msgalert.NlogTable,
			Columns: msgalert.NlogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mau.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: mau.config, mutation: newNlogAlertMutation(mau.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.NlogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msgalert.NlogTable,
			Columns: msgalert.NlogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mau.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: mau.config, mutation: newNlogAlertMutation(mau.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mau.mutation.NlogAlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   msgalert.NlogAlertsTable,
			Columns: []string{msgalert.NlogAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mau.schemaConfig.NlogAlert
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.RemovedNlogAlertsIDs(); len(nodes) > 0 && !mau.mutation.NlogAlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   msgalert.NlogAlertsTable,
			Columns: []string{msgalert.NlogAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mau.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.NlogAlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   msgalert.NlogAlertsTable,
			Columns: []string{msgalert.NlogAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mau.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mau.schemaConfig.MsgAlert
	ctx = internal.NewSchemaConfigContext(ctx, mau.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, mau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgalert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mau.mutation.done = true
	return n, nil
}

// MsgAlertUpdateOne is the builder for updating a single MsgAlert entity.
type MsgAlertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgAlertMutation
}

// SetLabels sets the "labels" field.
func (mauo *MsgAlertUpdateOne) SetLabels(ls *label.LabelSet) *MsgAlertUpdateOne {
	mauo.mutation.SetLabels(ls)
	return mauo
}

// ClearLabels clears the value of the "labels" field.
func (mauo *MsgAlertUpdateOne) ClearLabels() *MsgAlertUpdateOne {
	mauo.mutation.ClearLabels()
	return mauo
}

// SetAnnotations sets the "annotations" field.
func (mauo *MsgAlertUpdateOne) SetAnnotations(ls *label.LabelSet) *MsgAlertUpdateOne {
	mauo.mutation.SetAnnotations(ls)
	return mauo
}

// ClearAnnotations clears the value of the "annotations" field.
func (mauo *MsgAlertUpdateOne) ClearAnnotations() *MsgAlertUpdateOne {
	mauo.mutation.ClearAnnotations()
	return mauo
}

// SetStartsAt sets the "starts_at" field.
func (mauo *MsgAlertUpdateOne) SetStartsAt(t time.Time) *MsgAlertUpdateOne {
	mauo.mutation.SetStartsAt(t)
	return mauo
}

// SetEndsAt sets the "ends_at" field.
func (mauo *MsgAlertUpdateOne) SetEndsAt(t time.Time) *MsgAlertUpdateOne {
	mauo.mutation.SetEndsAt(t)
	return mauo
}

// SetURL sets the "url" field.
func (mauo *MsgAlertUpdateOne) SetURL(s string) *MsgAlertUpdateOne {
	mauo.mutation.SetURL(s)
	return mauo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mauo *MsgAlertUpdateOne) SetNillableURL(s *string) *MsgAlertUpdateOne {
	if s != nil {
		mauo.SetURL(*s)
	}
	return mauo
}

// ClearURL clears the value of the "url" field.
func (mauo *MsgAlertUpdateOne) ClearURL() *MsgAlertUpdateOne {
	mauo.mutation.ClearURL()
	return mauo
}

// SetTimeout sets the "timeout" field.
func (mauo *MsgAlertUpdateOne) SetTimeout(b bool) *MsgAlertUpdateOne {
	mauo.mutation.SetTimeout(b)
	return mauo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (mauo *MsgAlertUpdateOne) SetNillableTimeout(b *bool) *MsgAlertUpdateOne {
	if b != nil {
		mauo.SetTimeout(*b)
	}
	return mauo
}

// SetFingerprint sets the "fingerprint" field.
func (mauo *MsgAlertUpdateOne) SetFingerprint(s string) *MsgAlertUpdateOne {
	mauo.mutation.SetFingerprint(s)
	return mauo
}

// SetUpdatedAt sets the "updated_at" field.
func (mauo *MsgAlertUpdateOne) SetUpdatedAt(t time.Time) *MsgAlertUpdateOne {
	mauo.mutation.SetUpdatedAt(t)
	return mauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mauo *MsgAlertUpdateOne) SetNillableUpdatedAt(t *time.Time) *MsgAlertUpdateOne {
	if t != nil {
		mauo.SetUpdatedAt(*t)
	}
	return mauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mauo *MsgAlertUpdateOne) ClearUpdatedAt() *MsgAlertUpdateOne {
	mauo.mutation.ClearUpdatedAt()
	return mauo
}

// SetDeleted sets the "deleted" field.
func (mauo *MsgAlertUpdateOne) SetDeleted(b bool) *MsgAlertUpdateOne {
	mauo.mutation.SetDeleted(b)
	return mauo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (mauo *MsgAlertUpdateOne) SetNillableDeleted(b *bool) *MsgAlertUpdateOne {
	if b != nil {
		mauo.SetDeleted(*b)
	}
	return mauo
}

// AddNlogIDs adds the "nlog" edge to the Nlog entity by IDs.
func (mauo *MsgAlertUpdateOne) AddNlogIDs(ids ...int) *MsgAlertUpdateOne {
	mauo.mutation.AddNlogIDs(ids...)
	return mauo
}

// AddNlog adds the "nlog" edges to the Nlog entity.
func (mauo *MsgAlertUpdateOne) AddNlog(n ...*Nlog) *MsgAlertUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mauo.AddNlogIDs(ids...)
}

// AddNlogAlertIDs adds the "nlog_alerts" edge to the NlogAlert entity by IDs.
func (mauo *MsgAlertUpdateOne) AddNlogAlertIDs(ids ...int) *MsgAlertUpdateOne {
	mauo.mutation.AddNlogAlertIDs(ids...)
	return mauo
}

// AddNlogAlerts adds the "nlog_alerts" edges to the NlogAlert entity.
func (mauo *MsgAlertUpdateOne) AddNlogAlerts(n ...*NlogAlert) *MsgAlertUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mauo.AddNlogAlertIDs(ids...)
}

// Mutation returns the MsgAlertMutation object of the builder.
func (mauo *MsgAlertUpdateOne) Mutation() *MsgAlertMutation {
	return mauo.mutation
}

// ClearNlog clears all "nlog" edges to the Nlog entity.
func (mauo *MsgAlertUpdateOne) ClearNlog() *MsgAlertUpdateOne {
	mauo.mutation.ClearNlog()
	return mauo
}

// RemoveNlogIDs removes the "nlog" edge to Nlog entities by IDs.
func (mauo *MsgAlertUpdateOne) RemoveNlogIDs(ids ...int) *MsgAlertUpdateOne {
	mauo.mutation.RemoveNlogIDs(ids...)
	return mauo
}

// RemoveNlog removes "nlog" edges to Nlog entities.
func (mauo *MsgAlertUpdateOne) RemoveNlog(n ...*Nlog) *MsgAlertUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mauo.RemoveNlogIDs(ids...)
}

// ClearNlogAlerts clears all "nlog_alerts" edges to the NlogAlert entity.
func (mauo *MsgAlertUpdateOne) ClearNlogAlerts() *MsgAlertUpdateOne {
	mauo.mutation.ClearNlogAlerts()
	return mauo
}

// RemoveNlogAlertIDs removes the "nlog_alerts" edge to NlogAlert entities by IDs.
func (mauo *MsgAlertUpdateOne) RemoveNlogAlertIDs(ids ...int) *MsgAlertUpdateOne {
	mauo.mutation.RemoveNlogAlertIDs(ids...)
	return mauo
}

// RemoveNlogAlerts removes "nlog_alerts" edges to NlogAlert entities.
func (mauo *MsgAlertUpdateOne) RemoveNlogAlerts(n ...*NlogAlert) *MsgAlertUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mauo.RemoveNlogAlertIDs(ids...)
}

// Where appends a list predicates to the MsgAlertUpdate builder.
func (mauo *MsgAlertUpdateOne) Where(ps ...predicate.MsgAlert) *MsgAlertUpdateOne {
	mauo.mutation.Where(ps...)
	return mauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mauo *MsgAlertUpdateOne) Select(field string, fields ...string) *MsgAlertUpdateOne {
	mauo.fields = append([]string{field}, fields...)
	return mauo
}

// Save executes the query and returns the updated MsgAlert entity.
func (mauo *MsgAlertUpdateOne) Save(ctx context.Context) (*MsgAlert, error) {
	return withHooks(ctx, mauo.sqlSave, mauo.mutation, mauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mauo *MsgAlertUpdateOne) SaveX(ctx context.Context) *MsgAlert {
	node, err := mauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mauo *MsgAlertUpdateOne) Exec(ctx context.Context) error {
	_, err := mauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mauo *MsgAlertUpdateOne) ExecX(ctx context.Context) {
	if err := mauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mauo *MsgAlertUpdateOne) sqlSave(ctx context.Context) (_node *MsgAlert, err error) {
	_spec := sqlgraph.NewUpdateSpec(msgalert.Table, msgalert.Columns, sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt))
	id, ok := mauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgAlert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msgalert.FieldID)
		for _, f := range fields {
			if !msgalert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msgalert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mauo.mutation.Labels(); ok {
		_spec.SetField(msgalert.FieldLabels, field.TypeJSON, value)
	}
	if mauo.mutation.LabelsCleared() {
		_spec.ClearField(msgalert.FieldLabels, field.TypeJSON)
	}
	if value, ok := mauo.mutation.Annotations(); ok {
		_spec.SetField(msgalert.FieldAnnotations, field.TypeJSON, value)
	}
	if mauo.mutation.AnnotationsCleared() {
		_spec.ClearField(msgalert.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := mauo.mutation.StartsAt(); ok {
		_spec.SetField(msgalert.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := mauo.mutation.EndsAt(); ok {
		_spec.SetField(msgalert.FieldEndsAt, field.TypeTime, value)
	}
	if value, ok := mauo.mutation.URL(); ok {
		_spec.SetField(msgalert.FieldURL, field.TypeString, value)
	}
	if mauo.mutation.URLCleared() {
		_spec.ClearField(msgalert.FieldURL, field.TypeString)
	}
	if value, ok := mauo.mutation.Timeout(); ok {
		_spec.SetField(msgalert.FieldTimeout, field.TypeBool, value)
	}
	if value, ok := mauo.mutation.Fingerprint(); ok {
		_spec.SetField(msgalert.FieldFingerprint, field.TypeString, value)
	}
	if value, ok := mauo.mutation.UpdatedAt(); ok {
		_spec.SetField(msgalert.FieldUpdatedAt, field.TypeTime, value)
	}
	if mauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(msgalert.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mauo.mutation.Deleted(); ok {
		_spec.SetField(msgalert.FieldDeleted, field.TypeBool, value)
	}
	if mauo.mutation.NlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msgalert.NlogTable,
			Columns: msgalert.NlogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mauo.schemaConfig.NlogAlert
		createE := &NlogAlertCreate{config: mauo.config, mutation: newNlogAlertMutation(mauo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.RemovedNlogIDs(); len(nodes) > 0 && !mauo.mutation.NlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msgalert.NlogTable,
			Columns: msgalert.NlogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mauo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: mauo.config, mutation: newNlogAlertMutation(mauo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.NlogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msgalert.NlogTable,
			Columns: msgalert.NlogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mauo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: mauo.config, mutation: newNlogAlertMutation(mauo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mauo.mutation.NlogAlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   msgalert.NlogAlertsTable,
			Columns: []string{msgalert.NlogAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mauo.schemaConfig.NlogAlert
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.RemovedNlogAlertsIDs(); len(nodes) > 0 && !mauo.mutation.NlogAlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   msgalert.NlogAlertsTable,
			Columns: []string{msgalert.NlogAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mauo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.NlogAlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   msgalert.NlogAlertsTable,
			Columns: []string{msgalert.NlogAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mauo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mauo.schemaConfig.MsgAlert
	ctx = internal.NewSchemaConfigContext(ctx, mauo.schemaConfig)
	_node = &MsgAlert{config: mauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgalert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mauo.mutation.done = true
	return _node, nil
}
