// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msgsubscriber"
	"github.com/woocoos/msgcenter/ent/predicate"
)

// MsgSubscriberDelete is the builder for deleting a MsgSubscriber entity.
type MsgSubscriberDelete struct {
	config
	hooks    []Hook
	mutation *MsgSubscriberMutation
}

// Where appends a list predicates to the MsgSubscriberDelete builder.
func (msd *MsgSubscriberDelete) Where(ps ...predicate.MsgSubscriber) *MsgSubscriberDelete {
	msd.mutation.Where(ps...)
	return msd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (msd *MsgSubscriberDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, msd.sqlExec, msd.mutation, msd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (msd *MsgSubscriberDelete) ExecX(ctx context.Context) int {
	n, err := msd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (msd *MsgSubscriberDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(msgsubscriber.Table, sqlgraph.NewFieldSpec(msgsubscriber.FieldID, field.TypeInt))
	if ps := msd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, msd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	msd.mutation.done = true
	return affected, err
}

// MsgSubscriberDeleteOne is the builder for deleting a single MsgSubscriber entity.
type MsgSubscriberDeleteOne struct {
	msd *MsgSubscriberDelete
}

// Where appends a list predicates to the MsgSubscriberDelete builder.
func (msdo *MsgSubscriberDeleteOne) Where(ps ...predicate.MsgSubscriber) *MsgSubscriberDeleteOne {
	msdo.msd.mutation.Where(ps...)
	return msdo
}

// Exec executes the deletion query.
func (msdo *MsgSubscriberDeleteOne) Exec(ctx context.Context) error {
	n, err := msdo.msd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{msgsubscriber.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (msdo *MsgSubscriberDeleteOne) ExecX(ctx context.Context) {
	if err := msdo.Exec(ctx); err != nil {
		panic(err)
	}
}
