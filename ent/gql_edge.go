// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (me *MsgEvent) MsgType(ctx context.Context) (*MsgType, error) {
	result, err := me.Edges.MsgTypeOrErr()
	if IsNotLoaded(err) {
		result, err = me.QueryMsgType().Only(ctx)
	}
	return result, err
}

func (me *MsgEvent) CustomerTemplate(ctx context.Context) (result []*MsgTemplate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = me.NamedCustomerTemplate(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = me.Edges.CustomerTemplateOrErr()
	}
	if IsNotLoaded(err) {
		result, err = me.QueryCustomerTemplate().All(ctx)
	}
	return result, err
}

func (ms *MsgSubscriber) MsgType(ctx context.Context) (*MsgType, error) {
	result, err := ms.Edges.MsgTypeOrErr()
	if IsNotLoaded(err) {
		result, err = ms.QueryMsgType().Only(ctx)
	}
	return result, err
}

func (ms *MsgSubscriber) User(ctx context.Context) (*User, error) {
	result, err := ms.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ms.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (mt *MsgTemplate) Event(ctx context.Context) (*MsgEvent, error) {
	result, err := mt.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = mt.QueryEvent().Only(ctx)
	}
	return result, err
}

func (mt *MsgType) Events(ctx context.Context) (result []*MsgEvent, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = mt.NamedEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = mt.Edges.EventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = mt.QueryEvents().All(ctx)
	}
	return result, err
}

func (mt *MsgType) Subscribers(ctx context.Context) (result []*MsgSubscriber, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = mt.NamedSubscribers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = mt.Edges.SubscribersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = mt.QuerySubscribers().All(ctx)
	}
	return result, err
}

func (s *Silence) User(ctx context.Context) (*User, error) {
	result, err := s.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryUser().Only(ctx)
	}
	return result, err
}

func (u *User) Silences(ctx context.Context) (result []*Silence, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSilences(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SilencesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySilences().All(ctx)
	}
	return result, err
}
