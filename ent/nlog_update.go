// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msgalert"
	"github.com/woocoos/msgcenter/ent/nlog"
	"github.com/woocoos/msgcenter/ent/nlogalert"
	"github.com/woocoos/msgcenter/ent/predicate"
	"github.com/woocoos/msgcenter/pkg/profile"

	"github.com/woocoos/msgcenter/ent/internal"
)

// NlogUpdate is the builder for updating Nlog entities.
type NlogUpdate struct {
	config
	hooks    []Hook
	mutation *NlogMutation
}

// Where appends a list predicates to the NlogUpdate builder.
func (nu *NlogUpdate) Where(ps ...predicate.Nlog) *NlogUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetGroupKey sets the "group_key" field.
func (nu *NlogUpdate) SetGroupKey(s string) *NlogUpdate {
	nu.mutation.SetGroupKey(s)
	return nu
}

// SetNillableGroupKey sets the "group_key" field if the given value is not nil.
func (nu *NlogUpdate) SetNillableGroupKey(s *string) *NlogUpdate {
	if s != nil {
		nu.SetGroupKey(*s)
	}
	return nu
}

// SetReceiver sets the "receiver" field.
func (nu *NlogUpdate) SetReceiver(s string) *NlogUpdate {
	nu.mutation.SetReceiver(s)
	return nu
}

// SetNillableReceiver sets the "receiver" field if the given value is not nil.
func (nu *NlogUpdate) SetNillableReceiver(s *string) *NlogUpdate {
	if s != nil {
		nu.SetReceiver(*s)
	}
	return nu
}

// SetReceiverType sets the "receiver_type" field.
func (nu *NlogUpdate) SetReceiverType(pt profile.ReceiverType) *NlogUpdate {
	nu.mutation.SetReceiverType(pt)
	return nu
}

// SetNillableReceiverType sets the "receiver_type" field if the given value is not nil.
func (nu *NlogUpdate) SetNillableReceiverType(pt *profile.ReceiverType) *NlogUpdate {
	if pt != nil {
		nu.SetReceiverType(*pt)
	}
	return nu
}

// SetIdx sets the "idx" field.
func (nu *NlogUpdate) SetIdx(i int) *NlogUpdate {
	nu.mutation.ResetIdx()
	nu.mutation.SetIdx(i)
	return nu
}

// SetNillableIdx sets the "idx" field if the given value is not nil.
func (nu *NlogUpdate) SetNillableIdx(i *int) *NlogUpdate {
	if i != nil {
		nu.SetIdx(*i)
	}
	return nu
}

// AddIdx adds i to the "idx" field.
func (nu *NlogUpdate) AddIdx(i int) *NlogUpdate {
	nu.mutation.AddIdx(i)
	return nu
}

// SetSendAt sets the "send_at" field.
func (nu *NlogUpdate) SetSendAt(t time.Time) *NlogUpdate {
	nu.mutation.SetSendAt(t)
	return nu
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (nu *NlogUpdate) SetNillableSendAt(t *time.Time) *NlogUpdate {
	if t != nil {
		nu.SetSendAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NlogUpdate) SetUpdatedAt(t time.Time) *NlogUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nu *NlogUpdate) SetNillableUpdatedAt(t *time.Time) *NlogUpdate {
	if t != nil {
		nu.SetUpdatedAt(*t)
	}
	return nu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nu *NlogUpdate) ClearUpdatedAt() *NlogUpdate {
	nu.mutation.ClearUpdatedAt()
	return nu
}

// SetExpiresAt sets the "expires_at" field.
func (nu *NlogUpdate) SetExpiresAt(t time.Time) *NlogUpdate {
	nu.mutation.SetExpiresAt(t)
	return nu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (nu *NlogUpdate) SetNillableExpiresAt(t *time.Time) *NlogUpdate {
	if t != nil {
		nu.SetExpiresAt(*t)
	}
	return nu
}

// AddAlertIDs adds the "alerts" edge to the MsgAlert entity by IDs.
func (nu *NlogUpdate) AddAlertIDs(ids ...int) *NlogUpdate {
	nu.mutation.AddAlertIDs(ids...)
	return nu
}

// AddAlerts adds the "alerts" edges to the MsgAlert entity.
func (nu *NlogUpdate) AddAlerts(m ...*MsgAlert) *NlogUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.AddAlertIDs(ids...)
}

// AddNlogAlertIDs adds the "nlog_alert" edge to the NlogAlert entity by IDs.
func (nu *NlogUpdate) AddNlogAlertIDs(ids ...int) *NlogUpdate {
	nu.mutation.AddNlogAlertIDs(ids...)
	return nu
}

// AddNlogAlert adds the "nlog_alert" edges to the NlogAlert entity.
func (nu *NlogUpdate) AddNlogAlert(n ...*NlogAlert) *NlogUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddNlogAlertIDs(ids...)
}

// Mutation returns the NlogMutation object of the builder.
func (nu *NlogUpdate) Mutation() *NlogMutation {
	return nu.mutation
}

// ClearAlerts clears all "alerts" edges to the MsgAlert entity.
func (nu *NlogUpdate) ClearAlerts() *NlogUpdate {
	nu.mutation.ClearAlerts()
	return nu
}

// RemoveAlertIDs removes the "alerts" edge to MsgAlert entities by IDs.
func (nu *NlogUpdate) RemoveAlertIDs(ids ...int) *NlogUpdate {
	nu.mutation.RemoveAlertIDs(ids...)
	return nu
}

// RemoveAlerts removes "alerts" edges to MsgAlert entities.
func (nu *NlogUpdate) RemoveAlerts(m ...*MsgAlert) *NlogUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.RemoveAlertIDs(ids...)
}

// ClearNlogAlert clears all "nlog_alert" edges to the NlogAlert entity.
func (nu *NlogUpdate) ClearNlogAlert() *NlogUpdate {
	nu.mutation.ClearNlogAlert()
	return nu
}

// RemoveNlogAlertIDs removes the "nlog_alert" edge to NlogAlert entities by IDs.
func (nu *NlogUpdate) RemoveNlogAlertIDs(ids ...int) *NlogUpdate {
	nu.mutation.RemoveNlogAlertIDs(ids...)
	return nu
}

// RemoveNlogAlert removes "nlog_alert" edges to NlogAlert entities.
func (nu *NlogUpdate) RemoveNlogAlert(n ...*NlogAlert) *NlogUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveNlogAlertIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NlogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NlogUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NlogUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NlogUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NlogUpdate) check() error {
	if v, ok := nu.mutation.ReceiverType(); ok {
		if err := nlog.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "Nlog.receiver_type": %w`, err)}
		}
	}
	return nil
}

func (nu *NlogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(nlog.Table, nlog.Columns, sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.GroupKey(); ok {
		_spec.SetField(nlog.FieldGroupKey, field.TypeString, value)
	}
	if value, ok := nu.mutation.Receiver(); ok {
		_spec.SetField(nlog.FieldReceiver, field.TypeString, value)
	}
	if value, ok := nu.mutation.ReceiverType(); ok {
		_spec.SetField(nlog.FieldReceiverType, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.Idx(); ok {
		_spec.SetField(nlog.FieldIdx, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedIdx(); ok {
		_spec.AddField(nlog.FieldIdx, field.TypeInt, value)
	}
	if value, ok := nu.mutation.SendAt(); ok {
		_spec.SetField(nlog.FieldSendAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(nlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.UpdatedAtCleared() {
		_spec.ClearField(nlog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := nu.mutation.ExpiresAt(); ok {
		_spec.SetField(nlog.FieldExpiresAt, field.TypeTime, value)
	}
	if nu.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nlog.AlertsTable,
			Columns: nlog.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nu.schemaConfig.NlogAlert
		createE := &NlogAlertCreate{config: nu.config, mutation: newNlogAlertMutation(nu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedAlertsIDs(); len(nodes) > 0 && !nu.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nlog.AlertsTable,
			Columns: nlog.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nu.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: nu.config, mutation: newNlogAlertMutation(nu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.AlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nlog.AlertsTable,
			Columns: nlog.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nu.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: nu.config, mutation: newNlogAlertMutation(nu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NlogAlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nlog.NlogAlertTable,
			Columns: []string{nlog.NlogAlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nu.schemaConfig.NlogAlert
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNlogAlertIDs(); len(nodes) > 0 && !nu.mutation.NlogAlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nlog.NlogAlertTable,
			Columns: []string{nlog.NlogAlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nu.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NlogAlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nlog.NlogAlertTable,
			Columns: []string{nlog.NlogAlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nu.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = nu.schemaConfig.Nlog
	ctx = internal.NewSchemaConfigContext(ctx, nu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NlogUpdateOne is the builder for updating a single Nlog entity.
type NlogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NlogMutation
}

// SetGroupKey sets the "group_key" field.
func (nuo *NlogUpdateOne) SetGroupKey(s string) *NlogUpdateOne {
	nuo.mutation.SetGroupKey(s)
	return nuo
}

// SetNillableGroupKey sets the "group_key" field if the given value is not nil.
func (nuo *NlogUpdateOne) SetNillableGroupKey(s *string) *NlogUpdateOne {
	if s != nil {
		nuo.SetGroupKey(*s)
	}
	return nuo
}

// SetReceiver sets the "receiver" field.
func (nuo *NlogUpdateOne) SetReceiver(s string) *NlogUpdateOne {
	nuo.mutation.SetReceiver(s)
	return nuo
}

// SetNillableReceiver sets the "receiver" field if the given value is not nil.
func (nuo *NlogUpdateOne) SetNillableReceiver(s *string) *NlogUpdateOne {
	if s != nil {
		nuo.SetReceiver(*s)
	}
	return nuo
}

// SetReceiverType sets the "receiver_type" field.
func (nuo *NlogUpdateOne) SetReceiverType(pt profile.ReceiverType) *NlogUpdateOne {
	nuo.mutation.SetReceiverType(pt)
	return nuo
}

// SetNillableReceiverType sets the "receiver_type" field if the given value is not nil.
func (nuo *NlogUpdateOne) SetNillableReceiverType(pt *profile.ReceiverType) *NlogUpdateOne {
	if pt != nil {
		nuo.SetReceiverType(*pt)
	}
	return nuo
}

// SetIdx sets the "idx" field.
func (nuo *NlogUpdateOne) SetIdx(i int) *NlogUpdateOne {
	nuo.mutation.ResetIdx()
	nuo.mutation.SetIdx(i)
	return nuo
}

// SetNillableIdx sets the "idx" field if the given value is not nil.
func (nuo *NlogUpdateOne) SetNillableIdx(i *int) *NlogUpdateOne {
	if i != nil {
		nuo.SetIdx(*i)
	}
	return nuo
}

// AddIdx adds i to the "idx" field.
func (nuo *NlogUpdateOne) AddIdx(i int) *NlogUpdateOne {
	nuo.mutation.AddIdx(i)
	return nuo
}

// SetSendAt sets the "send_at" field.
func (nuo *NlogUpdateOne) SetSendAt(t time.Time) *NlogUpdateOne {
	nuo.mutation.SetSendAt(t)
	return nuo
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (nuo *NlogUpdateOne) SetNillableSendAt(t *time.Time) *NlogUpdateOne {
	if t != nil {
		nuo.SetSendAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NlogUpdateOne) SetUpdatedAt(t time.Time) *NlogUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nuo *NlogUpdateOne) SetNillableUpdatedAt(t *time.Time) *NlogUpdateOne {
	if t != nil {
		nuo.SetUpdatedAt(*t)
	}
	return nuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nuo *NlogUpdateOne) ClearUpdatedAt() *NlogUpdateOne {
	nuo.mutation.ClearUpdatedAt()
	return nuo
}

// SetExpiresAt sets the "expires_at" field.
func (nuo *NlogUpdateOne) SetExpiresAt(t time.Time) *NlogUpdateOne {
	nuo.mutation.SetExpiresAt(t)
	return nuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (nuo *NlogUpdateOne) SetNillableExpiresAt(t *time.Time) *NlogUpdateOne {
	if t != nil {
		nuo.SetExpiresAt(*t)
	}
	return nuo
}

// AddAlertIDs adds the "alerts" edge to the MsgAlert entity by IDs.
func (nuo *NlogUpdateOne) AddAlertIDs(ids ...int) *NlogUpdateOne {
	nuo.mutation.AddAlertIDs(ids...)
	return nuo
}

// AddAlerts adds the "alerts" edges to the MsgAlert entity.
func (nuo *NlogUpdateOne) AddAlerts(m ...*MsgAlert) *NlogUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.AddAlertIDs(ids...)
}

// AddNlogAlertIDs adds the "nlog_alert" edge to the NlogAlert entity by IDs.
func (nuo *NlogUpdateOne) AddNlogAlertIDs(ids ...int) *NlogUpdateOne {
	nuo.mutation.AddNlogAlertIDs(ids...)
	return nuo
}

// AddNlogAlert adds the "nlog_alert" edges to the NlogAlert entity.
func (nuo *NlogUpdateOne) AddNlogAlert(n ...*NlogAlert) *NlogUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddNlogAlertIDs(ids...)
}

// Mutation returns the NlogMutation object of the builder.
func (nuo *NlogUpdateOne) Mutation() *NlogMutation {
	return nuo.mutation
}

// ClearAlerts clears all "alerts" edges to the MsgAlert entity.
func (nuo *NlogUpdateOne) ClearAlerts() *NlogUpdateOne {
	nuo.mutation.ClearAlerts()
	return nuo
}

// RemoveAlertIDs removes the "alerts" edge to MsgAlert entities by IDs.
func (nuo *NlogUpdateOne) RemoveAlertIDs(ids ...int) *NlogUpdateOne {
	nuo.mutation.RemoveAlertIDs(ids...)
	return nuo
}

// RemoveAlerts removes "alerts" edges to MsgAlert entities.
func (nuo *NlogUpdateOne) RemoveAlerts(m ...*MsgAlert) *NlogUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.RemoveAlertIDs(ids...)
}

// ClearNlogAlert clears all "nlog_alert" edges to the NlogAlert entity.
func (nuo *NlogUpdateOne) ClearNlogAlert() *NlogUpdateOne {
	nuo.mutation.ClearNlogAlert()
	return nuo
}

// RemoveNlogAlertIDs removes the "nlog_alert" edge to NlogAlert entities by IDs.
func (nuo *NlogUpdateOne) RemoveNlogAlertIDs(ids ...int) *NlogUpdateOne {
	nuo.mutation.RemoveNlogAlertIDs(ids...)
	return nuo
}

// RemoveNlogAlert removes "nlog_alert" edges to NlogAlert entities.
func (nuo *NlogUpdateOne) RemoveNlogAlert(n ...*NlogAlert) *NlogUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveNlogAlertIDs(ids...)
}

// Where appends a list predicates to the NlogUpdate builder.
func (nuo *NlogUpdateOne) Where(ps ...predicate.Nlog) *NlogUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NlogUpdateOne) Select(field string, fields ...string) *NlogUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Nlog entity.
func (nuo *NlogUpdateOne) Save(ctx context.Context) (*Nlog, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NlogUpdateOne) SaveX(ctx context.Context) *Nlog {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NlogUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NlogUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NlogUpdateOne) check() error {
	if v, ok := nuo.mutation.ReceiverType(); ok {
		if err := nlog.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "Nlog.receiver_type": %w`, err)}
		}
	}
	return nil
}

func (nuo *NlogUpdateOne) sqlSave(ctx context.Context) (_node *Nlog, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(nlog.Table, nlog.Columns, sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Nlog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nlog.FieldID)
		for _, f := range fields {
			if !nlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.GroupKey(); ok {
		_spec.SetField(nlog.FieldGroupKey, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Receiver(); ok {
		_spec.SetField(nlog.FieldReceiver, field.TypeString, value)
	}
	if value, ok := nuo.mutation.ReceiverType(); ok {
		_spec.SetField(nlog.FieldReceiverType, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.Idx(); ok {
		_spec.SetField(nlog.FieldIdx, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedIdx(); ok {
		_spec.AddField(nlog.FieldIdx, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.SendAt(); ok {
		_spec.SetField(nlog.FieldSendAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(nlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(nlog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.ExpiresAt(); ok {
		_spec.SetField(nlog.FieldExpiresAt, field.TypeTime, value)
	}
	if nuo.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nlog.AlertsTable,
			Columns: nlog.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nuo.schemaConfig.NlogAlert
		createE := &NlogAlertCreate{config: nuo.config, mutation: newNlogAlertMutation(nuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedAlertsIDs(); len(nodes) > 0 && !nuo.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nlog.AlertsTable,
			Columns: nlog.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nuo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: nuo.config, mutation: newNlogAlertMutation(nuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.AlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nlog.AlertsTable,
			Columns: nlog.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nuo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: nuo.config, mutation: newNlogAlertMutation(nuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NlogAlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nlog.NlogAlertTable,
			Columns: []string{nlog.NlogAlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nuo.schemaConfig.NlogAlert
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNlogAlertIDs(); len(nodes) > 0 && !nuo.mutation.NlogAlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nlog.NlogAlertTable,
			Columns: []string{nlog.NlogAlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nuo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NlogAlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nlog.NlogAlertTable,
			Columns: []string{nlog.NlogAlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = nuo.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = nuo.schemaConfig.Nlog
	ctx = internal.NewSchemaConfigContext(ctx, nuo.schemaConfig)
	_node = &Nlog{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
