// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/orgroleuser"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// OrgRoleUserUpdate is the builder for updating OrgRoleUser entities.
type OrgRoleUserUpdate struct {
	config
	hooks    []Hook
	mutation *OrgRoleUserMutation
}

// Where appends a list predicates to the OrgRoleUserUpdate builder.
func (oruu *OrgRoleUserUpdate) Where(ps ...predicate.OrgRoleUser) *OrgRoleUserUpdate {
	oruu.mutation.Where(ps...)
	return oruu
}

// SetOrgRoleID sets the "org_role_id" field.
func (oruu *OrgRoleUserUpdate) SetOrgRoleID(i int) *OrgRoleUserUpdate {
	oruu.mutation.ResetOrgRoleID()
	oruu.mutation.SetOrgRoleID(i)
	return oruu
}

// SetNillableOrgRoleID sets the "org_role_id" field if the given value is not nil.
func (oruu *OrgRoleUserUpdate) SetNillableOrgRoleID(i *int) *OrgRoleUserUpdate {
	if i != nil {
		oruu.SetOrgRoleID(*i)
	}
	return oruu
}

// AddOrgRoleID adds i to the "org_role_id" field.
func (oruu *OrgRoleUserUpdate) AddOrgRoleID(i int) *OrgRoleUserUpdate {
	oruu.mutation.AddOrgRoleID(i)
	return oruu
}

// SetOrgUserID sets the "org_user_id" field.
func (oruu *OrgRoleUserUpdate) SetOrgUserID(i int) *OrgRoleUserUpdate {
	oruu.mutation.ResetOrgUserID()
	oruu.mutation.SetOrgUserID(i)
	return oruu
}

// SetNillableOrgUserID sets the "org_user_id" field if the given value is not nil.
func (oruu *OrgRoleUserUpdate) SetNillableOrgUserID(i *int) *OrgRoleUserUpdate {
	if i != nil {
		oruu.SetOrgUserID(*i)
	}
	return oruu
}

// AddOrgUserID adds i to the "org_user_id" field.
func (oruu *OrgRoleUserUpdate) AddOrgUserID(i int) *OrgRoleUserUpdate {
	oruu.mutation.AddOrgUserID(i)
	return oruu
}

// SetOrgID sets the "org_id" field.
func (oruu *OrgRoleUserUpdate) SetOrgID(i int) *OrgRoleUserUpdate {
	oruu.mutation.ResetOrgID()
	oruu.mutation.SetOrgID(i)
	return oruu
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (oruu *OrgRoleUserUpdate) SetNillableOrgID(i *int) *OrgRoleUserUpdate {
	if i != nil {
		oruu.SetOrgID(*i)
	}
	return oruu
}

// AddOrgID adds i to the "org_id" field.
func (oruu *OrgRoleUserUpdate) AddOrgID(i int) *OrgRoleUserUpdate {
	oruu.mutation.AddOrgID(i)
	return oruu
}

// SetUserID sets the "user_id" field.
func (oruu *OrgRoleUserUpdate) SetUserID(i int) *OrgRoleUserUpdate {
	oruu.mutation.ResetUserID()
	oruu.mutation.SetUserID(i)
	return oruu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oruu *OrgRoleUserUpdate) SetNillableUserID(i *int) *OrgRoleUserUpdate {
	if i != nil {
		oruu.SetUserID(*i)
	}
	return oruu
}

// AddUserID adds i to the "user_id" field.
func (oruu *OrgRoleUserUpdate) AddUserID(i int) *OrgRoleUserUpdate {
	oruu.mutation.AddUserID(i)
	return oruu
}

// Mutation returns the OrgRoleUserMutation object of the builder.
func (oruu *OrgRoleUserUpdate) Mutation() *OrgRoleUserMutation {
	return oruu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oruu *OrgRoleUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oruu.sqlSave, oruu.mutation, oruu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruu *OrgRoleUserUpdate) SaveX(ctx context.Context) int {
	affected, err := oruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oruu *OrgRoleUserUpdate) Exec(ctx context.Context) error {
	_, err := oruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruu *OrgRoleUserUpdate) ExecX(ctx context.Context) {
	if err := oruu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oruu *OrgRoleUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orgroleuser.Table, orgroleuser.Columns, sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt))
	if ps := oruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruu.mutation.OrgRoleID(); ok {
		_spec.SetField(orgroleuser.FieldOrgRoleID, field.TypeInt, value)
	}
	if value, ok := oruu.mutation.AddedOrgRoleID(); ok {
		_spec.AddField(orgroleuser.FieldOrgRoleID, field.TypeInt, value)
	}
	if value, ok := oruu.mutation.OrgUserID(); ok {
		_spec.SetField(orgroleuser.FieldOrgUserID, field.TypeInt, value)
	}
	if value, ok := oruu.mutation.AddedOrgUserID(); ok {
		_spec.AddField(orgroleuser.FieldOrgUserID, field.TypeInt, value)
	}
	if value, ok := oruu.mutation.OrgID(); ok {
		_spec.SetField(orgroleuser.FieldOrgID, field.TypeInt, value)
	}
	if value, ok := oruu.mutation.AddedOrgID(); ok {
		_spec.AddField(orgroleuser.FieldOrgID, field.TypeInt, value)
	}
	if value, ok := oruu.mutation.UserID(); ok {
		_spec.SetField(orgroleuser.FieldUserID, field.TypeInt, value)
	}
	if value, ok := oruu.mutation.AddedUserID(); ok {
		_spec.AddField(orgroleuser.FieldUserID, field.TypeInt, value)
	}
	_spec.Node.Schema = oruu.schemaConfig.OrgRoleUser
	ctx = internal.NewSchemaConfigContext(ctx, oruu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, oruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgroleuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oruu.mutation.done = true
	return n, nil
}

// OrgRoleUserUpdateOne is the builder for updating a single OrgRoleUser entity.
type OrgRoleUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgRoleUserMutation
}

// SetOrgRoleID sets the "org_role_id" field.
func (oruuo *OrgRoleUserUpdateOne) SetOrgRoleID(i int) *OrgRoleUserUpdateOne {
	oruuo.mutation.ResetOrgRoleID()
	oruuo.mutation.SetOrgRoleID(i)
	return oruuo
}

// SetNillableOrgRoleID sets the "org_role_id" field if the given value is not nil.
func (oruuo *OrgRoleUserUpdateOne) SetNillableOrgRoleID(i *int) *OrgRoleUserUpdateOne {
	if i != nil {
		oruuo.SetOrgRoleID(*i)
	}
	return oruuo
}

// AddOrgRoleID adds i to the "org_role_id" field.
func (oruuo *OrgRoleUserUpdateOne) AddOrgRoleID(i int) *OrgRoleUserUpdateOne {
	oruuo.mutation.AddOrgRoleID(i)
	return oruuo
}

// SetOrgUserID sets the "org_user_id" field.
func (oruuo *OrgRoleUserUpdateOne) SetOrgUserID(i int) *OrgRoleUserUpdateOne {
	oruuo.mutation.ResetOrgUserID()
	oruuo.mutation.SetOrgUserID(i)
	return oruuo
}

// SetNillableOrgUserID sets the "org_user_id" field if the given value is not nil.
func (oruuo *OrgRoleUserUpdateOne) SetNillableOrgUserID(i *int) *OrgRoleUserUpdateOne {
	if i != nil {
		oruuo.SetOrgUserID(*i)
	}
	return oruuo
}

// AddOrgUserID adds i to the "org_user_id" field.
func (oruuo *OrgRoleUserUpdateOne) AddOrgUserID(i int) *OrgRoleUserUpdateOne {
	oruuo.mutation.AddOrgUserID(i)
	return oruuo
}

// SetOrgID sets the "org_id" field.
func (oruuo *OrgRoleUserUpdateOne) SetOrgID(i int) *OrgRoleUserUpdateOne {
	oruuo.mutation.ResetOrgID()
	oruuo.mutation.SetOrgID(i)
	return oruuo
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (oruuo *OrgRoleUserUpdateOne) SetNillableOrgID(i *int) *OrgRoleUserUpdateOne {
	if i != nil {
		oruuo.SetOrgID(*i)
	}
	return oruuo
}

// AddOrgID adds i to the "org_id" field.
func (oruuo *OrgRoleUserUpdateOne) AddOrgID(i int) *OrgRoleUserUpdateOne {
	oruuo.mutation.AddOrgID(i)
	return oruuo
}

// SetUserID sets the "user_id" field.
func (oruuo *OrgRoleUserUpdateOne) SetUserID(i int) *OrgRoleUserUpdateOne {
	oruuo.mutation.ResetUserID()
	oruuo.mutation.SetUserID(i)
	return oruuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oruuo *OrgRoleUserUpdateOne) SetNillableUserID(i *int) *OrgRoleUserUpdateOne {
	if i != nil {
		oruuo.SetUserID(*i)
	}
	return oruuo
}

// AddUserID adds i to the "user_id" field.
func (oruuo *OrgRoleUserUpdateOne) AddUserID(i int) *OrgRoleUserUpdateOne {
	oruuo.mutation.AddUserID(i)
	return oruuo
}

// Mutation returns the OrgRoleUserMutation object of the builder.
func (oruuo *OrgRoleUserUpdateOne) Mutation() *OrgRoleUserMutation {
	return oruuo.mutation
}

// Where appends a list predicates to the OrgRoleUserUpdate builder.
func (oruuo *OrgRoleUserUpdateOne) Where(ps ...predicate.OrgRoleUser) *OrgRoleUserUpdateOne {
	oruuo.mutation.Where(ps...)
	return oruuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruuo *OrgRoleUserUpdateOne) Select(field string, fields ...string) *OrgRoleUserUpdateOne {
	oruuo.fields = append([]string{field}, fields...)
	return oruuo
}

// Save executes the query and returns the updated OrgRoleUser entity.
func (oruuo *OrgRoleUserUpdateOne) Save(ctx context.Context) (*OrgRoleUser, error) {
	return withHooks(ctx, oruuo.sqlSave, oruuo.mutation, oruuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruuo *OrgRoleUserUpdateOne) SaveX(ctx context.Context) *OrgRoleUser {
	node, err := oruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruuo *OrgRoleUserUpdateOne) Exec(ctx context.Context) error {
	_, err := oruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruuo *OrgRoleUserUpdateOne) ExecX(ctx context.Context) {
	if err := oruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oruuo *OrgRoleUserUpdateOne) sqlSave(ctx context.Context) (_node *OrgRoleUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(orgroleuser.Table, orgroleuser.Columns, sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt))
	id, ok := oruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrgRoleUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgroleuser.FieldID)
		for _, f := range fields {
			if !orgroleuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orgroleuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruuo.mutation.OrgRoleID(); ok {
		_spec.SetField(orgroleuser.FieldOrgRoleID, field.TypeInt, value)
	}
	if value, ok := oruuo.mutation.AddedOrgRoleID(); ok {
		_spec.AddField(orgroleuser.FieldOrgRoleID, field.TypeInt, value)
	}
	if value, ok := oruuo.mutation.OrgUserID(); ok {
		_spec.SetField(orgroleuser.FieldOrgUserID, field.TypeInt, value)
	}
	if value, ok := oruuo.mutation.AddedOrgUserID(); ok {
		_spec.AddField(orgroleuser.FieldOrgUserID, field.TypeInt, value)
	}
	if value, ok := oruuo.mutation.OrgID(); ok {
		_spec.SetField(orgroleuser.FieldOrgID, field.TypeInt, value)
	}
	if value, ok := oruuo.mutation.AddedOrgID(); ok {
		_spec.AddField(orgroleuser.FieldOrgID, field.TypeInt, value)
	}
	if value, ok := oruuo.mutation.UserID(); ok {
		_spec.SetField(orgroleuser.FieldUserID, field.TypeInt, value)
	}
	if value, ok := oruuo.mutation.AddedUserID(); ok {
		_spec.AddField(orgroleuser.FieldUserID, field.TypeInt, value)
	}
	_spec.Node.Schema = oruuo.schemaConfig.OrgRoleUser
	ctx = internal.NewSchemaConfigContext(ctx, oruuo.schemaConfig)
	_node = &OrgRoleUser{config: oruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgroleuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruuo.mutation.done = true
	return _node, nil
}
