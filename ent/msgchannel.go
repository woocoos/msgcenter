// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/msgcenter/ent/msgchannel"
	"github.com/woocoos/msgcenter/pkg/profile"
)

// MsgChannel is the model entity for the MsgChannel schema.
type MsgChannel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 消息通道名称
	Name string `json:"name,omitempty"`
	// 组织ID
	TenantID int `json:"tenant_id,omitempty"`
	// 支持的消息模式:站内信,app推送,邮件,短信,微信等
	ReceiverType profile.ReceiverType `json:"receiver_type,omitempty"`
	// 状态
	Status typex.SimpleStatus `json:"status,omitempty"`
	// 通道配置Json格式
	Receiver *profile.Receiver `json:"receiver,omitempty"`
	// 备注
	Comments     string `json:"comments,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MsgChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msgchannel.FieldReceiver:
			values[i] = new([]byte)
		case msgchannel.FieldID, msgchannel.FieldCreatedBy, msgchannel.FieldUpdatedBy, msgchannel.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case msgchannel.FieldName, msgchannel.FieldReceiverType, msgchannel.FieldStatus, msgchannel.FieldComments:
			values[i] = new(sql.NullString)
		case msgchannel.FieldCreatedAt, msgchannel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MsgChannel fields.
func (mc *MsgChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msgchannel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mc.ID = int(value.Int64)
		case msgchannel.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mc.CreatedBy = int(value.Int64)
			}
		case msgchannel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mc.CreatedAt = value.Time
			}
		case msgchannel.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mc.UpdatedBy = int(value.Int64)
			}
		case msgchannel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mc.UpdatedAt = value.Time
			}
		case msgchannel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mc.Name = value.String
			}
		case msgchannel.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				mc.TenantID = int(value.Int64)
			}
		case msgchannel.FieldReceiverType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_type", values[i])
			} else if value.Valid {
				mc.ReceiverType = profile.ReceiverType(value.String)
			}
		case msgchannel.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mc.Status = typex.SimpleStatus(value.String)
			}
		case msgchannel.FieldReceiver:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field receiver", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &mc.Receiver); err != nil {
					return fmt.Errorf("unmarshal field receiver: %w", err)
				}
			}
		case msgchannel.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				mc.Comments = value.String
			}
		default:
			mc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MsgChannel.
// This includes values selected through modifiers, order, etc.
func (mc *MsgChannel) Value(name string) (ent.Value, error) {
	return mc.selectValues.Get(name)
}

// Update returns a builder for updating this MsgChannel.
// Note that you need to call MsgChannel.Unwrap() before calling this method if this MsgChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (mc *MsgChannel) Update() *MsgChannelUpdateOne {
	return NewMsgChannelClient(mc.config).UpdateOne(mc)
}

// Unwrap unwraps the MsgChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mc *MsgChannel) Unwrap() *MsgChannel {
	_tx, ok := mc.config.driver.(*txDriver)
	if !ok {
		panic("ent: MsgChannel is not a transactional entity")
	}
	mc.config.driver = _tx.drv
	return mc
}

// String implements the fmt.Stringer.
func (mc *MsgChannel) String() string {
	var builder strings.Builder
	builder.WriteString("MsgChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mc.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mc.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mc.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mc.Name)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", mc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("receiver_type=")
	builder.WriteString(fmt.Sprintf("%v", mc.ReceiverType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mc.Status))
	builder.WriteString(", ")
	builder.WriteString("receiver=")
	builder.WriteString(fmt.Sprintf("%v", mc.Receiver))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(mc.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// MsgChannels is a parsable slice of MsgChannel.
type MsgChannels []*MsgChannel
