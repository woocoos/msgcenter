// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/msgcenter/ent/msgalert"
	"github.com/woocoos/msgcenter/pkg/alert"
	"github.com/woocoos/msgcenter/pkg/label"
)

// MsgAlert is the model entity for the MsgAlert schema.
type MsgAlert struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// 标签
	Labels *label.LabelSet `json:"labels,omitempty"`
	// 注解
	Annotations *label.LabelSet `json:"annotations,omitempty"`
	// 开始时间
	StartsAt time.Time `json:"starts_at,omitempty"`
	// 结束时间
	EndsAt time.Time `json:"ends_at,omitempty"`
	// generatorURL
	URL string `json:"url,omitempty"`
	// 状态
	Timeout bool `json:"timeout,omitempty"`
	// 指纹hash值
	Fingerprint string `json:"fingerprint,omitempty"`
	// 通知状态,firing: 触发通知,resolved: 已处理过
	State alert.AlertStatus `json:"state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 是否移除
	Deleted bool `json:"deleted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MsgAlertQuery when eager-loading is set.
	Edges        MsgAlertEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MsgAlertEdges holds the relations/edges for other nodes in the graph.
type MsgAlertEdges struct {
	// Nlog holds the value of the nlog edge.
	Nlog []*Nlog `json:"nlog,omitempty"`
	// NlogAlerts holds the value of the nlog_alerts edge.
	NlogAlerts []*NlogAlert `json:"nlog_alerts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedNlog       map[string][]*Nlog
	namedNlogAlerts map[string][]*NlogAlert
}

// NlogOrErr returns the Nlog value or an error if the edge
// was not loaded in eager-loading.
func (e MsgAlertEdges) NlogOrErr() ([]*Nlog, error) {
	if e.loadedTypes[0] {
		return e.Nlog, nil
	}
	return nil, &NotLoadedError{edge: "nlog"}
}

// NlogAlertsOrErr returns the NlogAlerts value or an error if the edge
// was not loaded in eager-loading.
func (e MsgAlertEdges) NlogAlertsOrErr() ([]*NlogAlert, error) {
	if e.loadedTypes[1] {
		return e.NlogAlerts, nil
	}
	return nil, &NotLoadedError{edge: "nlog_alerts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MsgAlert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msgalert.FieldLabels, msgalert.FieldAnnotations:
			values[i] = new([]byte)
		case msgalert.FieldTimeout, msgalert.FieldDeleted:
			values[i] = new(sql.NullBool)
		case msgalert.FieldID, msgalert.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case msgalert.FieldURL, msgalert.FieldFingerprint, msgalert.FieldState:
			values[i] = new(sql.NullString)
		case msgalert.FieldStartsAt, msgalert.FieldEndsAt, msgalert.FieldCreatedAt, msgalert.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MsgAlert fields.
func (ma *MsgAlert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msgalert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ma.ID = int(value.Int64)
		case msgalert.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ma.TenantID = int(value.Int64)
			}
		case msgalert.FieldLabels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field labels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ma.Labels); err != nil {
					return fmt.Errorf("unmarshal field labels: %w", err)
				}
			}
		case msgalert.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ma.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case msgalert.FieldStartsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field starts_at", values[i])
			} else if value.Valid {
				ma.StartsAt = value.Time
			}
		case msgalert.FieldEndsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ends_at", values[i])
			} else if value.Valid {
				ma.EndsAt = value.Time
			}
		case msgalert.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				ma.URL = value.String
			}
		case msgalert.FieldTimeout:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				ma.Timeout = value.Bool
			}
		case msgalert.FieldFingerprint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fingerprint", values[i])
			} else if value.Valid {
				ma.Fingerprint = value.String
			}
		case msgalert.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ma.State = alert.AlertStatus(value.String)
			}
		case msgalert.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ma.CreatedAt = value.Time
			}
		case msgalert.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ma.UpdatedAt = value.Time
			}
		case msgalert.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				ma.Deleted = value.Bool
			}
		default:
			ma.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MsgAlert.
// This includes values selected through modifiers, order, etc.
func (ma *MsgAlert) Value(name string) (ent.Value, error) {
	return ma.selectValues.Get(name)
}

// QueryNlog queries the "nlog" edge of the MsgAlert entity.
func (ma *MsgAlert) QueryNlog() *NlogQuery {
	return NewMsgAlertClient(ma.config).QueryNlog(ma)
}

// QueryNlogAlerts queries the "nlog_alerts" edge of the MsgAlert entity.
func (ma *MsgAlert) QueryNlogAlerts() *NlogAlertQuery {
	return NewMsgAlertClient(ma.config).QueryNlogAlerts(ma)
}

// Update returns a builder for updating this MsgAlert.
// Note that you need to call MsgAlert.Unwrap() before calling this method if this MsgAlert
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MsgAlert) Update() *MsgAlertUpdateOne {
	return NewMsgAlertClient(ma.config).UpdateOne(ma)
}

// Unwrap unwraps the MsgAlert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ma *MsgAlert) Unwrap() *MsgAlert {
	_tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MsgAlert is not a transactional entity")
	}
	ma.config.driver = _tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MsgAlert) String() string {
	var builder strings.Builder
	builder.WriteString("MsgAlert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ma.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ma.TenantID))
	builder.WriteString(", ")
	builder.WriteString("labels=")
	builder.WriteString(fmt.Sprintf("%v", ma.Labels))
	builder.WriteString(", ")
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", ma.Annotations))
	builder.WriteString(", ")
	builder.WriteString("starts_at=")
	builder.WriteString(ma.StartsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ends_at=")
	builder.WriteString(ma.EndsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(ma.URL)
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(fmt.Sprintf("%v", ma.Timeout))
	builder.WriteString(", ")
	builder.WriteString("fingerprint=")
	builder.WriteString(ma.Fingerprint)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", ma.State))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ma.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ma.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", ma.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// NamedNlog returns the Nlog named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ma *MsgAlert) NamedNlog(name string) ([]*Nlog, error) {
	if ma.Edges.namedNlog == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ma.Edges.namedNlog[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ma *MsgAlert) appendNamedNlog(name string, edges ...*Nlog) {
	if ma.Edges.namedNlog == nil {
		ma.Edges.namedNlog = make(map[string][]*Nlog)
	}
	if len(edges) == 0 {
		ma.Edges.namedNlog[name] = []*Nlog{}
	} else {
		ma.Edges.namedNlog[name] = append(ma.Edges.namedNlog[name], edges...)
	}
}

// NamedNlogAlerts returns the NlogAlerts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ma *MsgAlert) NamedNlogAlerts(name string) ([]*NlogAlert, error) {
	if ma.Edges.namedNlogAlerts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ma.Edges.namedNlogAlerts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ma *MsgAlert) appendNamedNlogAlerts(name string, edges ...*NlogAlert) {
	if ma.Edges.namedNlogAlerts == nil {
		ma.Edges.namedNlogAlerts = make(map[string][]*NlogAlert)
	}
	if len(edges) == 0 {
		ma.Edges.namedNlogAlerts[name] = []*NlogAlert{}
	} else {
		ma.Edges.namedNlogAlerts[name] = append(ma.Edges.namedNlogAlerts[name], edges...)
	}
}

// MsgAlerts is a parsable slice of MsgAlert.
type MsgAlerts []*MsgAlert
