// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/msgcenter/ent/msgalert"
	"github.com/woocoos/msgcenter/ent/nlog"
	"github.com/woocoos/msgcenter/ent/nlogalert"
)

// NlogAlert is the model entity for the NlogAlert schema.
type NlogAlert struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// nlog id
	NlogID int `json:"nlog_id,omitempty"`
	// alert id
	AlertID int `json:"alert_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NlogAlertQuery when eager-loading is set.
	Edges        NlogAlertEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NlogAlertEdges holds the relations/edges for other nodes in the graph.
type NlogAlertEdges struct {
	// Nlog holds the value of the nlog edge.
	Nlog *Nlog `json:"nlog,omitempty"`
	// Alert holds the value of the alert edge.
	Alert *MsgAlert `json:"alert,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// NlogOrErr returns the Nlog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NlogAlertEdges) NlogOrErr() (*Nlog, error) {
	if e.Nlog != nil {
		return e.Nlog, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: nlog.Label}
	}
	return nil, &NotLoadedError{edge: "nlog"}
}

// AlertOrErr returns the Alert value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NlogAlertEdges) AlertOrErr() (*MsgAlert, error) {
	if e.Alert != nil {
		return e.Alert, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: msgalert.Label}
	}
	return nil, &NotLoadedError{edge: "alert"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NlogAlert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nlogalert.FieldID, nlogalert.FieldNlogID, nlogalert.FieldAlertID:
			values[i] = new(sql.NullInt64)
		case nlogalert.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NlogAlert fields.
func (na *NlogAlert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nlogalert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			na.ID = int(value.Int64)
		case nlogalert.FieldNlogID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nlog_id", values[i])
			} else if value.Valid {
				na.NlogID = int(value.Int64)
			}
		case nlogalert.FieldAlertID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alert_id", values[i])
			} else if value.Valid {
				na.AlertID = int(value.Int64)
			}
		case nlogalert.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				na.CreatedAt = value.Time
			}
		default:
			na.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NlogAlert.
// This includes values selected through modifiers, order, etc.
func (na *NlogAlert) Value(name string) (ent.Value, error) {
	return na.selectValues.Get(name)
}

// QueryNlog queries the "nlog" edge of the NlogAlert entity.
func (na *NlogAlert) QueryNlog() *NlogQuery {
	return NewNlogAlertClient(na.config).QueryNlog(na)
}

// QueryAlert queries the "alert" edge of the NlogAlert entity.
func (na *NlogAlert) QueryAlert() *MsgAlertQuery {
	return NewNlogAlertClient(na.config).QueryAlert(na)
}

// Update returns a builder for updating this NlogAlert.
// Note that you need to call NlogAlert.Unwrap() before calling this method if this NlogAlert
// was returned from a transaction, and the transaction was committed or rolled back.
func (na *NlogAlert) Update() *NlogAlertUpdateOne {
	return NewNlogAlertClient(na.config).UpdateOne(na)
}

// Unwrap unwraps the NlogAlert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (na *NlogAlert) Unwrap() *NlogAlert {
	_tx, ok := na.config.driver.(*txDriver)
	if !ok {
		panic("ent: NlogAlert is not a transactional entity")
	}
	na.config.driver = _tx.drv
	return na
}

// String implements the fmt.Stringer.
func (na *NlogAlert) String() string {
	var builder strings.Builder
	builder.WriteString("NlogAlert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", na.ID))
	builder.WriteString("nlog_id=")
	builder.WriteString(fmt.Sprintf("%v", na.NlogID))
	builder.WriteString(", ")
	builder.WriteString("alert_id=")
	builder.WriteString(fmt.Sprintf("%v", na.AlertID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(na.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NlogAlerts is a parsable slice of NlogAlert.
type NlogAlerts []*NlogAlert
