// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/predicate"
	"github.com/woocoos/msgcenter/ent/silence"
	"github.com/woocoos/msgcenter/pkg/alert"
	"github.com/woocoos/msgcenter/pkg/label"

	"github.com/woocoos/msgcenter/ent/internal"
)

// SilenceUpdate is the builder for updating Silence entities.
type SilenceUpdate struct {
	config
	hooks    []Hook
	mutation *SilenceMutation
}

// Where appends a list predicates to the SilenceUpdate builder.
func (su *SilenceUpdate) Where(ps ...predicate.Silence) *SilenceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SilenceUpdate) SetUpdatedBy(i int) *SilenceUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SilenceUpdate) SetNillableUpdatedBy(i *int) *SilenceUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *SilenceUpdate) AddUpdatedBy(i int) *SilenceUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SilenceUpdate) ClearUpdatedBy() *SilenceUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SilenceUpdate) SetUpdatedAt(t time.Time) *SilenceUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *SilenceUpdate) SetNillableUpdatedAt(t *time.Time) *SilenceUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SilenceUpdate) ClearUpdatedAt() *SilenceUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetMatchers sets the "matchers" field.
func (su *SilenceUpdate) SetMatchers(l []*label.Matcher) *SilenceUpdate {
	su.mutation.SetMatchers(l)
	return su
}

// AppendMatchers appends l to the "matchers" field.
func (su *SilenceUpdate) AppendMatchers(l []*label.Matcher) *SilenceUpdate {
	su.mutation.AppendMatchers(l)
	return su
}

// ClearMatchers clears the value of the "matchers" field.
func (su *SilenceUpdate) ClearMatchers() *SilenceUpdate {
	su.mutation.ClearMatchers()
	return su
}

// SetStartsAt sets the "starts_at" field.
func (su *SilenceUpdate) SetStartsAt(t time.Time) *SilenceUpdate {
	su.mutation.SetStartsAt(t)
	return su
}

// SetEndsAt sets the "ends_at" field.
func (su *SilenceUpdate) SetEndsAt(t time.Time) *SilenceUpdate {
	su.mutation.SetEndsAt(t)
	return su
}

// SetComments sets the "comments" field.
func (su *SilenceUpdate) SetComments(s string) *SilenceUpdate {
	su.mutation.SetComments(s)
	return su
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (su *SilenceUpdate) SetNillableComments(s *string) *SilenceUpdate {
	if s != nil {
		su.SetComments(*s)
	}
	return su
}

// ClearComments clears the value of the "comments" field.
func (su *SilenceUpdate) ClearComments() *SilenceUpdate {
	su.mutation.ClearComments()
	return su
}

// SetState sets the "state" field.
func (su *SilenceUpdate) SetState(as alert.SilenceState) *SilenceUpdate {
	su.mutation.SetState(as)
	return su
}

// SetNillableState sets the "state" field if the given value is not nil.
func (su *SilenceUpdate) SetNillableState(as *alert.SilenceState) *SilenceUpdate {
	if as != nil {
		su.SetState(*as)
	}
	return su
}

// Mutation returns the SilenceMutation object of the builder.
func (su *SilenceUpdate) Mutation() *SilenceMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SilenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SilenceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SilenceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SilenceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SilenceUpdate) check() error {
	if v, ok := su.mutation.State(); ok {
		if err := silence.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Silence.state": %w`, err)}
		}
	}
	if _, ok := su.mutation.UserID(); su.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Silence.user"`)
	}
	return nil
}

func (su *SilenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(silence.Table, silence.Columns, sqlgraph.NewFieldSpec(silence.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(silence.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(silence.FieldUpdatedBy, field.TypeInt, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(silence.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(silence.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(silence.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Matchers(); ok {
		_spec.SetField(silence.FieldMatchers, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedMatchers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, silence.FieldMatchers, value)
		})
	}
	if su.mutation.MatchersCleared() {
		_spec.ClearField(silence.FieldMatchers, field.TypeJSON)
	}
	if value, ok := su.mutation.StartsAt(); ok {
		_spec.SetField(silence.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.EndsAt(); ok {
		_spec.SetField(silence.FieldEndsAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Comments(); ok {
		_spec.SetField(silence.FieldComments, field.TypeString, value)
	}
	if su.mutation.CommentsCleared() {
		_spec.ClearField(silence.FieldComments, field.TypeString)
	}
	if value, ok := su.mutation.State(); ok {
		_spec.SetField(silence.FieldState, field.TypeEnum, value)
	}
	_spec.Node.Schema = su.schemaConfig.Silence
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{silence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SilenceUpdateOne is the builder for updating a single Silence entity.
type SilenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SilenceMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SilenceUpdateOne) SetUpdatedBy(i int) *SilenceUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SilenceUpdateOne) SetNillableUpdatedBy(i *int) *SilenceUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *SilenceUpdateOne) AddUpdatedBy(i int) *SilenceUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SilenceUpdateOne) ClearUpdatedBy() *SilenceUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SilenceUpdateOne) SetUpdatedAt(t time.Time) *SilenceUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *SilenceUpdateOne) SetNillableUpdatedAt(t *time.Time) *SilenceUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SilenceUpdateOne) ClearUpdatedAt() *SilenceUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetMatchers sets the "matchers" field.
func (suo *SilenceUpdateOne) SetMatchers(l []*label.Matcher) *SilenceUpdateOne {
	suo.mutation.SetMatchers(l)
	return suo
}

// AppendMatchers appends l to the "matchers" field.
func (suo *SilenceUpdateOne) AppendMatchers(l []*label.Matcher) *SilenceUpdateOne {
	suo.mutation.AppendMatchers(l)
	return suo
}

// ClearMatchers clears the value of the "matchers" field.
func (suo *SilenceUpdateOne) ClearMatchers() *SilenceUpdateOne {
	suo.mutation.ClearMatchers()
	return suo
}

// SetStartsAt sets the "starts_at" field.
func (suo *SilenceUpdateOne) SetStartsAt(t time.Time) *SilenceUpdateOne {
	suo.mutation.SetStartsAt(t)
	return suo
}

// SetEndsAt sets the "ends_at" field.
func (suo *SilenceUpdateOne) SetEndsAt(t time.Time) *SilenceUpdateOne {
	suo.mutation.SetEndsAt(t)
	return suo
}

// SetComments sets the "comments" field.
func (suo *SilenceUpdateOne) SetComments(s string) *SilenceUpdateOne {
	suo.mutation.SetComments(s)
	return suo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (suo *SilenceUpdateOne) SetNillableComments(s *string) *SilenceUpdateOne {
	if s != nil {
		suo.SetComments(*s)
	}
	return suo
}

// ClearComments clears the value of the "comments" field.
func (suo *SilenceUpdateOne) ClearComments() *SilenceUpdateOne {
	suo.mutation.ClearComments()
	return suo
}

// SetState sets the "state" field.
func (suo *SilenceUpdateOne) SetState(as alert.SilenceState) *SilenceUpdateOne {
	suo.mutation.SetState(as)
	return suo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (suo *SilenceUpdateOne) SetNillableState(as *alert.SilenceState) *SilenceUpdateOne {
	if as != nil {
		suo.SetState(*as)
	}
	return suo
}

// Mutation returns the SilenceMutation object of the builder.
func (suo *SilenceUpdateOne) Mutation() *SilenceMutation {
	return suo.mutation
}

// Where appends a list predicates to the SilenceUpdate builder.
func (suo *SilenceUpdateOne) Where(ps ...predicate.Silence) *SilenceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SilenceUpdateOne) Select(field string, fields ...string) *SilenceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Silence entity.
func (suo *SilenceUpdateOne) Save(ctx context.Context) (*Silence, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SilenceUpdateOne) SaveX(ctx context.Context) *Silence {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SilenceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SilenceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SilenceUpdateOne) check() error {
	if v, ok := suo.mutation.State(); ok {
		if err := silence.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Silence.state": %w`, err)}
		}
	}
	if _, ok := suo.mutation.UserID(); suo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Silence.user"`)
	}
	return nil
}

func (suo *SilenceUpdateOne) sqlSave(ctx context.Context) (_node *Silence, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(silence.Table, silence.Columns, sqlgraph.NewFieldSpec(silence.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Silence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, silence.FieldID)
		for _, f := range fields {
			if !silence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != silence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(silence.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(silence.FieldUpdatedBy, field.TypeInt, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(silence.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(silence.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(silence.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Matchers(); ok {
		_spec.SetField(silence.FieldMatchers, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedMatchers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, silence.FieldMatchers, value)
		})
	}
	if suo.mutation.MatchersCleared() {
		_spec.ClearField(silence.FieldMatchers, field.TypeJSON)
	}
	if value, ok := suo.mutation.StartsAt(); ok {
		_spec.SetField(silence.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.EndsAt(); ok {
		_spec.SetField(silence.FieldEndsAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Comments(); ok {
		_spec.SetField(silence.FieldComments, field.TypeString, value)
	}
	if suo.mutation.CommentsCleared() {
		_spec.ClearField(silence.FieldComments, field.TypeString)
	}
	if value, ok := suo.mutation.State(); ok {
		_spec.SetField(silence.FieldState, field.TypeEnum, value)
	}
	_spec.Node.Schema = suo.schemaConfig.Silence
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_node = &Silence{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{silence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
