// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/msgcenter/ent/msgchannel"
	"github.com/woocoos/msgcenter/ent/predicate"
	"github.com/woocoos/msgcenter/pkg/profile"
)

// MsgChannelUpdate is the builder for updating MsgChannel entities.
type MsgChannelUpdate struct {
	config
	hooks    []Hook
	mutation *MsgChannelMutation
}

// Where appends a list predicates to the MsgChannelUpdate builder.
func (mcu *MsgChannelUpdate) Where(ps ...predicate.MsgChannel) *MsgChannelUpdate {
	mcu.mutation.Where(ps...)
	return mcu
}

// SetUpdatedBy sets the "updated_by" field.
func (mcu *MsgChannelUpdate) SetUpdatedBy(i int) *MsgChannelUpdate {
	mcu.mutation.ResetUpdatedBy()
	mcu.mutation.SetUpdatedBy(i)
	return mcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcu *MsgChannelUpdate) SetNillableUpdatedBy(i *int) *MsgChannelUpdate {
	if i != nil {
		mcu.SetUpdatedBy(*i)
	}
	return mcu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mcu *MsgChannelUpdate) AddUpdatedBy(i int) *MsgChannelUpdate {
	mcu.mutation.AddUpdatedBy(i)
	return mcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mcu *MsgChannelUpdate) ClearUpdatedBy() *MsgChannelUpdate {
	mcu.mutation.ClearUpdatedBy()
	return mcu
}

// SetUpdatedAt sets the "updated_at" field.
func (mcu *MsgChannelUpdate) SetUpdatedAt(t time.Time) *MsgChannelUpdate {
	mcu.mutation.SetUpdatedAt(t)
	return mcu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mcu *MsgChannelUpdate) SetNillableUpdatedAt(t *time.Time) *MsgChannelUpdate {
	if t != nil {
		mcu.SetUpdatedAt(*t)
	}
	return mcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mcu *MsgChannelUpdate) ClearUpdatedAt() *MsgChannelUpdate {
	mcu.mutation.ClearUpdatedAt()
	return mcu
}

// SetName sets the "name" field.
func (mcu *MsgChannelUpdate) SetName(s string) *MsgChannelUpdate {
	mcu.mutation.SetName(s)
	return mcu
}

// SetTenantID sets the "tenant_id" field.
func (mcu *MsgChannelUpdate) SetTenantID(i int) *MsgChannelUpdate {
	mcu.mutation.ResetTenantID()
	mcu.mutation.SetTenantID(i)
	return mcu
}

// AddTenantID adds i to the "tenant_id" field.
func (mcu *MsgChannelUpdate) AddTenantID(i int) *MsgChannelUpdate {
	mcu.mutation.AddTenantID(i)
	return mcu
}

// SetReceiverType sets the "receiver_type" field.
func (mcu *MsgChannelUpdate) SetReceiverType(pt profile.ReceiverType) *MsgChannelUpdate {
	mcu.mutation.SetReceiverType(pt)
	return mcu
}

// SetStatus sets the "status" field.
func (mcu *MsgChannelUpdate) SetStatus(ts typex.SimpleStatus) *MsgChannelUpdate {
	mcu.mutation.SetStatus(ts)
	return mcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcu *MsgChannelUpdate) SetNillableStatus(ts *typex.SimpleStatus) *MsgChannelUpdate {
	if ts != nil {
		mcu.SetStatus(*ts)
	}
	return mcu
}

// ClearStatus clears the value of the "status" field.
func (mcu *MsgChannelUpdate) ClearStatus() *MsgChannelUpdate {
	mcu.mutation.ClearStatus()
	return mcu
}

// SetReceiver sets the "receiver" field.
func (mcu *MsgChannelUpdate) SetReceiver(pr *profile.Receiver) *MsgChannelUpdate {
	mcu.mutation.SetReceiver(pr)
	return mcu
}

// ClearReceiver clears the value of the "receiver" field.
func (mcu *MsgChannelUpdate) ClearReceiver() *MsgChannelUpdate {
	mcu.mutation.ClearReceiver()
	return mcu
}

// SetComments sets the "comments" field.
func (mcu *MsgChannelUpdate) SetComments(s string) *MsgChannelUpdate {
	mcu.mutation.SetComments(s)
	return mcu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (mcu *MsgChannelUpdate) SetNillableComments(s *string) *MsgChannelUpdate {
	if s != nil {
		mcu.SetComments(*s)
	}
	return mcu
}

// ClearComments clears the value of the "comments" field.
func (mcu *MsgChannelUpdate) ClearComments() *MsgChannelUpdate {
	mcu.mutation.ClearComments()
	return mcu
}

// Mutation returns the MsgChannelMutation object of the builder.
func (mcu *MsgChannelUpdate) Mutation() *MsgChannelMutation {
	return mcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcu *MsgChannelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mcu.sqlSave, mcu.mutation, mcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MsgChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MsgChannelUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MsgChannelUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcu *MsgChannelUpdate) check() error {
	if v, ok := mcu.mutation.Name(); ok {
		if err := msgchannel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.name": %w`, err)}
		}
	}
	if v, ok := mcu.mutation.ReceiverType(); ok {
		if err := msgchannel.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.receiver_type": %w`, err)}
		}
	}
	if v, ok := mcu.mutation.Status(); ok {
		if err := msgchannel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.status": %w`, err)}
		}
	}
	return nil
}

func (mcu *MsgChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(msgchannel.Table, msgchannel.Columns, sqlgraph.NewFieldSpec(msgchannel.FieldID, field.TypeInt))
	if ps := mcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcu.mutation.UpdatedBy(); ok {
		_spec.SetField(msgchannel.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := mcu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(msgchannel.FieldUpdatedBy, field.TypeInt, value)
	}
	if mcu.mutation.UpdatedByCleared() {
		_spec.ClearField(msgchannel.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := mcu.mutation.UpdatedAt(); ok {
		_spec.SetField(msgchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if mcu.mutation.UpdatedAtCleared() {
		_spec.ClearField(msgchannel.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mcu.mutation.Name(); ok {
		_spec.SetField(msgchannel.FieldName, field.TypeString, value)
	}
	if value, ok := mcu.mutation.TenantID(); ok {
		_spec.SetField(msgchannel.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := mcu.mutation.AddedTenantID(); ok {
		_spec.AddField(msgchannel.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := mcu.mutation.ReceiverType(); ok {
		_spec.SetField(msgchannel.FieldReceiverType, field.TypeEnum, value)
	}
	if value, ok := mcu.mutation.Status(); ok {
		_spec.SetField(msgchannel.FieldStatus, field.TypeEnum, value)
	}
	if mcu.mutation.StatusCleared() {
		_spec.ClearField(msgchannel.FieldStatus, field.TypeEnum)
	}
	if value, ok := mcu.mutation.Receiver(); ok {
		_spec.SetField(msgchannel.FieldReceiver, field.TypeJSON, value)
	}
	if mcu.mutation.ReceiverCleared() {
		_spec.ClearField(msgchannel.FieldReceiver, field.TypeJSON)
	}
	if value, ok := mcu.mutation.Comments(); ok {
		_spec.SetField(msgchannel.FieldComments, field.TypeString, value)
	}
	if mcu.mutation.CommentsCleared() {
		_spec.ClearField(msgchannel.FieldComments, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mcu.mutation.done = true
	return n, nil
}

// MsgChannelUpdateOne is the builder for updating a single MsgChannel entity.
type MsgChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgChannelMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (mcuo *MsgChannelUpdateOne) SetUpdatedBy(i int) *MsgChannelUpdateOne {
	mcuo.mutation.ResetUpdatedBy()
	mcuo.mutation.SetUpdatedBy(i)
	return mcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mcuo *MsgChannelUpdateOne) SetNillableUpdatedBy(i *int) *MsgChannelUpdateOne {
	if i != nil {
		mcuo.SetUpdatedBy(*i)
	}
	return mcuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mcuo *MsgChannelUpdateOne) AddUpdatedBy(i int) *MsgChannelUpdateOne {
	mcuo.mutation.AddUpdatedBy(i)
	return mcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mcuo *MsgChannelUpdateOne) ClearUpdatedBy() *MsgChannelUpdateOne {
	mcuo.mutation.ClearUpdatedBy()
	return mcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mcuo *MsgChannelUpdateOne) SetUpdatedAt(t time.Time) *MsgChannelUpdateOne {
	mcuo.mutation.SetUpdatedAt(t)
	return mcuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mcuo *MsgChannelUpdateOne) SetNillableUpdatedAt(t *time.Time) *MsgChannelUpdateOne {
	if t != nil {
		mcuo.SetUpdatedAt(*t)
	}
	return mcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mcuo *MsgChannelUpdateOne) ClearUpdatedAt() *MsgChannelUpdateOne {
	mcuo.mutation.ClearUpdatedAt()
	return mcuo
}

// SetName sets the "name" field.
func (mcuo *MsgChannelUpdateOne) SetName(s string) *MsgChannelUpdateOne {
	mcuo.mutation.SetName(s)
	return mcuo
}

// SetTenantID sets the "tenant_id" field.
func (mcuo *MsgChannelUpdateOne) SetTenantID(i int) *MsgChannelUpdateOne {
	mcuo.mutation.ResetTenantID()
	mcuo.mutation.SetTenantID(i)
	return mcuo
}

// AddTenantID adds i to the "tenant_id" field.
func (mcuo *MsgChannelUpdateOne) AddTenantID(i int) *MsgChannelUpdateOne {
	mcuo.mutation.AddTenantID(i)
	return mcuo
}

// SetReceiverType sets the "receiver_type" field.
func (mcuo *MsgChannelUpdateOne) SetReceiverType(pt profile.ReceiverType) *MsgChannelUpdateOne {
	mcuo.mutation.SetReceiverType(pt)
	return mcuo
}

// SetStatus sets the "status" field.
func (mcuo *MsgChannelUpdateOne) SetStatus(ts typex.SimpleStatus) *MsgChannelUpdateOne {
	mcuo.mutation.SetStatus(ts)
	return mcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcuo *MsgChannelUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *MsgChannelUpdateOne {
	if ts != nil {
		mcuo.SetStatus(*ts)
	}
	return mcuo
}

// ClearStatus clears the value of the "status" field.
func (mcuo *MsgChannelUpdateOne) ClearStatus() *MsgChannelUpdateOne {
	mcuo.mutation.ClearStatus()
	return mcuo
}

// SetReceiver sets the "receiver" field.
func (mcuo *MsgChannelUpdateOne) SetReceiver(pr *profile.Receiver) *MsgChannelUpdateOne {
	mcuo.mutation.SetReceiver(pr)
	return mcuo
}

// ClearReceiver clears the value of the "receiver" field.
func (mcuo *MsgChannelUpdateOne) ClearReceiver() *MsgChannelUpdateOne {
	mcuo.mutation.ClearReceiver()
	return mcuo
}

// SetComments sets the "comments" field.
func (mcuo *MsgChannelUpdateOne) SetComments(s string) *MsgChannelUpdateOne {
	mcuo.mutation.SetComments(s)
	return mcuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (mcuo *MsgChannelUpdateOne) SetNillableComments(s *string) *MsgChannelUpdateOne {
	if s != nil {
		mcuo.SetComments(*s)
	}
	return mcuo
}

// ClearComments clears the value of the "comments" field.
func (mcuo *MsgChannelUpdateOne) ClearComments() *MsgChannelUpdateOne {
	mcuo.mutation.ClearComments()
	return mcuo
}

// Mutation returns the MsgChannelMutation object of the builder.
func (mcuo *MsgChannelUpdateOne) Mutation() *MsgChannelMutation {
	return mcuo.mutation
}

// Where appends a list predicates to the MsgChannelUpdate builder.
func (mcuo *MsgChannelUpdateOne) Where(ps ...predicate.MsgChannel) *MsgChannelUpdateOne {
	mcuo.mutation.Where(ps...)
	return mcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcuo *MsgChannelUpdateOne) Select(field string, fields ...string) *MsgChannelUpdateOne {
	mcuo.fields = append([]string{field}, fields...)
	return mcuo
}

// Save executes the query and returns the updated MsgChannel entity.
func (mcuo *MsgChannelUpdateOne) Save(ctx context.Context) (*MsgChannel, error) {
	return withHooks(ctx, mcuo.sqlSave, mcuo.mutation, mcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MsgChannelUpdateOne) SaveX(ctx context.Context) *MsgChannel {
	node, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcuo *MsgChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MsgChannelUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcuo *MsgChannelUpdateOne) check() error {
	if v, ok := mcuo.mutation.Name(); ok {
		if err := msgchannel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.name": %w`, err)}
		}
	}
	if v, ok := mcuo.mutation.ReceiverType(); ok {
		if err := msgchannel.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.receiver_type": %w`, err)}
		}
	}
	if v, ok := mcuo.mutation.Status(); ok {
		if err := msgchannel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MsgChannel.status": %w`, err)}
		}
	}
	return nil
}

func (mcuo *MsgChannelUpdateOne) sqlSave(ctx context.Context) (_node *MsgChannel, err error) {
	if err := mcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(msgchannel.Table, msgchannel.Columns, sqlgraph.NewFieldSpec(msgchannel.FieldID, field.TypeInt))
	id, ok := mcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msgchannel.FieldID)
		for _, f := range fields {
			if !msgchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msgchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(msgchannel.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := mcuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(msgchannel.FieldUpdatedBy, field.TypeInt, value)
	}
	if mcuo.mutation.UpdatedByCleared() {
		_spec.ClearField(msgchannel.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := mcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(msgchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if mcuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(msgchannel.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mcuo.mutation.Name(); ok {
		_spec.SetField(msgchannel.FieldName, field.TypeString, value)
	}
	if value, ok := mcuo.mutation.TenantID(); ok {
		_spec.SetField(msgchannel.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := mcuo.mutation.AddedTenantID(); ok {
		_spec.AddField(msgchannel.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := mcuo.mutation.ReceiverType(); ok {
		_spec.SetField(msgchannel.FieldReceiverType, field.TypeEnum, value)
	}
	if value, ok := mcuo.mutation.Status(); ok {
		_spec.SetField(msgchannel.FieldStatus, field.TypeEnum, value)
	}
	if mcuo.mutation.StatusCleared() {
		_spec.ClearField(msgchannel.FieldStatus, field.TypeEnum)
	}
	if value, ok := mcuo.mutation.Receiver(); ok {
		_spec.SetField(msgchannel.FieldReceiver, field.TypeJSON, value)
	}
	if mcuo.mutation.ReceiverCleared() {
		_spec.ClearField(msgchannel.FieldReceiver, field.TypeJSON)
	}
	if value, ok := mcuo.mutation.Comments(); ok {
		_spec.SetField(msgchannel.FieldComments, field.TypeString, value)
	}
	if mcuo.mutation.CommentsCleared() {
		_spec.ClearField(msgchannel.FieldComments, field.TypeString)
	}
	_node = &MsgChannel{config: mcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mcuo.mutation.done = true
	return _node, nil
}
