// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msginternalto"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// MsgInternalToUpdate is the builder for updating MsgInternalTo entities.
type MsgInternalToUpdate struct {
	config
	hooks    []Hook
	mutation *MsgInternalToMutation
}

// Where appends a list predicates to the MsgInternalToUpdate builder.
func (mitu *MsgInternalToUpdate) Where(ps ...predicate.MsgInternalTo) *MsgInternalToUpdate {
	mitu.mutation.Where(ps...)
	return mitu
}

// SetReadAt sets the "read_at" field.
func (mitu *MsgInternalToUpdate) SetReadAt(t time.Time) *MsgInternalToUpdate {
	mitu.mutation.SetReadAt(t)
	return mitu
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (mitu *MsgInternalToUpdate) SetNillableReadAt(t *time.Time) *MsgInternalToUpdate {
	if t != nil {
		mitu.SetReadAt(*t)
	}
	return mitu
}

// ClearReadAt clears the value of the "read_at" field.
func (mitu *MsgInternalToUpdate) ClearReadAt() *MsgInternalToUpdate {
	mitu.mutation.ClearReadAt()
	return mitu
}

// SetDeleteAt sets the "delete_at" field.
func (mitu *MsgInternalToUpdate) SetDeleteAt(t time.Time) *MsgInternalToUpdate {
	mitu.mutation.SetDeleteAt(t)
	return mitu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mitu *MsgInternalToUpdate) SetNillableDeleteAt(t *time.Time) *MsgInternalToUpdate {
	if t != nil {
		mitu.SetDeleteAt(*t)
	}
	return mitu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (mitu *MsgInternalToUpdate) ClearDeleteAt() *MsgInternalToUpdate {
	mitu.mutation.ClearDeleteAt()
	return mitu
}

// Mutation returns the MsgInternalToMutation object of the builder.
func (mitu *MsgInternalToUpdate) Mutation() *MsgInternalToMutation {
	return mitu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mitu *MsgInternalToUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mitu.sqlSave, mitu.mutation, mitu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mitu *MsgInternalToUpdate) SaveX(ctx context.Context) int {
	affected, err := mitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mitu *MsgInternalToUpdate) Exec(ctx context.Context) error {
	_, err := mitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mitu *MsgInternalToUpdate) ExecX(ctx context.Context) {
	if err := mitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mitu *MsgInternalToUpdate) check() error {
	if mitu.mutation.MsgInternalCleared() && len(mitu.mutation.MsgInternalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MsgInternalTo.msg_internal"`)
	}
	if mitu.mutation.UserCleared() && len(mitu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MsgInternalTo.user"`)
	}
	return nil
}

func (mitu *MsgInternalToUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mitu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(msginternalto.Table, msginternalto.Columns, sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt))
	if ps := mitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mitu.mutation.ReadAt(); ok {
		_spec.SetField(msginternalto.FieldReadAt, field.TypeTime, value)
	}
	if mitu.mutation.ReadAtCleared() {
		_spec.ClearField(msginternalto.FieldReadAt, field.TypeTime)
	}
	if value, ok := mitu.mutation.DeleteAt(); ok {
		_spec.SetField(msginternalto.FieldDeleteAt, field.TypeTime, value)
	}
	if mitu.mutation.DeleteAtCleared() {
		_spec.ClearField(msginternalto.FieldDeleteAt, field.TypeTime)
	}
	_spec.Node.Schema = mitu.schemaConfig.MsgInternalTo
	ctx = internal.NewSchemaConfigContext(ctx, mitu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, mitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msginternalto.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mitu.mutation.done = true
	return n, nil
}

// MsgInternalToUpdateOne is the builder for updating a single MsgInternalTo entity.
type MsgInternalToUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgInternalToMutation
}

// SetReadAt sets the "read_at" field.
func (mituo *MsgInternalToUpdateOne) SetReadAt(t time.Time) *MsgInternalToUpdateOne {
	mituo.mutation.SetReadAt(t)
	return mituo
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (mituo *MsgInternalToUpdateOne) SetNillableReadAt(t *time.Time) *MsgInternalToUpdateOne {
	if t != nil {
		mituo.SetReadAt(*t)
	}
	return mituo
}

// ClearReadAt clears the value of the "read_at" field.
func (mituo *MsgInternalToUpdateOne) ClearReadAt() *MsgInternalToUpdateOne {
	mituo.mutation.ClearReadAt()
	return mituo
}

// SetDeleteAt sets the "delete_at" field.
func (mituo *MsgInternalToUpdateOne) SetDeleteAt(t time.Time) *MsgInternalToUpdateOne {
	mituo.mutation.SetDeleteAt(t)
	return mituo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mituo *MsgInternalToUpdateOne) SetNillableDeleteAt(t *time.Time) *MsgInternalToUpdateOne {
	if t != nil {
		mituo.SetDeleteAt(*t)
	}
	return mituo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (mituo *MsgInternalToUpdateOne) ClearDeleteAt() *MsgInternalToUpdateOne {
	mituo.mutation.ClearDeleteAt()
	return mituo
}

// Mutation returns the MsgInternalToMutation object of the builder.
func (mituo *MsgInternalToUpdateOne) Mutation() *MsgInternalToMutation {
	return mituo.mutation
}

// Where appends a list predicates to the MsgInternalToUpdate builder.
func (mituo *MsgInternalToUpdateOne) Where(ps ...predicate.MsgInternalTo) *MsgInternalToUpdateOne {
	mituo.mutation.Where(ps...)
	return mituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mituo *MsgInternalToUpdateOne) Select(field string, fields ...string) *MsgInternalToUpdateOne {
	mituo.fields = append([]string{field}, fields...)
	return mituo
}

// Save executes the query and returns the updated MsgInternalTo entity.
func (mituo *MsgInternalToUpdateOne) Save(ctx context.Context) (*MsgInternalTo, error) {
	return withHooks(ctx, mituo.sqlSave, mituo.mutation, mituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mituo *MsgInternalToUpdateOne) SaveX(ctx context.Context) *MsgInternalTo {
	node, err := mituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mituo *MsgInternalToUpdateOne) Exec(ctx context.Context) error {
	_, err := mituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mituo *MsgInternalToUpdateOne) ExecX(ctx context.Context) {
	if err := mituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mituo *MsgInternalToUpdateOne) check() error {
	if mituo.mutation.MsgInternalCleared() && len(mituo.mutation.MsgInternalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MsgInternalTo.msg_internal"`)
	}
	if mituo.mutation.UserCleared() && len(mituo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MsgInternalTo.user"`)
	}
	return nil
}

func (mituo *MsgInternalToUpdateOne) sqlSave(ctx context.Context) (_node *MsgInternalTo, err error) {
	if err := mituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(msginternalto.Table, msginternalto.Columns, sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt))
	id, ok := mituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgInternalTo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msginternalto.FieldID)
		for _, f := range fields {
			if !msginternalto.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msginternalto.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mituo.mutation.ReadAt(); ok {
		_spec.SetField(msginternalto.FieldReadAt, field.TypeTime, value)
	}
	if mituo.mutation.ReadAtCleared() {
		_spec.ClearField(msginternalto.FieldReadAt, field.TypeTime)
	}
	if value, ok := mituo.mutation.DeleteAt(); ok {
		_spec.SetField(msginternalto.FieldDeleteAt, field.TypeTime, value)
	}
	if mituo.mutation.DeleteAtCleared() {
		_spec.ClearField(msginternalto.FieldDeleteAt, field.TypeTime)
	}
	_spec.Node.Schema = mituo.schemaConfig.MsgInternalTo
	ctx = internal.NewSchemaConfigContext(ctx, mituo.schemaConfig)
	_node = &MsgInternalTo{config: mituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msginternalto.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mituo.mutation.done = true
	return _node, nil
}
