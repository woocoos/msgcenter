// Code generated by ent, DO NOT EDIT.

package msgsubscriber

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldUpdatedAt, v))
}

// MsgTypeID applies equality check predicate on the "msg_type_id" field. It's identical to MsgTypeIDEQ.
func MsgTypeID(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldMsgTypeID, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldTenantID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldUserID, v))
}

// OrgRoleID applies equality check predicate on the "org_role_id" field. It's identical to OrgRoleIDEQ.
func OrgRoleID(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldOrgRoleID, v))
}

// Exclude applies equality check predicate on the "exclude" field. It's identical to ExcludeEQ.
func Exclude(v bool) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldExclude, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotNull(FieldUpdatedAt))
}

// MsgTypeIDEQ applies the EQ predicate on the "msg_type_id" field.
func MsgTypeIDEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldMsgTypeID, v))
}

// MsgTypeIDNEQ applies the NEQ predicate on the "msg_type_id" field.
func MsgTypeIDNEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldMsgTypeID, v))
}

// MsgTypeIDIn applies the In predicate on the "msg_type_id" field.
func MsgTypeIDIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldMsgTypeID, vs...))
}

// MsgTypeIDNotIn applies the NotIn predicate on the "msg_type_id" field.
func MsgTypeIDNotIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldMsgTypeID, vs...))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLTE(FieldTenantID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotNull(FieldUserID))
}

// OrgRoleIDEQ applies the EQ predicate on the "org_role_id" field.
func OrgRoleIDEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldOrgRoleID, v))
}

// OrgRoleIDNEQ applies the NEQ predicate on the "org_role_id" field.
func OrgRoleIDNEQ(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldOrgRoleID, v))
}

// OrgRoleIDIn applies the In predicate on the "org_role_id" field.
func OrgRoleIDIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIn(FieldOrgRoleID, vs...))
}

// OrgRoleIDNotIn applies the NotIn predicate on the "org_role_id" field.
func OrgRoleIDNotIn(vs ...int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotIn(FieldOrgRoleID, vs...))
}

// OrgRoleIDGT applies the GT predicate on the "org_role_id" field.
func OrgRoleIDGT(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGT(FieldOrgRoleID, v))
}

// OrgRoleIDGTE applies the GTE predicate on the "org_role_id" field.
func OrgRoleIDGTE(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldGTE(FieldOrgRoleID, v))
}

// OrgRoleIDLT applies the LT predicate on the "org_role_id" field.
func OrgRoleIDLT(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLT(FieldOrgRoleID, v))
}

// OrgRoleIDLTE applies the LTE predicate on the "org_role_id" field.
func OrgRoleIDLTE(v int) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldLTE(FieldOrgRoleID, v))
}

// OrgRoleIDIsNil applies the IsNil predicate on the "org_role_id" field.
func OrgRoleIDIsNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIsNull(FieldOrgRoleID))
}

// OrgRoleIDNotNil applies the NotNil predicate on the "org_role_id" field.
func OrgRoleIDNotNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotNull(FieldOrgRoleID))
}

// ExcludeEQ applies the EQ predicate on the "exclude" field.
func ExcludeEQ(v bool) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldEQ(FieldExclude, v))
}

// ExcludeNEQ applies the NEQ predicate on the "exclude" field.
func ExcludeNEQ(v bool) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNEQ(FieldExclude, v))
}

// ExcludeIsNil applies the IsNil predicate on the "exclude" field.
func ExcludeIsNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldIsNull(FieldExclude))
}

// ExcludeNotNil applies the NotNil predicate on the "exclude" field.
func ExcludeNotNil() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(sql.FieldNotNull(FieldExclude))
}

// HasMsgType applies the HasEdge predicate on the "msg_type" edge.
func HasMsgType() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MsgTypeTable, MsgTypeColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgType
		step.Edge.Schema = schemaConfig.MsgSubscriber
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMsgTypeWith applies the HasEdge predicate on the "msg_type" edge with a given conditions (other predicates).
func HasMsgTypeWith(preds ...predicate.MsgType) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(func(s *sql.Selector) {
		step := newMsgTypeStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgType
		step.Edge.Schema = schemaConfig.MsgSubscriber
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.MsgSubscriber {
	return predicate.MsgSubscriber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.MsgSubscriber
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.MsgSubscriber
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MsgSubscriber) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MsgSubscriber) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MsgSubscriber) predicate.MsgSubscriber {
	return predicate.MsgSubscriber(func(s *sql.Selector) {
		p(s.Not())
	})
}
