// Code generated by ent, DO NOT EDIT.

package msgalert

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/woocoos/msgcenter/pkg/alert"
)

const (
	// Label holds the string label denoting the msgalert type in the database.
	Label = "msg_alert"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// FieldAnnotations holds the string denoting the annotations field in the database.
	FieldAnnotations = "annotations"
	// FieldStartsAt holds the string denoting the starts_at field in the database.
	FieldStartsAt = "starts_at"
	// FieldEndsAt holds the string denoting the ends_at field in the database.
	FieldEndsAt = "ends_at"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldFingerprint holds the string denoting the fingerprint field in the database.
	FieldFingerprint = "fingerprint"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// EdgeNlog holds the string denoting the nlog edge name in mutations.
	EdgeNlog = "nlog"
	// EdgeNlogAlerts holds the string denoting the nlog_alerts edge name in mutations.
	EdgeNlogAlerts = "nlog_alerts"
	// Table holds the table name of the msgalert in the database.
	Table = "msg_alert"
	// NlogTable is the table that holds the nlog relation/edge. The primary key declared below.
	NlogTable = "msg_nlog_alert"
	// NlogInverseTable is the table name for the Nlog entity.
	// It exists in this package in order to avoid circular dependency with the "nlog" package.
	NlogInverseTable = "msg_nlog"
	// NlogAlertsTable is the table that holds the nlog_alerts relation/edge.
	NlogAlertsTable = "msg_nlog_alert"
	// NlogAlertsInverseTable is the table name for the NlogAlert entity.
	// It exists in this package in order to avoid circular dependency with the "nlogalert" package.
	NlogAlertsInverseTable = "msg_nlog_alert"
	// NlogAlertsColumn is the table column denoting the nlog_alerts relation/edge.
	NlogAlertsColumn = "alert_id"
)

// Columns holds all SQL columns for msgalert fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldLabels,
	FieldAnnotations,
	FieldStartsAt,
	FieldEndsAt,
	FieldURL,
	FieldTimeout,
	FieldFingerprint,
	FieldState,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeleted,
}

var (
	// NlogPrimaryKey and NlogColumn2 are the table columns denoting the
	// primary key for the nlog relation (M2M).
	NlogPrimaryKey = []string{"nlog_id", "alert_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/msgcenter/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultTimeout holds the default value on creation for the "timeout" field.
	DefaultTimeout bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultDeleted holds the default value on creation for the "deleted" field.
	DefaultDeleted bool
)

const DefaultState alert.AlertStatus = "none"

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s alert.AlertStatus) error {
	switch s {
	case "none", "firing", "resolved":
		return nil
	default:
		return fmt.Errorf("msgalert: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the MsgAlert queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStartsAt orders the results by the starts_at field.
func ByStartsAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartsAt, opts...).ToFunc()
}

// ByEndsAt orders the results by the ends_at field.
func ByEndsAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndsAt, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByTimeout orders the results by the timeout field.
func ByTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeout, opts...).ToFunc()
}

// ByFingerprint orders the results by the fingerprint field.
func ByFingerprint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFingerprint, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByNlogCount orders the results by nlog count.
func ByNlogCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNlogStep(), opts...)
	}
}

// ByNlog orders the results by nlog terms.
func ByNlog(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNlogStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNlogAlertsCount orders the results by nlog_alerts count.
func ByNlogAlertsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNlogAlertsStep(), opts...)
	}
}

// ByNlogAlerts orders the results by nlog_alerts terms.
func ByNlogAlerts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNlogAlertsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNlogStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NlogInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NlogTable, NlogPrimaryKey...),
	)
}
func newNlogAlertsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NlogAlertsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NlogAlertsTable, NlogAlertsColumn),
	)
}

var (
	// alert.AlertStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*alert.AlertStatus)(nil)
	// alert.AlertStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*alert.AlertStatus)(nil)
)
