// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msginternal"
	"github.com/woocoos/msgcenter/ent/msginternalto"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// MsgInternalUpdate is the builder for updating MsgInternal entities.
type MsgInternalUpdate struct {
	config
	hooks    []Hook
	mutation *MsgInternalMutation
}

// Where appends a list predicates to the MsgInternalUpdate builder.
func (miu *MsgInternalUpdate) Where(ps ...predicate.MsgInternal) *MsgInternalUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetUpdatedBy sets the "updated_by" field.
func (miu *MsgInternalUpdate) SetUpdatedBy(i int) *MsgInternalUpdate {
	miu.mutation.ResetUpdatedBy()
	miu.mutation.SetUpdatedBy(i)
	return miu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (miu *MsgInternalUpdate) SetNillableUpdatedBy(i *int) *MsgInternalUpdate {
	if i != nil {
		miu.SetUpdatedBy(*i)
	}
	return miu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (miu *MsgInternalUpdate) AddUpdatedBy(i int) *MsgInternalUpdate {
	miu.mutation.AddUpdatedBy(i)
	return miu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (miu *MsgInternalUpdate) ClearUpdatedBy() *MsgInternalUpdate {
	miu.mutation.ClearUpdatedBy()
	return miu
}

// SetUpdatedAt sets the "updated_at" field.
func (miu *MsgInternalUpdate) SetUpdatedAt(t time.Time) *MsgInternalUpdate {
	miu.mutation.SetUpdatedAt(t)
	return miu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (miu *MsgInternalUpdate) SetNillableUpdatedAt(t *time.Time) *MsgInternalUpdate {
	if t != nil {
		miu.SetUpdatedAt(*t)
	}
	return miu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (miu *MsgInternalUpdate) ClearUpdatedAt() *MsgInternalUpdate {
	miu.mutation.ClearUpdatedAt()
	return miu
}

// SetCategory sets the "category" field.
func (miu *MsgInternalUpdate) SetCategory(s string) *MsgInternalUpdate {
	miu.mutation.SetCategory(s)
	return miu
}

// SetSubject sets the "subject" field.
func (miu *MsgInternalUpdate) SetSubject(s string) *MsgInternalUpdate {
	miu.mutation.SetSubject(s)
	return miu
}

// SetBody sets the "body" field.
func (miu *MsgInternalUpdate) SetBody(s string) *MsgInternalUpdate {
	miu.mutation.SetBody(s)
	return miu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (miu *MsgInternalUpdate) SetNillableBody(s *string) *MsgInternalUpdate {
	if s != nil {
		miu.SetBody(*s)
	}
	return miu
}

// ClearBody clears the value of the "body" field.
func (miu *MsgInternalUpdate) ClearBody() *MsgInternalUpdate {
	miu.mutation.ClearBody()
	return miu
}

// SetFormat sets the "format" field.
func (miu *MsgInternalUpdate) SetFormat(s string) *MsgInternalUpdate {
	miu.mutation.SetFormat(s)
	return miu
}

// SetRedirect sets the "redirect" field.
func (miu *MsgInternalUpdate) SetRedirect(s string) *MsgInternalUpdate {
	miu.mutation.SetRedirect(s)
	return miu
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (miu *MsgInternalUpdate) SetNillableRedirect(s *string) *MsgInternalUpdate {
	if s != nil {
		miu.SetRedirect(*s)
	}
	return miu
}

// ClearRedirect clears the value of the "redirect" field.
func (miu *MsgInternalUpdate) ClearRedirect() *MsgInternalUpdate {
	miu.mutation.ClearRedirect()
	return miu
}

// AddMsgInternalToIDs adds the "msg_internal_to" edge to the MsgInternalTo entity by IDs.
func (miu *MsgInternalUpdate) AddMsgInternalToIDs(ids ...int) *MsgInternalUpdate {
	miu.mutation.AddMsgInternalToIDs(ids...)
	return miu
}

// AddMsgInternalTo adds the "msg_internal_to" edges to the MsgInternalTo entity.
func (miu *MsgInternalUpdate) AddMsgInternalTo(m ...*MsgInternalTo) *MsgInternalUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return miu.AddMsgInternalToIDs(ids...)
}

// Mutation returns the MsgInternalMutation object of the builder.
func (miu *MsgInternalUpdate) Mutation() *MsgInternalMutation {
	return miu.mutation
}

// ClearMsgInternalTo clears all "msg_internal_to" edges to the MsgInternalTo entity.
func (miu *MsgInternalUpdate) ClearMsgInternalTo() *MsgInternalUpdate {
	miu.mutation.ClearMsgInternalTo()
	return miu
}

// RemoveMsgInternalToIDs removes the "msg_internal_to" edge to MsgInternalTo entities by IDs.
func (miu *MsgInternalUpdate) RemoveMsgInternalToIDs(ids ...int) *MsgInternalUpdate {
	miu.mutation.RemoveMsgInternalToIDs(ids...)
	return miu
}

// RemoveMsgInternalTo removes "msg_internal_to" edges to MsgInternalTo entities.
func (miu *MsgInternalUpdate) RemoveMsgInternalTo(m ...*MsgInternalTo) *MsgInternalUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return miu.RemoveMsgInternalToIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MsgInternalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, miu.sqlSave, miu.mutation, miu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MsgInternalUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MsgInternalUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MsgInternalUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miu *MsgInternalUpdate) check() error {
	if v, ok := miu.mutation.Category(); ok {
		if err := msginternal.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "MsgInternal.category": %w`, err)}
		}
	}
	return nil
}

func (miu *MsgInternalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := miu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(msginternal.Table, msginternal.Columns, sqlgraph.NewFieldSpec(msginternal.FieldID, field.TypeInt))
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.UpdatedBy(); ok {
		_spec.SetField(msginternal.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := miu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(msginternal.FieldUpdatedBy, field.TypeInt, value)
	}
	if miu.mutation.UpdatedByCleared() {
		_spec.ClearField(msginternal.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := miu.mutation.UpdatedAt(); ok {
		_spec.SetField(msginternal.FieldUpdatedAt, field.TypeTime, value)
	}
	if miu.mutation.UpdatedAtCleared() {
		_spec.ClearField(msginternal.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := miu.mutation.Category(); ok {
		_spec.SetField(msginternal.FieldCategory, field.TypeString, value)
	}
	if value, ok := miu.mutation.Subject(); ok {
		_spec.SetField(msginternal.FieldSubject, field.TypeString, value)
	}
	if value, ok := miu.mutation.Body(); ok {
		_spec.SetField(msginternal.FieldBody, field.TypeString, value)
	}
	if miu.mutation.BodyCleared() {
		_spec.ClearField(msginternal.FieldBody, field.TypeString)
	}
	if value, ok := miu.mutation.Format(); ok {
		_spec.SetField(msginternal.FieldFormat, field.TypeString, value)
	}
	if value, ok := miu.mutation.Redirect(); ok {
		_spec.SetField(msginternal.FieldRedirect, field.TypeString, value)
	}
	if miu.mutation.RedirectCleared() {
		_spec.ClearField(msginternal.FieldRedirect, field.TypeString)
	}
	if miu.mutation.MsgInternalToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msginternal.MsgInternalToTable,
			Columns: []string{msginternal.MsgInternalToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt),
			},
		}
		edge.Schema = miu.schemaConfig.MsgInternalTo
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.RemovedMsgInternalToIDs(); len(nodes) > 0 && !miu.mutation.MsgInternalToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msginternal.MsgInternalToTable,
			Columns: []string{msginternal.MsgInternalToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt),
			},
		}
		edge.Schema = miu.schemaConfig.MsgInternalTo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.MsgInternalToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msginternal.MsgInternalToTable,
			Columns: []string{msginternal.MsgInternalToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt),
			},
		}
		edge.Schema = miu.schemaConfig.MsgInternalTo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = miu.schemaConfig.MsgInternal
	ctx = internal.NewSchemaConfigContext(ctx, miu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msginternal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	miu.mutation.done = true
	return n, nil
}

// MsgInternalUpdateOne is the builder for updating a single MsgInternal entity.
type MsgInternalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgInternalMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (miuo *MsgInternalUpdateOne) SetUpdatedBy(i int) *MsgInternalUpdateOne {
	miuo.mutation.ResetUpdatedBy()
	miuo.mutation.SetUpdatedBy(i)
	return miuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (miuo *MsgInternalUpdateOne) SetNillableUpdatedBy(i *int) *MsgInternalUpdateOne {
	if i != nil {
		miuo.SetUpdatedBy(*i)
	}
	return miuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (miuo *MsgInternalUpdateOne) AddUpdatedBy(i int) *MsgInternalUpdateOne {
	miuo.mutation.AddUpdatedBy(i)
	return miuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (miuo *MsgInternalUpdateOne) ClearUpdatedBy() *MsgInternalUpdateOne {
	miuo.mutation.ClearUpdatedBy()
	return miuo
}

// SetUpdatedAt sets the "updated_at" field.
func (miuo *MsgInternalUpdateOne) SetUpdatedAt(t time.Time) *MsgInternalUpdateOne {
	miuo.mutation.SetUpdatedAt(t)
	return miuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (miuo *MsgInternalUpdateOne) SetNillableUpdatedAt(t *time.Time) *MsgInternalUpdateOne {
	if t != nil {
		miuo.SetUpdatedAt(*t)
	}
	return miuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (miuo *MsgInternalUpdateOne) ClearUpdatedAt() *MsgInternalUpdateOne {
	miuo.mutation.ClearUpdatedAt()
	return miuo
}

// SetCategory sets the "category" field.
func (miuo *MsgInternalUpdateOne) SetCategory(s string) *MsgInternalUpdateOne {
	miuo.mutation.SetCategory(s)
	return miuo
}

// SetSubject sets the "subject" field.
func (miuo *MsgInternalUpdateOne) SetSubject(s string) *MsgInternalUpdateOne {
	miuo.mutation.SetSubject(s)
	return miuo
}

// SetBody sets the "body" field.
func (miuo *MsgInternalUpdateOne) SetBody(s string) *MsgInternalUpdateOne {
	miuo.mutation.SetBody(s)
	return miuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (miuo *MsgInternalUpdateOne) SetNillableBody(s *string) *MsgInternalUpdateOne {
	if s != nil {
		miuo.SetBody(*s)
	}
	return miuo
}

// ClearBody clears the value of the "body" field.
func (miuo *MsgInternalUpdateOne) ClearBody() *MsgInternalUpdateOne {
	miuo.mutation.ClearBody()
	return miuo
}

// SetFormat sets the "format" field.
func (miuo *MsgInternalUpdateOne) SetFormat(s string) *MsgInternalUpdateOne {
	miuo.mutation.SetFormat(s)
	return miuo
}

// SetRedirect sets the "redirect" field.
func (miuo *MsgInternalUpdateOne) SetRedirect(s string) *MsgInternalUpdateOne {
	miuo.mutation.SetRedirect(s)
	return miuo
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (miuo *MsgInternalUpdateOne) SetNillableRedirect(s *string) *MsgInternalUpdateOne {
	if s != nil {
		miuo.SetRedirect(*s)
	}
	return miuo
}

// ClearRedirect clears the value of the "redirect" field.
func (miuo *MsgInternalUpdateOne) ClearRedirect() *MsgInternalUpdateOne {
	miuo.mutation.ClearRedirect()
	return miuo
}

// AddMsgInternalToIDs adds the "msg_internal_to" edge to the MsgInternalTo entity by IDs.
func (miuo *MsgInternalUpdateOne) AddMsgInternalToIDs(ids ...int) *MsgInternalUpdateOne {
	miuo.mutation.AddMsgInternalToIDs(ids...)
	return miuo
}

// AddMsgInternalTo adds the "msg_internal_to" edges to the MsgInternalTo entity.
func (miuo *MsgInternalUpdateOne) AddMsgInternalTo(m ...*MsgInternalTo) *MsgInternalUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return miuo.AddMsgInternalToIDs(ids...)
}

// Mutation returns the MsgInternalMutation object of the builder.
func (miuo *MsgInternalUpdateOne) Mutation() *MsgInternalMutation {
	return miuo.mutation
}

// ClearMsgInternalTo clears all "msg_internal_to" edges to the MsgInternalTo entity.
func (miuo *MsgInternalUpdateOne) ClearMsgInternalTo() *MsgInternalUpdateOne {
	miuo.mutation.ClearMsgInternalTo()
	return miuo
}

// RemoveMsgInternalToIDs removes the "msg_internal_to" edge to MsgInternalTo entities by IDs.
func (miuo *MsgInternalUpdateOne) RemoveMsgInternalToIDs(ids ...int) *MsgInternalUpdateOne {
	miuo.mutation.RemoveMsgInternalToIDs(ids...)
	return miuo
}

// RemoveMsgInternalTo removes "msg_internal_to" edges to MsgInternalTo entities.
func (miuo *MsgInternalUpdateOne) RemoveMsgInternalTo(m ...*MsgInternalTo) *MsgInternalUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return miuo.RemoveMsgInternalToIDs(ids...)
}

// Where appends a list predicates to the MsgInternalUpdate builder.
func (miuo *MsgInternalUpdateOne) Where(ps ...predicate.MsgInternal) *MsgInternalUpdateOne {
	miuo.mutation.Where(ps...)
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *MsgInternalUpdateOne) Select(field string, fields ...string) *MsgInternalUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated MsgInternal entity.
func (miuo *MsgInternalUpdateOne) Save(ctx context.Context) (*MsgInternal, error) {
	return withHooks(ctx, miuo.sqlSave, miuo.mutation, miuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MsgInternalUpdateOne) SaveX(ctx context.Context) *MsgInternal {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MsgInternalUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MsgInternalUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miuo *MsgInternalUpdateOne) check() error {
	if v, ok := miuo.mutation.Category(); ok {
		if err := msginternal.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "MsgInternal.category": %w`, err)}
		}
	}
	return nil
}

func (miuo *MsgInternalUpdateOne) sqlSave(ctx context.Context) (_node *MsgInternal, err error) {
	if err := miuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(msginternal.Table, msginternal.Columns, sqlgraph.NewFieldSpec(msginternal.FieldID, field.TypeInt))
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgInternal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msginternal.FieldID)
		for _, f := range fields {
			if !msginternal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msginternal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.UpdatedBy(); ok {
		_spec.SetField(msginternal.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := miuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(msginternal.FieldUpdatedBy, field.TypeInt, value)
	}
	if miuo.mutation.UpdatedByCleared() {
		_spec.ClearField(msginternal.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := miuo.mutation.UpdatedAt(); ok {
		_spec.SetField(msginternal.FieldUpdatedAt, field.TypeTime, value)
	}
	if miuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(msginternal.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := miuo.mutation.Category(); ok {
		_spec.SetField(msginternal.FieldCategory, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Subject(); ok {
		_spec.SetField(msginternal.FieldSubject, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Body(); ok {
		_spec.SetField(msginternal.FieldBody, field.TypeString, value)
	}
	if miuo.mutation.BodyCleared() {
		_spec.ClearField(msginternal.FieldBody, field.TypeString)
	}
	if value, ok := miuo.mutation.Format(); ok {
		_spec.SetField(msginternal.FieldFormat, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Redirect(); ok {
		_spec.SetField(msginternal.FieldRedirect, field.TypeString, value)
	}
	if miuo.mutation.RedirectCleared() {
		_spec.ClearField(msginternal.FieldRedirect, field.TypeString)
	}
	if miuo.mutation.MsgInternalToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msginternal.MsgInternalToTable,
			Columns: []string{msginternal.MsgInternalToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt),
			},
		}
		edge.Schema = miuo.schemaConfig.MsgInternalTo
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.RemovedMsgInternalToIDs(); len(nodes) > 0 && !miuo.mutation.MsgInternalToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msginternal.MsgInternalToTable,
			Columns: []string{msginternal.MsgInternalToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt),
			},
		}
		edge.Schema = miuo.schemaConfig.MsgInternalTo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.MsgInternalToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msginternal.MsgInternalToTable,
			Columns: []string{msginternal.MsgInternalToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt),
			},
		}
		edge.Schema = miuo.schemaConfig.MsgInternalTo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = miuo.schemaConfig.MsgInternal
	ctx = internal.NewSchemaConfigContext(ctx, miuo.schemaConfig)
	_node = &MsgInternal{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msginternal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	miuo.mutation.done = true
	return _node, nil
}
