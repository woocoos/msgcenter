// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msginternal"
	"github.com/woocoos/msgcenter/ent/msginternalto"
	"github.com/woocoos/msgcenter/ent/predicate"
	"github.com/woocoos/msgcenter/ent/user"

	"github.com/woocoos/msgcenter/ent/internal"
)

// MsgInternalToQuery is the builder for querying MsgInternalTo entities.
type MsgInternalToQuery struct {
	config
	ctx             *QueryContext
	order           []msginternalto.OrderOption
	inters          []Interceptor
	predicates      []predicate.MsgInternalTo
	withMsgInternal *MsgInternalQuery
	withUser        *UserQuery
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*MsgInternalTo) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MsgInternalToQuery builder.
func (mitq *MsgInternalToQuery) Where(ps ...predicate.MsgInternalTo) *MsgInternalToQuery {
	mitq.predicates = append(mitq.predicates, ps...)
	return mitq
}

// Limit the number of records to be returned by this query.
func (mitq *MsgInternalToQuery) Limit(limit int) *MsgInternalToQuery {
	mitq.ctx.Limit = &limit
	return mitq
}

// Offset to start from.
func (mitq *MsgInternalToQuery) Offset(offset int) *MsgInternalToQuery {
	mitq.ctx.Offset = &offset
	return mitq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mitq *MsgInternalToQuery) Unique(unique bool) *MsgInternalToQuery {
	mitq.ctx.Unique = &unique
	return mitq
}

// Order specifies how the records should be ordered.
func (mitq *MsgInternalToQuery) Order(o ...msginternalto.OrderOption) *MsgInternalToQuery {
	mitq.order = append(mitq.order, o...)
	return mitq
}

// QueryMsgInternal chains the current query on the "msg_internal" edge.
func (mitq *MsgInternalToQuery) QueryMsgInternal() *MsgInternalQuery {
	query := (&MsgInternalClient{config: mitq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mitq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mitq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(msginternalto.Table, msginternalto.FieldID, selector),
			sqlgraph.To(msginternal.Table, msginternal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, msginternalto.MsgInternalTable, msginternalto.MsgInternalColumn),
		)
		schemaConfig := mitq.schemaConfig
		step.To.Schema = schemaConfig.MsgInternal
		step.Edge.Schema = schemaConfig.MsgInternalTo
		fromU = sqlgraph.SetNeighbors(mitq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (mitq *MsgInternalToQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: mitq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mitq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mitq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(msginternalto.Table, msginternalto.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, msginternalto.UserTable, msginternalto.UserColumn),
		)
		schemaConfig := mitq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.MsgInternalTo
		fromU = sqlgraph.SetNeighbors(mitq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MsgInternalTo entity from the query.
// Returns a *NotFoundError when no MsgInternalTo was found.
func (mitq *MsgInternalToQuery) First(ctx context.Context) (*MsgInternalTo, error) {
	nodes, err := mitq.Limit(1).All(setContextOp(ctx, mitq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{msginternalto.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mitq *MsgInternalToQuery) FirstX(ctx context.Context) *MsgInternalTo {
	node, err := mitq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MsgInternalTo ID from the query.
// Returns a *NotFoundError when no MsgInternalTo ID was found.
func (mitq *MsgInternalToQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mitq.Limit(1).IDs(setContextOp(ctx, mitq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{msginternalto.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mitq *MsgInternalToQuery) FirstIDX(ctx context.Context) int {
	id, err := mitq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MsgInternalTo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MsgInternalTo entity is found.
// Returns a *NotFoundError when no MsgInternalTo entities are found.
func (mitq *MsgInternalToQuery) Only(ctx context.Context) (*MsgInternalTo, error) {
	nodes, err := mitq.Limit(2).All(setContextOp(ctx, mitq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{msginternalto.Label}
	default:
		return nil, &NotSingularError{msginternalto.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mitq *MsgInternalToQuery) OnlyX(ctx context.Context) *MsgInternalTo {
	node, err := mitq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MsgInternalTo ID in the query.
// Returns a *NotSingularError when more than one MsgInternalTo ID is found.
// Returns a *NotFoundError when no entities are found.
func (mitq *MsgInternalToQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mitq.Limit(2).IDs(setContextOp(ctx, mitq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{msginternalto.Label}
	default:
		err = &NotSingularError{msginternalto.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mitq *MsgInternalToQuery) OnlyIDX(ctx context.Context) int {
	id, err := mitq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MsgInternalTos.
func (mitq *MsgInternalToQuery) All(ctx context.Context) ([]*MsgInternalTo, error) {
	ctx = setContextOp(ctx, mitq.ctx, "All")
	if err := mitq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MsgInternalTo, *MsgInternalToQuery]()
	return withInterceptors[[]*MsgInternalTo](ctx, mitq, qr, mitq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mitq *MsgInternalToQuery) AllX(ctx context.Context) []*MsgInternalTo {
	nodes, err := mitq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MsgInternalTo IDs.
func (mitq *MsgInternalToQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mitq.ctx.Unique == nil && mitq.path != nil {
		mitq.Unique(true)
	}
	ctx = setContextOp(ctx, mitq.ctx, "IDs")
	if err = mitq.Select(msginternalto.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mitq *MsgInternalToQuery) IDsX(ctx context.Context) []int {
	ids, err := mitq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mitq *MsgInternalToQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mitq.ctx, "Count")
	if err := mitq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mitq, querierCount[*MsgInternalToQuery](), mitq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mitq *MsgInternalToQuery) CountX(ctx context.Context) int {
	count, err := mitq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mitq *MsgInternalToQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mitq.ctx, "Exist")
	switch _, err := mitq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mitq *MsgInternalToQuery) ExistX(ctx context.Context) bool {
	exist, err := mitq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MsgInternalToQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mitq *MsgInternalToQuery) Clone() *MsgInternalToQuery {
	if mitq == nil {
		return nil
	}
	return &MsgInternalToQuery{
		config:          mitq.config,
		ctx:             mitq.ctx.Clone(),
		order:           append([]msginternalto.OrderOption{}, mitq.order...),
		inters:          append([]Interceptor{}, mitq.inters...),
		predicates:      append([]predicate.MsgInternalTo{}, mitq.predicates...),
		withMsgInternal: mitq.withMsgInternal.Clone(),
		withUser:        mitq.withUser.Clone(),
		// clone intermediate query.
		sql:  mitq.sql.Clone(),
		path: mitq.path,
	}
}

// WithMsgInternal tells the query-builder to eager-load the nodes that are connected to
// the "msg_internal" edge. The optional arguments are used to configure the query builder of the edge.
func (mitq *MsgInternalToQuery) WithMsgInternal(opts ...func(*MsgInternalQuery)) *MsgInternalToQuery {
	query := (&MsgInternalClient{config: mitq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mitq.withMsgInternal = query
	return mitq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (mitq *MsgInternalToQuery) WithUser(opts ...func(*UserQuery)) *MsgInternalToQuery {
	query := (&UserClient{config: mitq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mitq.withUser = query
	return mitq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MsgInternalTo.Query().
//		GroupBy(msginternalto.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mitq *MsgInternalToQuery) GroupBy(field string, fields ...string) *MsgInternalToGroupBy {
	mitq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MsgInternalToGroupBy{build: mitq}
	grbuild.flds = &mitq.ctx.Fields
	grbuild.label = msginternalto.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.MsgInternalTo.Query().
//		Select(msginternalto.FieldTenantID).
//		Scan(ctx, &v)
func (mitq *MsgInternalToQuery) Select(fields ...string) *MsgInternalToSelect {
	mitq.ctx.Fields = append(mitq.ctx.Fields, fields...)
	sbuild := &MsgInternalToSelect{MsgInternalToQuery: mitq}
	sbuild.label = msginternalto.Label
	sbuild.flds, sbuild.scan = &mitq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MsgInternalToSelect configured with the given aggregations.
func (mitq *MsgInternalToQuery) Aggregate(fns ...AggregateFunc) *MsgInternalToSelect {
	return mitq.Select().Aggregate(fns...)
}

func (mitq *MsgInternalToQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mitq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mitq); err != nil {
				return err
			}
		}
	}
	for _, f := range mitq.ctx.Fields {
		if !msginternalto.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mitq.path != nil {
		prev, err := mitq.path(ctx)
		if err != nil {
			return err
		}
		mitq.sql = prev
	}
	return nil
}

func (mitq *MsgInternalToQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MsgInternalTo, error) {
	var (
		nodes       = []*MsgInternalTo{}
		_spec       = mitq.querySpec()
		loadedTypes = [2]bool{
			mitq.withMsgInternal != nil,
			mitq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MsgInternalTo).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MsgInternalTo{config: mitq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = mitq.schemaConfig.MsgInternalTo
	ctx = internal.NewSchemaConfigContext(ctx, mitq.schemaConfig)
	if len(mitq.modifiers) > 0 {
		_spec.Modifiers = mitq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mitq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mitq.withMsgInternal; query != nil {
		if err := mitq.loadMsgInternal(ctx, query, nodes, nil,
			func(n *MsgInternalTo, e *MsgInternal) { n.Edges.MsgInternal = e }); err != nil {
			return nil, err
		}
	}
	if query := mitq.withUser; query != nil {
		if err := mitq.loadUser(ctx, query, nodes, nil,
			func(n *MsgInternalTo, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	for i := range mitq.loadTotal {
		if err := mitq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mitq *MsgInternalToQuery) loadMsgInternal(ctx context.Context, query *MsgInternalQuery, nodes []*MsgInternalTo, init func(*MsgInternalTo), assign func(*MsgInternalTo, *MsgInternal)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MsgInternalTo)
	for i := range nodes {
		fk := nodes[i].MsgInternalID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(msginternal.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "msg_internal_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mitq *MsgInternalToQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*MsgInternalTo, init func(*MsgInternalTo), assign func(*MsgInternalTo, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MsgInternalTo)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mitq *MsgInternalToQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mitq.querySpec()
	_spec.Node.Schema = mitq.schemaConfig.MsgInternalTo
	ctx = internal.NewSchemaConfigContext(ctx, mitq.schemaConfig)
	if len(mitq.modifiers) > 0 {
		_spec.Modifiers = mitq.modifiers
	}
	_spec.Node.Columns = mitq.ctx.Fields
	if len(mitq.ctx.Fields) > 0 {
		_spec.Unique = mitq.ctx.Unique != nil && *mitq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mitq.driver, _spec)
}

func (mitq *MsgInternalToQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(msginternalto.Table, msginternalto.Columns, sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt))
	_spec.From = mitq.sql
	if unique := mitq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mitq.path != nil {
		_spec.Unique = true
	}
	if fields := mitq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msginternalto.FieldID)
		for i := range fields {
			if fields[i] != msginternalto.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mitq.withMsgInternal != nil {
			_spec.Node.AddColumnOnce(msginternalto.FieldMsgInternalID)
		}
		if mitq.withUser != nil {
			_spec.Node.AddColumnOnce(msginternalto.FieldUserID)
		}
	}
	if ps := mitq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mitq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mitq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mitq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mitq *MsgInternalToQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mitq.driver.Dialect())
	t1 := builder.Table(msginternalto.Table)
	columns := mitq.ctx.Fields
	if len(columns) == 0 {
		columns = msginternalto.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mitq.sql != nil {
		selector = mitq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mitq.ctx.Unique != nil && *mitq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(mitq.schemaConfig.MsgInternalTo)
	ctx = internal.NewSchemaConfigContext(ctx, mitq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range mitq.predicates {
		p(selector)
	}
	for _, p := range mitq.order {
		p(selector)
	}
	if offset := mitq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mitq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MsgInternalToGroupBy is the group-by builder for MsgInternalTo entities.
type MsgInternalToGroupBy struct {
	selector
	build *MsgInternalToQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mitgb *MsgInternalToGroupBy) Aggregate(fns ...AggregateFunc) *MsgInternalToGroupBy {
	mitgb.fns = append(mitgb.fns, fns...)
	return mitgb
}

// Scan applies the selector query and scans the result into the given value.
func (mitgb *MsgInternalToGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mitgb.build.ctx, "GroupBy")
	if err := mitgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MsgInternalToQuery, *MsgInternalToGroupBy](ctx, mitgb.build, mitgb, mitgb.build.inters, v)
}

func (mitgb *MsgInternalToGroupBy) sqlScan(ctx context.Context, root *MsgInternalToQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mitgb.fns))
	for _, fn := range mitgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mitgb.flds)+len(mitgb.fns))
		for _, f := range *mitgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mitgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mitgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MsgInternalToSelect is the builder for selecting fields of MsgInternalTo entities.
type MsgInternalToSelect struct {
	*MsgInternalToQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mits *MsgInternalToSelect) Aggregate(fns ...AggregateFunc) *MsgInternalToSelect {
	mits.fns = append(mits.fns, fns...)
	return mits
}

// Scan applies the selector query and scans the result into the given value.
func (mits *MsgInternalToSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mits.ctx, "Select")
	if err := mits.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MsgInternalToQuery, *MsgInternalToSelect](ctx, mits.MsgInternalToQuery, mits, mits.inters, v)
}

func (mits *MsgInternalToSelect) sqlScan(ctx context.Context, root *MsgInternalToQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mits.fns))
	for _, fn := range mits.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mits.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mits.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
