// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/msgcenter/ent/msgevent"
	"github.com/woocoos/msgcenter/ent/msgtemplate"
	"github.com/woocoos/msgcenter/ent/predicate"
	"github.com/woocoos/msgcenter/pkg/profile"

	"github.com/woocoos/msgcenter/ent/internal"
)

// MsgTemplateUpdate is the builder for updating MsgTemplate entities.
type MsgTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *MsgTemplateMutation
}

// Where appends a list predicates to the MsgTemplateUpdate builder.
func (mtu *MsgTemplateUpdate) Where(ps ...predicate.MsgTemplate) *MsgTemplateUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetUpdatedBy sets the "updated_by" field.
func (mtu *MsgTemplateUpdate) SetUpdatedBy(i int) *MsgTemplateUpdate {
	mtu.mutation.ResetUpdatedBy()
	mtu.mutation.SetUpdatedBy(i)
	return mtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableUpdatedBy(i *int) *MsgTemplateUpdate {
	if i != nil {
		mtu.SetUpdatedBy(*i)
	}
	return mtu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mtu *MsgTemplateUpdate) AddUpdatedBy(i int) *MsgTemplateUpdate {
	mtu.mutation.AddUpdatedBy(i)
	return mtu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mtu *MsgTemplateUpdate) ClearUpdatedBy() *MsgTemplateUpdate {
	mtu.mutation.ClearUpdatedBy()
	return mtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mtu *MsgTemplateUpdate) SetUpdatedAt(t time.Time) *MsgTemplateUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableUpdatedAt(t *time.Time) *MsgTemplateUpdate {
	if t != nil {
		mtu.SetUpdatedAt(*t)
	}
	return mtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mtu *MsgTemplateUpdate) ClearUpdatedAt() *MsgTemplateUpdate {
	mtu.mutation.ClearUpdatedAt()
	return mtu
}

// SetMsgTypeID sets the "msg_type_id" field.
func (mtu *MsgTemplateUpdate) SetMsgTypeID(i int) *MsgTemplateUpdate {
	mtu.mutation.ResetMsgTypeID()
	mtu.mutation.SetMsgTypeID(i)
	return mtu
}

// AddMsgTypeID adds i to the "msg_type_id" field.
func (mtu *MsgTemplateUpdate) AddMsgTypeID(i int) *MsgTemplateUpdate {
	mtu.mutation.AddMsgTypeID(i)
	return mtu
}

// SetMsgEventID sets the "msg_event_id" field.
func (mtu *MsgTemplateUpdate) SetMsgEventID(i int) *MsgTemplateUpdate {
	mtu.mutation.SetMsgEventID(i)
	return mtu
}

// SetTenantID sets the "tenant_id" field.
func (mtu *MsgTemplateUpdate) SetTenantID(i int) *MsgTemplateUpdate {
	mtu.mutation.ResetTenantID()
	mtu.mutation.SetTenantID(i)
	return mtu
}

// AddTenantID adds i to the "tenant_id" field.
func (mtu *MsgTemplateUpdate) AddTenantID(i int) *MsgTemplateUpdate {
	mtu.mutation.AddTenantID(i)
	return mtu
}

// SetName sets the "name" field.
func (mtu *MsgTemplateUpdate) SetName(s string) *MsgTemplateUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// SetStatus sets the "status" field.
func (mtu *MsgTemplateUpdate) SetStatus(ts typex.SimpleStatus) *MsgTemplateUpdate {
	mtu.mutation.SetStatus(ts)
	return mtu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableStatus(ts *typex.SimpleStatus) *MsgTemplateUpdate {
	if ts != nil {
		mtu.SetStatus(*ts)
	}
	return mtu
}

// ClearStatus clears the value of the "status" field.
func (mtu *MsgTemplateUpdate) ClearStatus() *MsgTemplateUpdate {
	mtu.mutation.ClearStatus()
	return mtu
}

// SetReceiverType sets the "receiver_type" field.
func (mtu *MsgTemplateUpdate) SetReceiverType(pt profile.ReceiverType) *MsgTemplateUpdate {
	mtu.mutation.SetReceiverType(pt)
	return mtu
}

// SetFormat sets the "format" field.
func (mtu *MsgTemplateUpdate) SetFormat(m msgtemplate.Format) *MsgTemplateUpdate {
	mtu.mutation.SetFormat(m)
	return mtu
}

// SetSubject sets the "subject" field.
func (mtu *MsgTemplateUpdate) SetSubject(s string) *MsgTemplateUpdate {
	mtu.mutation.SetSubject(s)
	return mtu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableSubject(s *string) *MsgTemplateUpdate {
	if s != nil {
		mtu.SetSubject(*s)
	}
	return mtu
}

// ClearSubject clears the value of the "subject" field.
func (mtu *MsgTemplateUpdate) ClearSubject() *MsgTemplateUpdate {
	mtu.mutation.ClearSubject()
	return mtu
}

// SetFrom sets the "from" field.
func (mtu *MsgTemplateUpdate) SetFrom(s string) *MsgTemplateUpdate {
	mtu.mutation.SetFrom(s)
	return mtu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableFrom(s *string) *MsgTemplateUpdate {
	if s != nil {
		mtu.SetFrom(*s)
	}
	return mtu
}

// ClearFrom clears the value of the "from" field.
func (mtu *MsgTemplateUpdate) ClearFrom() *MsgTemplateUpdate {
	mtu.mutation.ClearFrom()
	return mtu
}

// SetTo sets the "to" field.
func (mtu *MsgTemplateUpdate) SetTo(s string) *MsgTemplateUpdate {
	mtu.mutation.SetTo(s)
	return mtu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableTo(s *string) *MsgTemplateUpdate {
	if s != nil {
		mtu.SetTo(*s)
	}
	return mtu
}

// ClearTo clears the value of the "to" field.
func (mtu *MsgTemplateUpdate) ClearTo() *MsgTemplateUpdate {
	mtu.mutation.ClearTo()
	return mtu
}

// SetCc sets the "cc" field.
func (mtu *MsgTemplateUpdate) SetCc(s string) *MsgTemplateUpdate {
	mtu.mutation.SetCc(s)
	return mtu
}

// SetNillableCc sets the "cc" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableCc(s *string) *MsgTemplateUpdate {
	if s != nil {
		mtu.SetCc(*s)
	}
	return mtu
}

// ClearCc clears the value of the "cc" field.
func (mtu *MsgTemplateUpdate) ClearCc() *MsgTemplateUpdate {
	mtu.mutation.ClearCc()
	return mtu
}

// SetBcc sets the "bcc" field.
func (mtu *MsgTemplateUpdate) SetBcc(s string) *MsgTemplateUpdate {
	mtu.mutation.SetBcc(s)
	return mtu
}

// SetNillableBcc sets the "bcc" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableBcc(s *string) *MsgTemplateUpdate {
	if s != nil {
		mtu.SetBcc(*s)
	}
	return mtu
}

// ClearBcc clears the value of the "bcc" field.
func (mtu *MsgTemplateUpdate) ClearBcc() *MsgTemplateUpdate {
	mtu.mutation.ClearBcc()
	return mtu
}

// SetBody sets the "body" field.
func (mtu *MsgTemplateUpdate) SetBody(s string) *MsgTemplateUpdate {
	mtu.mutation.SetBody(s)
	return mtu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableBody(s *string) *MsgTemplateUpdate {
	if s != nil {
		mtu.SetBody(*s)
	}
	return mtu
}

// ClearBody clears the value of the "body" field.
func (mtu *MsgTemplateUpdate) ClearBody() *MsgTemplateUpdate {
	mtu.mutation.ClearBody()
	return mtu
}

// SetTpl sets the "tpl" field.
func (mtu *MsgTemplateUpdate) SetTpl(s string) *MsgTemplateUpdate {
	mtu.mutation.SetTpl(s)
	return mtu
}

// SetNillableTpl sets the "tpl" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableTpl(s *string) *MsgTemplateUpdate {
	if s != nil {
		mtu.SetTpl(*s)
	}
	return mtu
}

// ClearTpl clears the value of the "tpl" field.
func (mtu *MsgTemplateUpdate) ClearTpl() *MsgTemplateUpdate {
	mtu.mutation.ClearTpl()
	return mtu
}

// SetTplFileID sets the "tpl_file_id" field.
func (mtu *MsgTemplateUpdate) SetTplFileID(i int) *MsgTemplateUpdate {
	mtu.mutation.ResetTplFileID()
	mtu.mutation.SetTplFileID(i)
	return mtu
}

// SetNillableTplFileID sets the "tpl_file_id" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableTplFileID(i *int) *MsgTemplateUpdate {
	if i != nil {
		mtu.SetTplFileID(*i)
	}
	return mtu
}

// AddTplFileID adds i to the "tpl_file_id" field.
func (mtu *MsgTemplateUpdate) AddTplFileID(i int) *MsgTemplateUpdate {
	mtu.mutation.AddTplFileID(i)
	return mtu
}

// ClearTplFileID clears the value of the "tpl_file_id" field.
func (mtu *MsgTemplateUpdate) ClearTplFileID() *MsgTemplateUpdate {
	mtu.mutation.ClearTplFileID()
	return mtu
}

// SetAttachments sets the "attachments" field.
func (mtu *MsgTemplateUpdate) SetAttachments(s []string) *MsgTemplateUpdate {
	mtu.mutation.SetAttachments(s)
	return mtu
}

// AppendAttachments appends s to the "attachments" field.
func (mtu *MsgTemplateUpdate) AppendAttachments(s []string) *MsgTemplateUpdate {
	mtu.mutation.AppendAttachments(s)
	return mtu
}

// ClearAttachments clears the value of the "attachments" field.
func (mtu *MsgTemplateUpdate) ClearAttachments() *MsgTemplateUpdate {
	mtu.mutation.ClearAttachments()
	return mtu
}

// SetAttachmentsFileIds sets the "attachments_file_ids" field.
func (mtu *MsgTemplateUpdate) SetAttachmentsFileIds(i []int) *MsgTemplateUpdate {
	mtu.mutation.SetAttachmentsFileIds(i)
	return mtu
}

// AppendAttachmentsFileIds appends i to the "attachments_file_ids" field.
func (mtu *MsgTemplateUpdate) AppendAttachmentsFileIds(i []int) *MsgTemplateUpdate {
	mtu.mutation.AppendAttachmentsFileIds(i)
	return mtu
}

// ClearAttachmentsFileIds clears the value of the "attachments_file_ids" field.
func (mtu *MsgTemplateUpdate) ClearAttachmentsFileIds() *MsgTemplateUpdate {
	mtu.mutation.ClearAttachmentsFileIds()
	return mtu
}

// SetComments sets the "comments" field.
func (mtu *MsgTemplateUpdate) SetComments(s string) *MsgTemplateUpdate {
	mtu.mutation.SetComments(s)
	return mtu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (mtu *MsgTemplateUpdate) SetNillableComments(s *string) *MsgTemplateUpdate {
	if s != nil {
		mtu.SetComments(*s)
	}
	return mtu
}

// ClearComments clears the value of the "comments" field.
func (mtu *MsgTemplateUpdate) ClearComments() *MsgTemplateUpdate {
	mtu.mutation.ClearComments()
	return mtu
}

// SetEventID sets the "event" edge to the MsgEvent entity by ID.
func (mtu *MsgTemplateUpdate) SetEventID(id int) *MsgTemplateUpdate {
	mtu.mutation.SetEventID(id)
	return mtu
}

// SetEvent sets the "event" edge to the MsgEvent entity.
func (mtu *MsgTemplateUpdate) SetEvent(m *MsgEvent) *MsgTemplateUpdate {
	return mtu.SetEventID(m.ID)
}

// Mutation returns the MsgTemplateMutation object of the builder.
func (mtu *MsgTemplateUpdate) Mutation() *MsgTemplateMutation {
	return mtu.mutation
}

// ClearEvent clears the "event" edge to the MsgEvent entity.
func (mtu *MsgTemplateUpdate) ClearEvent() *MsgTemplateUpdate {
	mtu.mutation.ClearEvent()
	return mtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MsgTemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mtu.sqlSave, mtu.mutation, mtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MsgTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MsgTemplateUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MsgTemplateUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtu *MsgTemplateUpdate) check() error {
	if v, ok := mtu.mutation.Name(); ok {
		if err := msgtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.name": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.Status(); ok {
		if err := msgtemplate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.status": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.ReceiverType(); ok {
		if err := msgtemplate.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.receiver_type": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.Format(); ok {
		if err := msgtemplate.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.format": %w`, err)}
		}
	}
	if _, ok := mtu.mutation.EventID(); mtu.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MsgTemplate.event"`)
	}
	return nil
}

func (mtu *MsgTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(msgtemplate.Table, msgtemplate.Columns, sqlgraph.NewFieldSpec(msgtemplate.FieldID, field.TypeInt))
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.UpdatedBy(); ok {
		_spec.SetField(msgtemplate.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := mtu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(msgtemplate.FieldUpdatedBy, field.TypeInt, value)
	}
	if mtu.mutation.UpdatedByCleared() {
		_spec.ClearField(msgtemplate.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.SetField(msgtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if mtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(msgtemplate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mtu.mutation.MsgTypeID(); ok {
		_spec.SetField(msgtemplate.FieldMsgTypeID, field.TypeInt, value)
	}
	if value, ok := mtu.mutation.AddedMsgTypeID(); ok {
		_spec.AddField(msgtemplate.FieldMsgTypeID, field.TypeInt, value)
	}
	if value, ok := mtu.mutation.TenantID(); ok {
		_spec.SetField(msgtemplate.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := mtu.mutation.AddedTenantID(); ok {
		_spec.AddField(msgtemplate.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.SetField(msgtemplate.FieldName, field.TypeString, value)
	}
	if value, ok := mtu.mutation.Status(); ok {
		_spec.SetField(msgtemplate.FieldStatus, field.TypeEnum, value)
	}
	if mtu.mutation.StatusCleared() {
		_spec.ClearField(msgtemplate.FieldStatus, field.TypeEnum)
	}
	if value, ok := mtu.mutation.ReceiverType(); ok {
		_spec.SetField(msgtemplate.FieldReceiverType, field.TypeEnum, value)
	}
	if value, ok := mtu.mutation.Format(); ok {
		_spec.SetField(msgtemplate.FieldFormat, field.TypeEnum, value)
	}
	if value, ok := mtu.mutation.Subject(); ok {
		_spec.SetField(msgtemplate.FieldSubject, field.TypeString, value)
	}
	if mtu.mutation.SubjectCleared() {
		_spec.ClearField(msgtemplate.FieldSubject, field.TypeString)
	}
	if value, ok := mtu.mutation.From(); ok {
		_spec.SetField(msgtemplate.FieldFrom, field.TypeString, value)
	}
	if mtu.mutation.FromCleared() {
		_spec.ClearField(msgtemplate.FieldFrom, field.TypeString)
	}
	if value, ok := mtu.mutation.To(); ok {
		_spec.SetField(msgtemplate.FieldTo, field.TypeString, value)
	}
	if mtu.mutation.ToCleared() {
		_spec.ClearField(msgtemplate.FieldTo, field.TypeString)
	}
	if value, ok := mtu.mutation.Cc(); ok {
		_spec.SetField(msgtemplate.FieldCc, field.TypeString, value)
	}
	if mtu.mutation.CcCleared() {
		_spec.ClearField(msgtemplate.FieldCc, field.TypeString)
	}
	if value, ok := mtu.mutation.Bcc(); ok {
		_spec.SetField(msgtemplate.FieldBcc, field.TypeString, value)
	}
	if mtu.mutation.BccCleared() {
		_spec.ClearField(msgtemplate.FieldBcc, field.TypeString)
	}
	if value, ok := mtu.mutation.Body(); ok {
		_spec.SetField(msgtemplate.FieldBody, field.TypeString, value)
	}
	if mtu.mutation.BodyCleared() {
		_spec.ClearField(msgtemplate.FieldBody, field.TypeString)
	}
	if value, ok := mtu.mutation.Tpl(); ok {
		_spec.SetField(msgtemplate.FieldTpl, field.TypeString, value)
	}
	if mtu.mutation.TplCleared() {
		_spec.ClearField(msgtemplate.FieldTpl, field.TypeString)
	}
	if value, ok := mtu.mutation.TplFileID(); ok {
		_spec.SetField(msgtemplate.FieldTplFileID, field.TypeInt, value)
	}
	if value, ok := mtu.mutation.AddedTplFileID(); ok {
		_spec.AddField(msgtemplate.FieldTplFileID, field.TypeInt, value)
	}
	if mtu.mutation.TplFileIDCleared() {
		_spec.ClearField(msgtemplate.FieldTplFileID, field.TypeInt)
	}
	if value, ok := mtu.mutation.Attachments(); ok {
		_spec.SetField(msgtemplate.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := mtu.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, msgtemplate.FieldAttachments, value)
		})
	}
	if mtu.mutation.AttachmentsCleared() {
		_spec.ClearField(msgtemplate.FieldAttachments, field.TypeJSON)
	}
	if value, ok := mtu.mutation.AttachmentsFileIds(); ok {
		_spec.SetField(msgtemplate.FieldAttachmentsFileIds, field.TypeJSON, value)
	}
	if value, ok := mtu.mutation.AppendedAttachmentsFileIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, msgtemplate.FieldAttachmentsFileIds, value)
		})
	}
	if mtu.mutation.AttachmentsFileIdsCleared() {
		_spec.ClearField(msgtemplate.FieldAttachmentsFileIds, field.TypeJSON)
	}
	if value, ok := mtu.mutation.Comments(); ok {
		_spec.SetField(msgtemplate.FieldComments, field.TypeString, value)
	}
	if mtu.mutation.CommentsCleared() {
		_spec.ClearField(msgtemplate.FieldComments, field.TypeString)
	}
	if mtu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgtemplate.EventTable,
			Columns: []string{msgtemplate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtu.schemaConfig.MsgTemplate
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgtemplate.EventTable,
			Columns: []string{msgtemplate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtu.schemaConfig.MsgTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mtu.schemaConfig.MsgTemplate
	ctx = internal.NewSchemaConfigContext(ctx, mtu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mtu.mutation.done = true
	return n, nil
}

// MsgTemplateUpdateOne is the builder for updating a single MsgTemplate entity.
type MsgTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgTemplateMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (mtuo *MsgTemplateUpdateOne) SetUpdatedBy(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.ResetUpdatedBy()
	mtuo.mutation.SetUpdatedBy(i)
	return mtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableUpdatedBy(i *int) *MsgTemplateUpdateOne {
	if i != nil {
		mtuo.SetUpdatedBy(*i)
	}
	return mtuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mtuo *MsgTemplateUpdateOne) AddUpdatedBy(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.AddUpdatedBy(i)
	return mtuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mtuo *MsgTemplateUpdateOne) ClearUpdatedBy() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearUpdatedBy()
	return mtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mtuo *MsgTemplateUpdateOne) SetUpdatedAt(t time.Time) *MsgTemplateUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableUpdatedAt(t *time.Time) *MsgTemplateUpdateOne {
	if t != nil {
		mtuo.SetUpdatedAt(*t)
	}
	return mtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mtuo *MsgTemplateUpdateOne) ClearUpdatedAt() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearUpdatedAt()
	return mtuo
}

// SetMsgTypeID sets the "msg_type_id" field.
func (mtuo *MsgTemplateUpdateOne) SetMsgTypeID(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.ResetMsgTypeID()
	mtuo.mutation.SetMsgTypeID(i)
	return mtuo
}

// AddMsgTypeID adds i to the "msg_type_id" field.
func (mtuo *MsgTemplateUpdateOne) AddMsgTypeID(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.AddMsgTypeID(i)
	return mtuo
}

// SetMsgEventID sets the "msg_event_id" field.
func (mtuo *MsgTemplateUpdateOne) SetMsgEventID(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.SetMsgEventID(i)
	return mtuo
}

// SetTenantID sets the "tenant_id" field.
func (mtuo *MsgTemplateUpdateOne) SetTenantID(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.ResetTenantID()
	mtuo.mutation.SetTenantID(i)
	return mtuo
}

// AddTenantID adds i to the "tenant_id" field.
func (mtuo *MsgTemplateUpdateOne) AddTenantID(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.AddTenantID(i)
	return mtuo
}

// SetName sets the "name" field.
func (mtuo *MsgTemplateUpdateOne) SetName(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// SetStatus sets the "status" field.
func (mtuo *MsgTemplateUpdateOne) SetStatus(ts typex.SimpleStatus) *MsgTemplateUpdateOne {
	mtuo.mutation.SetStatus(ts)
	return mtuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *MsgTemplateUpdateOne {
	if ts != nil {
		mtuo.SetStatus(*ts)
	}
	return mtuo
}

// ClearStatus clears the value of the "status" field.
func (mtuo *MsgTemplateUpdateOne) ClearStatus() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearStatus()
	return mtuo
}

// SetReceiverType sets the "receiver_type" field.
func (mtuo *MsgTemplateUpdateOne) SetReceiverType(pt profile.ReceiverType) *MsgTemplateUpdateOne {
	mtuo.mutation.SetReceiverType(pt)
	return mtuo
}

// SetFormat sets the "format" field.
func (mtuo *MsgTemplateUpdateOne) SetFormat(m msgtemplate.Format) *MsgTemplateUpdateOne {
	mtuo.mutation.SetFormat(m)
	return mtuo
}

// SetSubject sets the "subject" field.
func (mtuo *MsgTemplateUpdateOne) SetSubject(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetSubject(s)
	return mtuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableSubject(s *string) *MsgTemplateUpdateOne {
	if s != nil {
		mtuo.SetSubject(*s)
	}
	return mtuo
}

// ClearSubject clears the value of the "subject" field.
func (mtuo *MsgTemplateUpdateOne) ClearSubject() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearSubject()
	return mtuo
}

// SetFrom sets the "from" field.
func (mtuo *MsgTemplateUpdateOne) SetFrom(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetFrom(s)
	return mtuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableFrom(s *string) *MsgTemplateUpdateOne {
	if s != nil {
		mtuo.SetFrom(*s)
	}
	return mtuo
}

// ClearFrom clears the value of the "from" field.
func (mtuo *MsgTemplateUpdateOne) ClearFrom() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearFrom()
	return mtuo
}

// SetTo sets the "to" field.
func (mtuo *MsgTemplateUpdateOne) SetTo(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetTo(s)
	return mtuo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableTo(s *string) *MsgTemplateUpdateOne {
	if s != nil {
		mtuo.SetTo(*s)
	}
	return mtuo
}

// ClearTo clears the value of the "to" field.
func (mtuo *MsgTemplateUpdateOne) ClearTo() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearTo()
	return mtuo
}

// SetCc sets the "cc" field.
func (mtuo *MsgTemplateUpdateOne) SetCc(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetCc(s)
	return mtuo
}

// SetNillableCc sets the "cc" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableCc(s *string) *MsgTemplateUpdateOne {
	if s != nil {
		mtuo.SetCc(*s)
	}
	return mtuo
}

// ClearCc clears the value of the "cc" field.
func (mtuo *MsgTemplateUpdateOne) ClearCc() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearCc()
	return mtuo
}

// SetBcc sets the "bcc" field.
func (mtuo *MsgTemplateUpdateOne) SetBcc(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetBcc(s)
	return mtuo
}

// SetNillableBcc sets the "bcc" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableBcc(s *string) *MsgTemplateUpdateOne {
	if s != nil {
		mtuo.SetBcc(*s)
	}
	return mtuo
}

// ClearBcc clears the value of the "bcc" field.
func (mtuo *MsgTemplateUpdateOne) ClearBcc() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearBcc()
	return mtuo
}

// SetBody sets the "body" field.
func (mtuo *MsgTemplateUpdateOne) SetBody(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetBody(s)
	return mtuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableBody(s *string) *MsgTemplateUpdateOne {
	if s != nil {
		mtuo.SetBody(*s)
	}
	return mtuo
}

// ClearBody clears the value of the "body" field.
func (mtuo *MsgTemplateUpdateOne) ClearBody() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearBody()
	return mtuo
}

// SetTpl sets the "tpl" field.
func (mtuo *MsgTemplateUpdateOne) SetTpl(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetTpl(s)
	return mtuo
}

// SetNillableTpl sets the "tpl" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableTpl(s *string) *MsgTemplateUpdateOne {
	if s != nil {
		mtuo.SetTpl(*s)
	}
	return mtuo
}

// ClearTpl clears the value of the "tpl" field.
func (mtuo *MsgTemplateUpdateOne) ClearTpl() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearTpl()
	return mtuo
}

// SetTplFileID sets the "tpl_file_id" field.
func (mtuo *MsgTemplateUpdateOne) SetTplFileID(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.ResetTplFileID()
	mtuo.mutation.SetTplFileID(i)
	return mtuo
}

// SetNillableTplFileID sets the "tpl_file_id" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableTplFileID(i *int) *MsgTemplateUpdateOne {
	if i != nil {
		mtuo.SetTplFileID(*i)
	}
	return mtuo
}

// AddTplFileID adds i to the "tpl_file_id" field.
func (mtuo *MsgTemplateUpdateOne) AddTplFileID(i int) *MsgTemplateUpdateOne {
	mtuo.mutation.AddTplFileID(i)
	return mtuo
}

// ClearTplFileID clears the value of the "tpl_file_id" field.
func (mtuo *MsgTemplateUpdateOne) ClearTplFileID() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearTplFileID()
	return mtuo
}

// SetAttachments sets the "attachments" field.
func (mtuo *MsgTemplateUpdateOne) SetAttachments(s []string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetAttachments(s)
	return mtuo
}

// AppendAttachments appends s to the "attachments" field.
func (mtuo *MsgTemplateUpdateOne) AppendAttachments(s []string) *MsgTemplateUpdateOne {
	mtuo.mutation.AppendAttachments(s)
	return mtuo
}

// ClearAttachments clears the value of the "attachments" field.
func (mtuo *MsgTemplateUpdateOne) ClearAttachments() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearAttachments()
	return mtuo
}

// SetAttachmentsFileIds sets the "attachments_file_ids" field.
func (mtuo *MsgTemplateUpdateOne) SetAttachmentsFileIds(i []int) *MsgTemplateUpdateOne {
	mtuo.mutation.SetAttachmentsFileIds(i)
	return mtuo
}

// AppendAttachmentsFileIds appends i to the "attachments_file_ids" field.
func (mtuo *MsgTemplateUpdateOne) AppendAttachmentsFileIds(i []int) *MsgTemplateUpdateOne {
	mtuo.mutation.AppendAttachmentsFileIds(i)
	return mtuo
}

// ClearAttachmentsFileIds clears the value of the "attachments_file_ids" field.
func (mtuo *MsgTemplateUpdateOne) ClearAttachmentsFileIds() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearAttachmentsFileIds()
	return mtuo
}

// SetComments sets the "comments" field.
func (mtuo *MsgTemplateUpdateOne) SetComments(s string) *MsgTemplateUpdateOne {
	mtuo.mutation.SetComments(s)
	return mtuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (mtuo *MsgTemplateUpdateOne) SetNillableComments(s *string) *MsgTemplateUpdateOne {
	if s != nil {
		mtuo.SetComments(*s)
	}
	return mtuo
}

// ClearComments clears the value of the "comments" field.
func (mtuo *MsgTemplateUpdateOne) ClearComments() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearComments()
	return mtuo
}

// SetEventID sets the "event" edge to the MsgEvent entity by ID.
func (mtuo *MsgTemplateUpdateOne) SetEventID(id int) *MsgTemplateUpdateOne {
	mtuo.mutation.SetEventID(id)
	return mtuo
}

// SetEvent sets the "event" edge to the MsgEvent entity.
func (mtuo *MsgTemplateUpdateOne) SetEvent(m *MsgEvent) *MsgTemplateUpdateOne {
	return mtuo.SetEventID(m.ID)
}

// Mutation returns the MsgTemplateMutation object of the builder.
func (mtuo *MsgTemplateUpdateOne) Mutation() *MsgTemplateMutation {
	return mtuo.mutation
}

// ClearEvent clears the "event" edge to the MsgEvent entity.
func (mtuo *MsgTemplateUpdateOne) ClearEvent() *MsgTemplateUpdateOne {
	mtuo.mutation.ClearEvent()
	return mtuo
}

// Where appends a list predicates to the MsgTemplateUpdate builder.
func (mtuo *MsgTemplateUpdateOne) Where(ps ...predicate.MsgTemplate) *MsgTemplateUpdateOne {
	mtuo.mutation.Where(ps...)
	return mtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MsgTemplateUpdateOne) Select(field string, fields ...string) *MsgTemplateUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MsgTemplate entity.
func (mtuo *MsgTemplateUpdateOne) Save(ctx context.Context) (*MsgTemplate, error) {
	return withHooks(ctx, mtuo.sqlSave, mtuo.mutation, mtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MsgTemplateUpdateOne) SaveX(ctx context.Context) *MsgTemplate {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MsgTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MsgTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtuo *MsgTemplateUpdateOne) check() error {
	if v, ok := mtuo.mutation.Name(); ok {
		if err := msgtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.name": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.Status(); ok {
		if err := msgtemplate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.status": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.ReceiverType(); ok {
		if err := msgtemplate.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.receiver_type": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.Format(); ok {
		if err := msgtemplate.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "MsgTemplate.format": %w`, err)}
		}
	}
	if _, ok := mtuo.mutation.EventID(); mtuo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MsgTemplate.event"`)
	}
	return nil
}

func (mtuo *MsgTemplateUpdateOne) sqlSave(ctx context.Context) (_node *MsgTemplate, err error) {
	if err := mtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(msgtemplate.Table, msgtemplate.Columns, sqlgraph.NewFieldSpec(msgtemplate.FieldID, field.TypeInt))
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msgtemplate.FieldID)
		for _, f := range fields {
			if !msgtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msgtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(msgtemplate.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := mtuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(msgtemplate.FieldUpdatedBy, field.TypeInt, value)
	}
	if mtuo.mutation.UpdatedByCleared() {
		_spec.ClearField(msgtemplate.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(msgtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if mtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(msgtemplate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mtuo.mutation.MsgTypeID(); ok {
		_spec.SetField(msgtemplate.FieldMsgTypeID, field.TypeInt, value)
	}
	if value, ok := mtuo.mutation.AddedMsgTypeID(); ok {
		_spec.AddField(msgtemplate.FieldMsgTypeID, field.TypeInt, value)
	}
	if value, ok := mtuo.mutation.TenantID(); ok {
		_spec.SetField(msgtemplate.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := mtuo.mutation.AddedTenantID(); ok {
		_spec.AddField(msgtemplate.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.SetField(msgtemplate.FieldName, field.TypeString, value)
	}
	if value, ok := mtuo.mutation.Status(); ok {
		_spec.SetField(msgtemplate.FieldStatus, field.TypeEnum, value)
	}
	if mtuo.mutation.StatusCleared() {
		_spec.ClearField(msgtemplate.FieldStatus, field.TypeEnum)
	}
	if value, ok := mtuo.mutation.ReceiverType(); ok {
		_spec.SetField(msgtemplate.FieldReceiverType, field.TypeEnum, value)
	}
	if value, ok := mtuo.mutation.Format(); ok {
		_spec.SetField(msgtemplate.FieldFormat, field.TypeEnum, value)
	}
	if value, ok := mtuo.mutation.Subject(); ok {
		_spec.SetField(msgtemplate.FieldSubject, field.TypeString, value)
	}
	if mtuo.mutation.SubjectCleared() {
		_spec.ClearField(msgtemplate.FieldSubject, field.TypeString)
	}
	if value, ok := mtuo.mutation.From(); ok {
		_spec.SetField(msgtemplate.FieldFrom, field.TypeString, value)
	}
	if mtuo.mutation.FromCleared() {
		_spec.ClearField(msgtemplate.FieldFrom, field.TypeString)
	}
	if value, ok := mtuo.mutation.To(); ok {
		_spec.SetField(msgtemplate.FieldTo, field.TypeString, value)
	}
	if mtuo.mutation.ToCleared() {
		_spec.ClearField(msgtemplate.FieldTo, field.TypeString)
	}
	if value, ok := mtuo.mutation.Cc(); ok {
		_spec.SetField(msgtemplate.FieldCc, field.TypeString, value)
	}
	if mtuo.mutation.CcCleared() {
		_spec.ClearField(msgtemplate.FieldCc, field.TypeString)
	}
	if value, ok := mtuo.mutation.Bcc(); ok {
		_spec.SetField(msgtemplate.FieldBcc, field.TypeString, value)
	}
	if mtuo.mutation.BccCleared() {
		_spec.ClearField(msgtemplate.FieldBcc, field.TypeString)
	}
	if value, ok := mtuo.mutation.Body(); ok {
		_spec.SetField(msgtemplate.FieldBody, field.TypeString, value)
	}
	if mtuo.mutation.BodyCleared() {
		_spec.ClearField(msgtemplate.FieldBody, field.TypeString)
	}
	if value, ok := mtuo.mutation.Tpl(); ok {
		_spec.SetField(msgtemplate.FieldTpl, field.TypeString, value)
	}
	if mtuo.mutation.TplCleared() {
		_spec.ClearField(msgtemplate.FieldTpl, field.TypeString)
	}
	if value, ok := mtuo.mutation.TplFileID(); ok {
		_spec.SetField(msgtemplate.FieldTplFileID, field.TypeInt, value)
	}
	if value, ok := mtuo.mutation.AddedTplFileID(); ok {
		_spec.AddField(msgtemplate.FieldTplFileID, field.TypeInt, value)
	}
	if mtuo.mutation.TplFileIDCleared() {
		_spec.ClearField(msgtemplate.FieldTplFileID, field.TypeInt)
	}
	if value, ok := mtuo.mutation.Attachments(); ok {
		_spec.SetField(msgtemplate.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := mtuo.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, msgtemplate.FieldAttachments, value)
		})
	}
	if mtuo.mutation.AttachmentsCleared() {
		_spec.ClearField(msgtemplate.FieldAttachments, field.TypeJSON)
	}
	if value, ok := mtuo.mutation.AttachmentsFileIds(); ok {
		_spec.SetField(msgtemplate.FieldAttachmentsFileIds, field.TypeJSON, value)
	}
	if value, ok := mtuo.mutation.AppendedAttachmentsFileIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, msgtemplate.FieldAttachmentsFileIds, value)
		})
	}
	if mtuo.mutation.AttachmentsFileIdsCleared() {
		_spec.ClearField(msgtemplate.FieldAttachmentsFileIds, field.TypeJSON)
	}
	if value, ok := mtuo.mutation.Comments(); ok {
		_spec.SetField(msgtemplate.FieldComments, field.TypeString, value)
	}
	if mtuo.mutation.CommentsCleared() {
		_spec.ClearField(msgtemplate.FieldComments, field.TypeString)
	}
	if mtuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgtemplate.EventTable,
			Columns: []string{msgtemplate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtuo.schemaConfig.MsgTemplate
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgtemplate.EventTable,
			Columns: []string{msgtemplate.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtuo.schemaConfig.MsgTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mtuo.schemaConfig.MsgTemplate
	ctx = internal.NewSchemaConfigContext(ctx, mtuo.schemaConfig)
	_node = &MsgTemplate{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mtuo.mutation.done = true
	return _node, nil
}
