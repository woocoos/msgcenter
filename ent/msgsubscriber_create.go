// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msgsubscriber"
	"github.com/woocoos/msgcenter/ent/msgtype"
)

// MsgSubscriberCreate is the builder for creating a MsgSubscriber entity.
type MsgSubscriberCreate struct {
	config
	mutation *MsgSubscriberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (msc *MsgSubscriberCreate) SetCreatedBy(i int) *MsgSubscriberCreate {
	msc.mutation.SetCreatedBy(i)
	return msc
}

// SetCreatedAt sets the "created_at" field.
func (msc *MsgSubscriberCreate) SetCreatedAt(t time.Time) *MsgSubscriberCreate {
	msc.mutation.SetCreatedAt(t)
	return msc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (msc *MsgSubscriberCreate) SetNillableCreatedAt(t *time.Time) *MsgSubscriberCreate {
	if t != nil {
		msc.SetCreatedAt(*t)
	}
	return msc
}

// SetUpdatedBy sets the "updated_by" field.
func (msc *MsgSubscriberCreate) SetUpdatedBy(i int) *MsgSubscriberCreate {
	msc.mutation.SetUpdatedBy(i)
	return msc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (msc *MsgSubscriberCreate) SetNillableUpdatedBy(i *int) *MsgSubscriberCreate {
	if i != nil {
		msc.SetUpdatedBy(*i)
	}
	return msc
}

// SetUpdatedAt sets the "updated_at" field.
func (msc *MsgSubscriberCreate) SetUpdatedAt(t time.Time) *MsgSubscriberCreate {
	msc.mutation.SetUpdatedAt(t)
	return msc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (msc *MsgSubscriberCreate) SetNillableUpdatedAt(t *time.Time) *MsgSubscriberCreate {
	if t != nil {
		msc.SetUpdatedAt(*t)
	}
	return msc
}

// SetMsgTypeID sets the "msg_type_id" field.
func (msc *MsgSubscriberCreate) SetMsgTypeID(i int) *MsgSubscriberCreate {
	msc.mutation.SetMsgTypeID(i)
	return msc
}

// SetTenantID sets the "tenant_id" field.
func (msc *MsgSubscriberCreate) SetTenantID(i int) *MsgSubscriberCreate {
	msc.mutation.SetTenantID(i)
	return msc
}

// SetUserID sets the "user_id" field.
func (msc *MsgSubscriberCreate) SetUserID(i int) *MsgSubscriberCreate {
	msc.mutation.SetUserID(i)
	return msc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (msc *MsgSubscriberCreate) SetNillableUserID(i *int) *MsgSubscriberCreate {
	if i != nil {
		msc.SetUserID(*i)
	}
	return msc
}

// SetOrgRoleID sets the "org_role_id" field.
func (msc *MsgSubscriberCreate) SetOrgRoleID(i int) *MsgSubscriberCreate {
	msc.mutation.SetOrgRoleID(i)
	return msc
}

// SetNillableOrgRoleID sets the "org_role_id" field if the given value is not nil.
func (msc *MsgSubscriberCreate) SetNillableOrgRoleID(i *int) *MsgSubscriberCreate {
	if i != nil {
		msc.SetOrgRoleID(*i)
	}
	return msc
}

// SetExclude sets the "exclude" field.
func (msc *MsgSubscriberCreate) SetExclude(b bool) *MsgSubscriberCreate {
	msc.mutation.SetExclude(b)
	return msc
}

// SetNillableExclude sets the "exclude" field if the given value is not nil.
func (msc *MsgSubscriberCreate) SetNillableExclude(b *bool) *MsgSubscriberCreate {
	if b != nil {
		msc.SetExclude(*b)
	}
	return msc
}

// SetID sets the "id" field.
func (msc *MsgSubscriberCreate) SetID(i int) *MsgSubscriberCreate {
	msc.mutation.SetID(i)
	return msc
}

// SetMsgType sets the "msg_type" edge to the MsgType entity.
func (msc *MsgSubscriberCreate) SetMsgType(m *MsgType) *MsgSubscriberCreate {
	return msc.SetMsgTypeID(m.ID)
}

// Mutation returns the MsgSubscriberMutation object of the builder.
func (msc *MsgSubscriberCreate) Mutation() *MsgSubscriberMutation {
	return msc.mutation
}

// Save creates the MsgSubscriber in the database.
func (msc *MsgSubscriberCreate) Save(ctx context.Context) (*MsgSubscriber, error) {
	if err := msc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MsgSubscriberCreate) SaveX(ctx context.Context) *MsgSubscriber {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MsgSubscriberCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MsgSubscriberCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msc *MsgSubscriberCreate) defaults() error {
	if _, ok := msc.mutation.CreatedAt(); !ok {
		if msgsubscriber.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized msgsubscriber.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := msgsubscriber.DefaultCreatedAt()
		msc.mutation.SetCreatedAt(v)
	}
	if _, ok := msc.mutation.Exclude(); !ok {
		v := msgsubscriber.DefaultExclude
		msc.mutation.SetExclude(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (msc *MsgSubscriberCreate) check() error {
	if _, ok := msc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "MsgSubscriber.created_by"`)}
	}
	if _, ok := msc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MsgSubscriber.created_at"`)}
	}
	if _, ok := msc.mutation.MsgTypeID(); !ok {
		return &ValidationError{Name: "msg_type_id", err: errors.New(`ent: missing required field "MsgSubscriber.msg_type_id"`)}
	}
	if _, ok := msc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "MsgSubscriber.tenant_id"`)}
	}
	if _, ok := msc.mutation.MsgTypeID(); !ok {
		return &ValidationError{Name: "msg_type", err: errors.New(`ent: missing required edge "MsgSubscriber.msg_type"`)}
	}
	return nil
}

func (msc *MsgSubscriberCreate) sqlSave(ctx context.Context) (*MsgSubscriber, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MsgSubscriberCreate) createSpec() (*MsgSubscriber, *sqlgraph.CreateSpec) {
	var (
		_node = &MsgSubscriber{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(msgsubscriber.Table, sqlgraph.NewFieldSpec(msgsubscriber.FieldID, field.TypeInt))
	)
	_spec.Schema = msc.schemaConfig.MsgSubscriber
	_spec.OnConflict = msc.conflict
	if id, ok := msc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := msc.mutation.CreatedBy(); ok {
		_spec.SetField(msgsubscriber.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := msc.mutation.CreatedAt(); ok {
		_spec.SetField(msgsubscriber.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := msc.mutation.UpdatedBy(); ok {
		_spec.SetField(msgsubscriber.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := msc.mutation.UpdatedAt(); ok {
		_spec.SetField(msgsubscriber.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := msc.mutation.TenantID(); ok {
		_spec.SetField(msgsubscriber.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := msc.mutation.UserID(); ok {
		_spec.SetField(msgsubscriber.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := msc.mutation.OrgRoleID(); ok {
		_spec.SetField(msgsubscriber.FieldOrgRoleID, field.TypeInt, value)
		_node.OrgRoleID = value
	}
	if value, ok := msc.mutation.Exclude(); ok {
		_spec.SetField(msgsubscriber.FieldExclude, field.TypeBool, value)
		_node.Exclude = value
	}
	if nodes := msc.mutation.MsgTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgsubscriber.MsgTypeTable,
			Columns: []string{msgsubscriber.MsgTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgtype.FieldID, field.TypeInt),
			},
		}
		edge.Schema = msc.schemaConfig.MsgSubscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MsgTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgSubscriber.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgSubscriberUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (msc *MsgSubscriberCreate) OnConflict(opts ...sql.ConflictOption) *MsgSubscriberUpsertOne {
	msc.conflict = opts
	return &MsgSubscriberUpsertOne{
		create: msc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgSubscriber.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (msc *MsgSubscriberCreate) OnConflictColumns(columns ...string) *MsgSubscriberUpsertOne {
	msc.conflict = append(msc.conflict, sql.ConflictColumns(columns...))
	return &MsgSubscriberUpsertOne{
		create: msc,
	}
}

type (
	// MsgSubscriberUpsertOne is the builder for "upsert"-ing
	//  one MsgSubscriber node.
	MsgSubscriberUpsertOne struct {
		create *MsgSubscriberCreate
	}

	// MsgSubscriberUpsert is the "OnConflict" setter.
	MsgSubscriberUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgSubscriberUpsert) SetUpdatedBy(v int) *MsgSubscriberUpsert {
	u.Set(msgsubscriber.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgSubscriberUpsert) UpdateUpdatedBy() *MsgSubscriberUpsert {
	u.SetExcluded(msgsubscriber.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgSubscriberUpsert) AddUpdatedBy(v int) *MsgSubscriberUpsert {
	u.Add(msgsubscriber.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgSubscriberUpsert) ClearUpdatedBy() *MsgSubscriberUpsert {
	u.SetNull(msgsubscriber.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgSubscriberUpsert) SetUpdatedAt(v time.Time) *MsgSubscriberUpsert {
	u.Set(msgsubscriber.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgSubscriberUpsert) UpdateUpdatedAt() *MsgSubscriberUpsert {
	u.SetExcluded(msgsubscriber.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgSubscriberUpsert) ClearUpdatedAt() *MsgSubscriberUpsert {
	u.SetNull(msgsubscriber.FieldUpdatedAt)
	return u
}

// SetMsgTypeID sets the "msg_type_id" field.
func (u *MsgSubscriberUpsert) SetMsgTypeID(v int) *MsgSubscriberUpsert {
	u.Set(msgsubscriber.FieldMsgTypeID, v)
	return u
}

// UpdateMsgTypeID sets the "msg_type_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsert) UpdateMsgTypeID() *MsgSubscriberUpsert {
	u.SetExcluded(msgsubscriber.FieldMsgTypeID)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgSubscriberUpsert) SetTenantID(v int) *MsgSubscriberUpsert {
	u.Set(msgsubscriber.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsert) UpdateTenantID() *MsgSubscriberUpsert {
	u.SetExcluded(msgsubscriber.FieldTenantID)
	return u
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgSubscriberUpsert) AddTenantID(v int) *MsgSubscriberUpsert {
	u.Add(msgsubscriber.FieldTenantID, v)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MsgSubscriberUpsert) SetUserID(v int) *MsgSubscriberUpsert {
	u.Set(msgsubscriber.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsert) UpdateUserID() *MsgSubscriberUpsert {
	u.SetExcluded(msgsubscriber.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *MsgSubscriberUpsert) AddUserID(v int) *MsgSubscriberUpsert {
	u.Add(msgsubscriber.FieldUserID, v)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *MsgSubscriberUpsert) ClearUserID() *MsgSubscriberUpsert {
	u.SetNull(msgsubscriber.FieldUserID)
	return u
}

// SetOrgRoleID sets the "org_role_id" field.
func (u *MsgSubscriberUpsert) SetOrgRoleID(v int) *MsgSubscriberUpsert {
	u.Set(msgsubscriber.FieldOrgRoleID, v)
	return u
}

// UpdateOrgRoleID sets the "org_role_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsert) UpdateOrgRoleID() *MsgSubscriberUpsert {
	u.SetExcluded(msgsubscriber.FieldOrgRoleID)
	return u
}

// AddOrgRoleID adds v to the "org_role_id" field.
func (u *MsgSubscriberUpsert) AddOrgRoleID(v int) *MsgSubscriberUpsert {
	u.Add(msgsubscriber.FieldOrgRoleID, v)
	return u
}

// ClearOrgRoleID clears the value of the "org_role_id" field.
func (u *MsgSubscriberUpsert) ClearOrgRoleID() *MsgSubscriberUpsert {
	u.SetNull(msgsubscriber.FieldOrgRoleID)
	return u
}

// SetExclude sets the "exclude" field.
func (u *MsgSubscriberUpsert) SetExclude(v bool) *MsgSubscriberUpsert {
	u.Set(msgsubscriber.FieldExclude, v)
	return u
}

// UpdateExclude sets the "exclude" field to the value that was provided on create.
func (u *MsgSubscriberUpsert) UpdateExclude() *MsgSubscriberUpsert {
	u.SetExcluded(msgsubscriber.FieldExclude)
	return u
}

// ClearExclude clears the value of the "exclude" field.
func (u *MsgSubscriberUpsert) ClearExclude() *MsgSubscriberUpsert {
	u.SetNull(msgsubscriber.FieldExclude)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MsgSubscriber.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msgsubscriber.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgSubscriberUpsertOne) UpdateNewValues() *MsgSubscriberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(msgsubscriber.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(msgsubscriber.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(msgsubscriber.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgSubscriber.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MsgSubscriberUpsertOne) Ignore() *MsgSubscriberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgSubscriberUpsertOne) DoNothing() *MsgSubscriberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgSubscriberCreate.OnConflict
// documentation for more info.
func (u *MsgSubscriberUpsertOne) Update(set func(*MsgSubscriberUpsert)) *MsgSubscriberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgSubscriberUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgSubscriberUpsertOne) SetUpdatedBy(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgSubscriberUpsertOne) AddUpdatedBy(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgSubscriberUpsertOne) UpdateUpdatedBy() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgSubscriberUpsertOne) ClearUpdatedBy() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgSubscriberUpsertOne) SetUpdatedAt(v time.Time) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgSubscriberUpsertOne) UpdateUpdatedAt() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgSubscriberUpsertOne) ClearUpdatedAt() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetMsgTypeID sets the "msg_type_id" field.
func (u *MsgSubscriberUpsertOne) SetMsgTypeID(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetMsgTypeID(v)
	})
}

// UpdateMsgTypeID sets the "msg_type_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsertOne) UpdateMsgTypeID() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateMsgTypeID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgSubscriberUpsertOne) SetTenantID(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgSubscriberUpsertOne) AddTenantID(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsertOne) UpdateTenantID() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateTenantID()
	})
}

// SetUserID sets the "user_id" field.
func (u *MsgSubscriberUpsertOne) SetUserID(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *MsgSubscriberUpsertOne) AddUserID(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsertOne) UpdateUserID() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *MsgSubscriberUpsertOne) ClearUserID() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearUserID()
	})
}

// SetOrgRoleID sets the "org_role_id" field.
func (u *MsgSubscriberUpsertOne) SetOrgRoleID(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetOrgRoleID(v)
	})
}

// AddOrgRoleID adds v to the "org_role_id" field.
func (u *MsgSubscriberUpsertOne) AddOrgRoleID(v int) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.AddOrgRoleID(v)
	})
}

// UpdateOrgRoleID sets the "org_role_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsertOne) UpdateOrgRoleID() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateOrgRoleID()
	})
}

// ClearOrgRoleID clears the value of the "org_role_id" field.
func (u *MsgSubscriberUpsertOne) ClearOrgRoleID() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearOrgRoleID()
	})
}

// SetExclude sets the "exclude" field.
func (u *MsgSubscriberUpsertOne) SetExclude(v bool) *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetExclude(v)
	})
}

// UpdateExclude sets the "exclude" field to the value that was provided on create.
func (u *MsgSubscriberUpsertOne) UpdateExclude() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateExclude()
	})
}

// ClearExclude clears the value of the "exclude" field.
func (u *MsgSubscriberUpsertOne) ClearExclude() *MsgSubscriberUpsertOne {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearExclude()
	})
}

// Exec executes the query.
func (u *MsgSubscriberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgSubscriberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgSubscriberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MsgSubscriberUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MsgSubscriberUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MsgSubscriberCreateBulk is the builder for creating many MsgSubscriber entities in bulk.
type MsgSubscriberCreateBulk struct {
	config
	builders []*MsgSubscriberCreate
	conflict []sql.ConflictOption
}

// Save creates the MsgSubscriber entities in the database.
func (mscb *MsgSubscriberCreateBulk) Save(ctx context.Context) ([]*MsgSubscriber, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MsgSubscriber, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgSubscriberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MsgSubscriberCreateBulk) SaveX(ctx context.Context) []*MsgSubscriber {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MsgSubscriberCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MsgSubscriberCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgSubscriber.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgSubscriberUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (mscb *MsgSubscriberCreateBulk) OnConflict(opts ...sql.ConflictOption) *MsgSubscriberUpsertBulk {
	mscb.conflict = opts
	return &MsgSubscriberUpsertBulk{
		create: mscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgSubscriber.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mscb *MsgSubscriberCreateBulk) OnConflictColumns(columns ...string) *MsgSubscriberUpsertBulk {
	mscb.conflict = append(mscb.conflict, sql.ConflictColumns(columns...))
	return &MsgSubscriberUpsertBulk{
		create: mscb,
	}
}

// MsgSubscriberUpsertBulk is the builder for "upsert"-ing
// a bulk of MsgSubscriber nodes.
type MsgSubscriberUpsertBulk struct {
	create *MsgSubscriberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MsgSubscriber.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msgsubscriber.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgSubscriberUpsertBulk) UpdateNewValues() *MsgSubscriberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(msgsubscriber.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(msgsubscriber.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(msgsubscriber.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgSubscriber.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MsgSubscriberUpsertBulk) Ignore() *MsgSubscriberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgSubscriberUpsertBulk) DoNothing() *MsgSubscriberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgSubscriberCreateBulk.OnConflict
// documentation for more info.
func (u *MsgSubscriberUpsertBulk) Update(set func(*MsgSubscriberUpsert)) *MsgSubscriberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgSubscriberUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MsgSubscriberUpsertBulk) SetUpdatedBy(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *MsgSubscriberUpsertBulk) AddUpdatedBy(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MsgSubscriberUpsertBulk) UpdateUpdatedBy() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *MsgSubscriberUpsertBulk) ClearUpdatedBy() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgSubscriberUpsertBulk) SetUpdatedAt(v time.Time) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgSubscriberUpsertBulk) UpdateUpdatedAt() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgSubscriberUpsertBulk) ClearUpdatedAt() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetMsgTypeID sets the "msg_type_id" field.
func (u *MsgSubscriberUpsertBulk) SetMsgTypeID(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetMsgTypeID(v)
	})
}

// UpdateMsgTypeID sets the "msg_type_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsertBulk) UpdateMsgTypeID() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateMsgTypeID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *MsgSubscriberUpsertBulk) SetTenantID(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *MsgSubscriberUpsertBulk) AddTenantID(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsertBulk) UpdateTenantID() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateTenantID()
	})
}

// SetUserID sets the "user_id" field.
func (u *MsgSubscriberUpsertBulk) SetUserID(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *MsgSubscriberUpsertBulk) AddUserID(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsertBulk) UpdateUserID() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *MsgSubscriberUpsertBulk) ClearUserID() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearUserID()
	})
}

// SetOrgRoleID sets the "org_role_id" field.
func (u *MsgSubscriberUpsertBulk) SetOrgRoleID(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetOrgRoleID(v)
	})
}

// AddOrgRoleID adds v to the "org_role_id" field.
func (u *MsgSubscriberUpsertBulk) AddOrgRoleID(v int) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.AddOrgRoleID(v)
	})
}

// UpdateOrgRoleID sets the "org_role_id" field to the value that was provided on create.
func (u *MsgSubscriberUpsertBulk) UpdateOrgRoleID() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateOrgRoleID()
	})
}

// ClearOrgRoleID clears the value of the "org_role_id" field.
func (u *MsgSubscriberUpsertBulk) ClearOrgRoleID() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearOrgRoleID()
	})
}

// SetExclude sets the "exclude" field.
func (u *MsgSubscriberUpsertBulk) SetExclude(v bool) *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.SetExclude(v)
	})
}

// UpdateExclude sets the "exclude" field to the value that was provided on create.
func (u *MsgSubscriberUpsertBulk) UpdateExclude() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.UpdateExclude()
	})
}

// ClearExclude clears the value of the "exclude" field.
func (u *MsgSubscriberUpsertBulk) ClearExclude() *MsgSubscriberUpsertBulk {
	return u.Update(func(s *MsgSubscriberUpsert) {
		s.ClearExclude()
	})
}

// Exec executes the query.
func (u *MsgSubscriberUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MsgSubscriberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgSubscriberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgSubscriberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
