// Code generated by ent, DO NOT EDIT.

package nlogalert

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the nlogalert type in the database.
	Label = "nlog_alert"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNlogID holds the string denoting the nlog_id field in the database.
	FieldNlogID = "nlog_id"
	// FieldAlertID holds the string denoting the alert_id field in the database.
	FieldAlertID = "alert_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeNlog holds the string denoting the nlog edge name in mutations.
	EdgeNlog = "nlog"
	// EdgeAlert holds the string denoting the alert edge name in mutations.
	EdgeAlert = "alert"
	// Table holds the table name of the nlogalert in the database.
	Table = "msg_nlog_alert"
	// NlogTable is the table that holds the nlog relation/edge.
	NlogTable = "msg_nlog_alert"
	// NlogInverseTable is the table name for the Nlog entity.
	// It exists in this package in order to avoid circular dependency with the "nlog" package.
	NlogInverseTable = "msg_nlog"
	// NlogColumn is the table column denoting the nlog relation/edge.
	NlogColumn = "nlog_id"
	// AlertTable is the table that holds the alert relation/edge.
	AlertTable = "msg_nlog_alert"
	// AlertInverseTable is the table name for the MsgAlert entity.
	// It exists in this package in order to avoid circular dependency with the "msgalert" package.
	AlertInverseTable = "msg_alert"
	// AlertColumn is the table column denoting the alert relation/edge.
	AlertColumn = "alert_id"
)

// Columns holds all SQL columns for nlogalert fields.
var Columns = []string{
	FieldID,
	FieldNlogID,
	FieldAlertID,
	FieldState,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateFiring  State = "firing"
	StateResolve State = "resolve"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateFiring, StateResolve:
		return nil
	default:
		return fmt.Errorf("nlogalert: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the NlogAlert queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNlogID orders the results by the nlog_id field.
func ByNlogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNlogID, opts...).ToFunc()
}

// ByAlertID orders the results by the alert_id field.
func ByAlertID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlertID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByNlogField orders the results by nlog field.
func ByNlogField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNlogStep(), sql.OrderByField(field, opts...))
	}
}

// ByAlertField orders the results by alert field.
func ByAlertField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlertStep(), sql.OrderByField(field, opts...))
	}
}
func newNlogStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NlogInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NlogTable, NlogColumn),
	)
}
func newAlertStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlertInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AlertTable, AlertColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e State) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *State) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = State(str)
	if err := StateValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid State", str)
	}
	return nil
}
