// Code generated by ent, DO NOT EDIT.

package nlogalert

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldLTE(FieldID, id))
}

// NlogID applies equality check predicate on the "nlog_id" field. It's identical to NlogIDEQ.
func NlogID(v int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldEQ(FieldNlogID, v))
}

// AlertID applies equality check predicate on the "alert_id" field. It's identical to AlertIDEQ.
func AlertID(v int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldEQ(FieldAlertID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldEQ(FieldCreatedAt, v))
}

// NlogIDEQ applies the EQ predicate on the "nlog_id" field.
func NlogIDEQ(v int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldEQ(FieldNlogID, v))
}

// NlogIDNEQ applies the NEQ predicate on the "nlog_id" field.
func NlogIDNEQ(v int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldNEQ(FieldNlogID, v))
}

// NlogIDIn applies the In predicate on the "nlog_id" field.
func NlogIDIn(vs ...int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldIn(FieldNlogID, vs...))
}

// NlogIDNotIn applies the NotIn predicate on the "nlog_id" field.
func NlogIDNotIn(vs ...int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldNotIn(FieldNlogID, vs...))
}

// AlertIDEQ applies the EQ predicate on the "alert_id" field.
func AlertIDEQ(v int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldEQ(FieldAlertID, v))
}

// AlertIDNEQ applies the NEQ predicate on the "alert_id" field.
func AlertIDNEQ(v int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldNEQ(FieldAlertID, v))
}

// AlertIDIn applies the In predicate on the "alert_id" field.
func AlertIDIn(vs ...int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldIn(FieldAlertID, vs...))
}

// AlertIDNotIn applies the NotIn predicate on the "alert_id" field.
func AlertIDNotIn(vs ...int) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldNotIn(FieldAlertID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NlogAlert {
	return predicate.NlogAlert(sql.FieldLTE(FieldCreatedAt, v))
}

// HasNlog applies the HasEdge predicate on the "nlog" edge.
func HasNlog() predicate.NlogAlert {
	return predicate.NlogAlert(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NlogTable, NlogColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Nlog
		step.Edge.Schema = schemaConfig.NlogAlert
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNlogWith applies the HasEdge predicate on the "nlog" edge with a given conditions (other predicates).
func HasNlogWith(preds ...predicate.Nlog) predicate.NlogAlert {
	return predicate.NlogAlert(func(s *sql.Selector) {
		step := newNlogStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Nlog
		step.Edge.Schema = schemaConfig.NlogAlert
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAlert applies the HasEdge predicate on the "alert" edge.
func HasAlert() predicate.NlogAlert {
	return predicate.NlogAlert(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AlertTable, AlertColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgAlert
		step.Edge.Schema = schemaConfig.NlogAlert
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlertWith applies the HasEdge predicate on the "alert" edge with a given conditions (other predicates).
func HasAlertWith(preds ...predicate.MsgAlert) predicate.NlogAlert {
	return predicate.NlogAlert(func(s *sql.Selector) {
		step := newAlertStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgAlert
		step.Edge.Schema = schemaConfig.NlogAlert
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NlogAlert) predicate.NlogAlert {
	return predicate.NlogAlert(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NlogAlert) predicate.NlogAlert {
	return predicate.NlogAlert(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NlogAlert) predicate.NlogAlert {
	return predicate.NlogAlert(sql.NotPredicates(p))
}
