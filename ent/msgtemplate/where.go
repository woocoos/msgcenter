// Code generated by ent, DO NOT EDIT.

package msgtemplate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/msgcenter/ent/predicate"
	"github.com/woocoos/msgcenter/pkg/profile"

	"github.com/woocoos/msgcenter/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// MsgTypeID applies equality check predicate on the "msg_type_id" field. It's identical to MsgTypeIDEQ.
func MsgTypeID(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldMsgTypeID, v))
}

// MsgEventID applies equality check predicate on the "msg_event_id" field. It's identical to MsgEventIDEQ.
func MsgEventID(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldMsgEventID, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldName, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldSubject, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldTo, v))
}

// Cc applies equality check predicate on the "cc" field. It's identical to CcEQ.
func Cc(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldCc, v))
}

// Bcc applies equality check predicate on the "bcc" field. It's identical to BccEQ.
func Bcc(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldBcc, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldBody, v))
}

// Tpl applies equality check predicate on the "tpl" field. It's identical to TplEQ.
func Tpl(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldTpl, v))
}

// TplFileID applies equality check predicate on the "tpl_file_id" field. It's identical to TplFileIDEQ.
func TplFileID(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldTplFileID, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldComments, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldUpdatedAt))
}

// MsgTypeIDEQ applies the EQ predicate on the "msg_type_id" field.
func MsgTypeIDEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldMsgTypeID, v))
}

// MsgTypeIDNEQ applies the NEQ predicate on the "msg_type_id" field.
func MsgTypeIDNEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldMsgTypeID, v))
}

// MsgTypeIDIn applies the In predicate on the "msg_type_id" field.
func MsgTypeIDIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldMsgTypeID, vs...))
}

// MsgTypeIDNotIn applies the NotIn predicate on the "msg_type_id" field.
func MsgTypeIDNotIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldMsgTypeID, vs...))
}

// MsgTypeIDGT applies the GT predicate on the "msg_type_id" field.
func MsgTypeIDGT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldMsgTypeID, v))
}

// MsgTypeIDGTE applies the GTE predicate on the "msg_type_id" field.
func MsgTypeIDGTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldMsgTypeID, v))
}

// MsgTypeIDLT applies the LT predicate on the "msg_type_id" field.
func MsgTypeIDLT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldMsgTypeID, v))
}

// MsgTypeIDLTE applies the LTE predicate on the "msg_type_id" field.
func MsgTypeIDLTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldMsgTypeID, v))
}

// MsgEventIDEQ applies the EQ predicate on the "msg_event_id" field.
func MsgEventIDEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldMsgEventID, v))
}

// MsgEventIDNEQ applies the NEQ predicate on the "msg_event_id" field.
func MsgEventIDNEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldMsgEventID, v))
}

// MsgEventIDIn applies the In predicate on the "msg_event_id" field.
func MsgEventIDIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldMsgEventID, vs...))
}

// MsgEventIDNotIn applies the NotIn predicate on the "msg_event_id" field.
func MsgEventIDNotIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldMsgEventID, vs...))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldTenantID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v typex.SimpleStatus) predicate.MsgTemplate {
	vc := v
	return predicate.MsgTemplate(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v typex.SimpleStatus) predicate.MsgTemplate {
	vc := v
	return predicate.MsgTemplate(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...typex.SimpleStatus) predicate.MsgTemplate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgTemplate(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...typex.SimpleStatus) predicate.MsgTemplate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgTemplate(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldStatus))
}

// ReceiverTypeEQ applies the EQ predicate on the "receiver_type" field.
func ReceiverTypeEQ(v profile.ReceiverType) predicate.MsgTemplate {
	vc := v
	return predicate.MsgTemplate(sql.FieldEQ(FieldReceiverType, vc))
}

// ReceiverTypeNEQ applies the NEQ predicate on the "receiver_type" field.
func ReceiverTypeNEQ(v profile.ReceiverType) predicate.MsgTemplate {
	vc := v
	return predicate.MsgTemplate(sql.FieldNEQ(FieldReceiverType, vc))
}

// ReceiverTypeIn applies the In predicate on the "receiver_type" field.
func ReceiverTypeIn(vs ...profile.ReceiverType) predicate.MsgTemplate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgTemplate(sql.FieldIn(FieldReceiverType, v...))
}

// ReceiverTypeNotIn applies the NotIn predicate on the "receiver_type" field.
func ReceiverTypeNotIn(vs ...profile.ReceiverType) predicate.MsgTemplate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MsgTemplate(sql.FieldNotIn(FieldReceiverType, v...))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v Format) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v Format) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...Format) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...Format) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldFormat, vs...))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectIsNil applies the IsNil predicate on the "subject" field.
func SubjectIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldSubject))
}

// SubjectNotNil applies the NotNil predicate on the "subject" field.
func SubjectNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldSubject))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldSubject, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldFrom, v))
}

// FromIsNil applies the IsNil predicate on the "from" field.
func FromIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldFrom))
}

// FromNotNil applies the NotNil predicate on the "from" field.
func FromNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldFrom))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldTo, v))
}

// ToIsNil applies the IsNil predicate on the "to" field.
func ToIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldTo))
}

// ToNotNil applies the NotNil predicate on the "to" field.
func ToNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldTo))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldTo, v))
}

// CcEQ applies the EQ predicate on the "cc" field.
func CcEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldCc, v))
}

// CcNEQ applies the NEQ predicate on the "cc" field.
func CcNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldCc, v))
}

// CcIn applies the In predicate on the "cc" field.
func CcIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldCc, vs...))
}

// CcNotIn applies the NotIn predicate on the "cc" field.
func CcNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldCc, vs...))
}

// CcGT applies the GT predicate on the "cc" field.
func CcGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldCc, v))
}

// CcGTE applies the GTE predicate on the "cc" field.
func CcGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldCc, v))
}

// CcLT applies the LT predicate on the "cc" field.
func CcLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldCc, v))
}

// CcLTE applies the LTE predicate on the "cc" field.
func CcLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldCc, v))
}

// CcContains applies the Contains predicate on the "cc" field.
func CcContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldCc, v))
}

// CcHasPrefix applies the HasPrefix predicate on the "cc" field.
func CcHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldCc, v))
}

// CcHasSuffix applies the HasSuffix predicate on the "cc" field.
func CcHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldCc, v))
}

// CcIsNil applies the IsNil predicate on the "cc" field.
func CcIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldCc))
}

// CcNotNil applies the NotNil predicate on the "cc" field.
func CcNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldCc))
}

// CcEqualFold applies the EqualFold predicate on the "cc" field.
func CcEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldCc, v))
}

// CcContainsFold applies the ContainsFold predicate on the "cc" field.
func CcContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldCc, v))
}

// BccEQ applies the EQ predicate on the "bcc" field.
func BccEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldBcc, v))
}

// BccNEQ applies the NEQ predicate on the "bcc" field.
func BccNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldBcc, v))
}

// BccIn applies the In predicate on the "bcc" field.
func BccIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldBcc, vs...))
}

// BccNotIn applies the NotIn predicate on the "bcc" field.
func BccNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldBcc, vs...))
}

// BccGT applies the GT predicate on the "bcc" field.
func BccGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldBcc, v))
}

// BccGTE applies the GTE predicate on the "bcc" field.
func BccGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldBcc, v))
}

// BccLT applies the LT predicate on the "bcc" field.
func BccLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldBcc, v))
}

// BccLTE applies the LTE predicate on the "bcc" field.
func BccLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldBcc, v))
}

// BccContains applies the Contains predicate on the "bcc" field.
func BccContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldBcc, v))
}

// BccHasPrefix applies the HasPrefix predicate on the "bcc" field.
func BccHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldBcc, v))
}

// BccHasSuffix applies the HasSuffix predicate on the "bcc" field.
func BccHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldBcc, v))
}

// BccIsNil applies the IsNil predicate on the "bcc" field.
func BccIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldBcc))
}

// BccNotNil applies the NotNil predicate on the "bcc" field.
func BccNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldBcc))
}

// BccEqualFold applies the EqualFold predicate on the "bcc" field.
func BccEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldBcc, v))
}

// BccContainsFold applies the ContainsFold predicate on the "bcc" field.
func BccContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldBcc, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldBody, v))
}

// BodyIsNil applies the IsNil predicate on the "body" field.
func BodyIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldBody))
}

// BodyNotNil applies the NotNil predicate on the "body" field.
func BodyNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldBody))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldBody, v))
}

// TplEQ applies the EQ predicate on the "tpl" field.
func TplEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldTpl, v))
}

// TplNEQ applies the NEQ predicate on the "tpl" field.
func TplNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldTpl, v))
}

// TplIn applies the In predicate on the "tpl" field.
func TplIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldTpl, vs...))
}

// TplNotIn applies the NotIn predicate on the "tpl" field.
func TplNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldTpl, vs...))
}

// TplGT applies the GT predicate on the "tpl" field.
func TplGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldTpl, v))
}

// TplGTE applies the GTE predicate on the "tpl" field.
func TplGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldTpl, v))
}

// TplLT applies the LT predicate on the "tpl" field.
func TplLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldTpl, v))
}

// TplLTE applies the LTE predicate on the "tpl" field.
func TplLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldTpl, v))
}

// TplContains applies the Contains predicate on the "tpl" field.
func TplContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldTpl, v))
}

// TplHasPrefix applies the HasPrefix predicate on the "tpl" field.
func TplHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldTpl, v))
}

// TplHasSuffix applies the HasSuffix predicate on the "tpl" field.
func TplHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldTpl, v))
}

// TplIsNil applies the IsNil predicate on the "tpl" field.
func TplIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldTpl))
}

// TplNotNil applies the NotNil predicate on the "tpl" field.
func TplNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldTpl))
}

// TplEqualFold applies the EqualFold predicate on the "tpl" field.
func TplEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldTpl, v))
}

// TplContainsFold applies the ContainsFold predicate on the "tpl" field.
func TplContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldTpl, v))
}

// TplFileIDEQ applies the EQ predicate on the "tpl_file_id" field.
func TplFileIDEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldTplFileID, v))
}

// TplFileIDNEQ applies the NEQ predicate on the "tpl_file_id" field.
func TplFileIDNEQ(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldTplFileID, v))
}

// TplFileIDIn applies the In predicate on the "tpl_file_id" field.
func TplFileIDIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldTplFileID, vs...))
}

// TplFileIDNotIn applies the NotIn predicate on the "tpl_file_id" field.
func TplFileIDNotIn(vs ...int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldTplFileID, vs...))
}

// TplFileIDGT applies the GT predicate on the "tpl_file_id" field.
func TplFileIDGT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldTplFileID, v))
}

// TplFileIDGTE applies the GTE predicate on the "tpl_file_id" field.
func TplFileIDGTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldTplFileID, v))
}

// TplFileIDLT applies the LT predicate on the "tpl_file_id" field.
func TplFileIDLT(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldTplFileID, v))
}

// TplFileIDLTE applies the LTE predicate on the "tpl_file_id" field.
func TplFileIDLTE(v int) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldTplFileID, v))
}

// TplFileIDIsNil applies the IsNil predicate on the "tpl_file_id" field.
func TplFileIDIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldTplFileID))
}

// TplFileIDNotNil applies the NotNil predicate on the "tpl_file_id" field.
func TplFileIDNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldTplFileID))
}

// AttachmentsIsNil applies the IsNil predicate on the "attachments" field.
func AttachmentsIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldAttachments))
}

// AttachmentsNotNil applies the NotNil predicate on the "attachments" field.
func AttachmentsNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldAttachments))
}

// AttachmentsFileIdsIsNil applies the IsNil predicate on the "attachments_file_ids" field.
func AttachmentsFileIdsIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldAttachmentsFileIds))
}

// AttachmentsFileIdsNotNil applies the NotNil predicate on the "attachments_file_ids" field.
func AttachmentsFileIdsNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldAttachmentsFileIds))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.FieldContainsFold(FieldComments, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.MsgTemplate {
	return predicate.MsgTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgEvent
		step.Edge.Schema = schemaConfig.MsgTemplate
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.MsgEvent) predicate.MsgTemplate {
	return predicate.MsgTemplate(func(s *sql.Selector) {
		step := newEventStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgEvent
		step.Edge.Schema = schemaConfig.MsgTemplate
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MsgTemplate) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MsgTemplate) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MsgTemplate) predicate.MsgTemplate {
	return predicate.MsgTemplate(sql.NotPredicates(p))
}
