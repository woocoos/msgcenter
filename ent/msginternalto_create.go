// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msginternal"
	"github.com/woocoos/msgcenter/ent/msginternalto"
	"github.com/woocoos/msgcenter/ent/user"
)

// MsgInternalToCreate is the builder for creating a MsgInternalTo entity.
type MsgInternalToCreate struct {
	config
	mutation *MsgInternalToMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (mitc *MsgInternalToCreate) SetTenantID(i int) *MsgInternalToCreate {
	mitc.mutation.SetTenantID(i)
	return mitc
}

// SetMsgInternalID sets the "msg_internal_id" field.
func (mitc *MsgInternalToCreate) SetMsgInternalID(i int) *MsgInternalToCreate {
	mitc.mutation.SetMsgInternalID(i)
	return mitc
}

// SetUserID sets the "user_id" field.
func (mitc *MsgInternalToCreate) SetUserID(i int) *MsgInternalToCreate {
	mitc.mutation.SetUserID(i)
	return mitc
}

// SetReadAt sets the "read_at" field.
func (mitc *MsgInternalToCreate) SetReadAt(t time.Time) *MsgInternalToCreate {
	mitc.mutation.SetReadAt(t)
	return mitc
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (mitc *MsgInternalToCreate) SetNillableReadAt(t *time.Time) *MsgInternalToCreate {
	if t != nil {
		mitc.SetReadAt(*t)
	}
	return mitc
}

// SetDeleteAt sets the "delete_at" field.
func (mitc *MsgInternalToCreate) SetDeleteAt(t time.Time) *MsgInternalToCreate {
	mitc.mutation.SetDeleteAt(t)
	return mitc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mitc *MsgInternalToCreate) SetNillableDeleteAt(t *time.Time) *MsgInternalToCreate {
	if t != nil {
		mitc.SetDeleteAt(*t)
	}
	return mitc
}

// SetCreatedAt sets the "created_at" field.
func (mitc *MsgInternalToCreate) SetCreatedAt(t time.Time) *MsgInternalToCreate {
	mitc.mutation.SetCreatedAt(t)
	return mitc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mitc *MsgInternalToCreate) SetNillableCreatedAt(t *time.Time) *MsgInternalToCreate {
	if t != nil {
		mitc.SetCreatedAt(*t)
	}
	return mitc
}

// SetID sets the "id" field.
func (mitc *MsgInternalToCreate) SetID(i int) *MsgInternalToCreate {
	mitc.mutation.SetID(i)
	return mitc
}

// SetMsgInternal sets the "msg_internal" edge to the MsgInternal entity.
func (mitc *MsgInternalToCreate) SetMsgInternal(m *MsgInternal) *MsgInternalToCreate {
	return mitc.SetMsgInternalID(m.ID)
}

// SetUser sets the "user" edge to the User entity.
func (mitc *MsgInternalToCreate) SetUser(u *User) *MsgInternalToCreate {
	return mitc.SetUserID(u.ID)
}

// Mutation returns the MsgInternalToMutation object of the builder.
func (mitc *MsgInternalToCreate) Mutation() *MsgInternalToMutation {
	return mitc.mutation
}

// Save creates the MsgInternalTo in the database.
func (mitc *MsgInternalToCreate) Save(ctx context.Context) (*MsgInternalTo, error) {
	if err := mitc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mitc.sqlSave, mitc.mutation, mitc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mitc *MsgInternalToCreate) SaveX(ctx context.Context) *MsgInternalTo {
	v, err := mitc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mitc *MsgInternalToCreate) Exec(ctx context.Context) error {
	_, err := mitc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mitc *MsgInternalToCreate) ExecX(ctx context.Context) {
	if err := mitc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mitc *MsgInternalToCreate) defaults() error {
	if _, ok := mitc.mutation.CreatedAt(); !ok {
		if msginternalto.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized msginternalto.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := msginternalto.DefaultCreatedAt()
		mitc.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mitc *MsgInternalToCreate) check() error {
	if _, ok := mitc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "MsgInternalTo.tenant_id"`)}
	}
	if _, ok := mitc.mutation.MsgInternalID(); !ok {
		return &ValidationError{Name: "msg_internal_id", err: errors.New(`ent: missing required field "MsgInternalTo.msg_internal_id"`)}
	}
	if _, ok := mitc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "MsgInternalTo.user_id"`)}
	}
	if _, ok := mitc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MsgInternalTo.created_at"`)}
	}
	if _, ok := mitc.mutation.MsgInternalID(); !ok {
		return &ValidationError{Name: "msg_internal", err: errors.New(`ent: missing required edge "MsgInternalTo.msg_internal"`)}
	}
	if _, ok := mitc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "MsgInternalTo.user"`)}
	}
	return nil
}

func (mitc *MsgInternalToCreate) sqlSave(ctx context.Context) (*MsgInternalTo, error) {
	if err := mitc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mitc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mitc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mitc.mutation.id = &_node.ID
	mitc.mutation.done = true
	return _node, nil
}

func (mitc *MsgInternalToCreate) createSpec() (*MsgInternalTo, *sqlgraph.CreateSpec) {
	var (
		_node = &MsgInternalTo{config: mitc.config}
		_spec = sqlgraph.NewCreateSpec(msginternalto.Table, sqlgraph.NewFieldSpec(msginternalto.FieldID, field.TypeInt))
	)
	_spec.Schema = mitc.schemaConfig.MsgInternalTo
	_spec.OnConflict = mitc.conflict
	if id, ok := mitc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mitc.mutation.TenantID(); ok {
		_spec.SetField(msginternalto.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := mitc.mutation.ReadAt(); ok {
		_spec.SetField(msginternalto.FieldReadAt, field.TypeTime, value)
		_node.ReadAt = value
	}
	if value, ok := mitc.mutation.DeleteAt(); ok {
		_spec.SetField(msginternalto.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := mitc.mutation.CreatedAt(); ok {
		_spec.SetField(msginternalto.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mitc.mutation.MsgInternalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msginternalto.MsgInternalTable,
			Columns: []string{msginternalto.MsgInternalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msginternal.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mitc.schemaConfig.MsgInternalTo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MsgInternalID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mitc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   msginternalto.UserTable,
			Columns: []string{msginternalto.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mitc.schemaConfig.MsgInternalTo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgInternalTo.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgInternalToUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (mitc *MsgInternalToCreate) OnConflict(opts ...sql.ConflictOption) *MsgInternalToUpsertOne {
	mitc.conflict = opts
	return &MsgInternalToUpsertOne{
		create: mitc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgInternalTo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mitc *MsgInternalToCreate) OnConflictColumns(columns ...string) *MsgInternalToUpsertOne {
	mitc.conflict = append(mitc.conflict, sql.ConflictColumns(columns...))
	return &MsgInternalToUpsertOne{
		create: mitc,
	}
}

type (
	// MsgInternalToUpsertOne is the builder for "upsert"-ing
	//  one MsgInternalTo node.
	MsgInternalToUpsertOne struct {
		create *MsgInternalToCreate
	}

	// MsgInternalToUpsert is the "OnConflict" setter.
	MsgInternalToUpsert struct {
		*sql.UpdateSet
	}
)

// SetReadAt sets the "read_at" field.
func (u *MsgInternalToUpsert) SetReadAt(v time.Time) *MsgInternalToUpsert {
	u.Set(msginternalto.FieldReadAt, v)
	return u
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *MsgInternalToUpsert) UpdateReadAt() *MsgInternalToUpsert {
	u.SetExcluded(msginternalto.FieldReadAt)
	return u
}

// ClearReadAt clears the value of the "read_at" field.
func (u *MsgInternalToUpsert) ClearReadAt() *MsgInternalToUpsert {
	u.SetNull(msginternalto.FieldReadAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *MsgInternalToUpsert) SetDeleteAt(v time.Time) *MsgInternalToUpsert {
	u.Set(msginternalto.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MsgInternalToUpsert) UpdateDeleteAt() *MsgInternalToUpsert {
	u.SetExcluded(msginternalto.FieldDeleteAt)
	return u
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (u *MsgInternalToUpsert) ClearDeleteAt() *MsgInternalToUpsert {
	u.SetNull(msginternalto.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MsgInternalTo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msginternalto.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgInternalToUpsertOne) UpdateNewValues() *MsgInternalToUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(msginternalto.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(msginternalto.FieldTenantID)
		}
		if _, exists := u.create.mutation.MsgInternalID(); exists {
			s.SetIgnore(msginternalto.FieldMsgInternalID)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(msginternalto.FieldUserID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(msginternalto.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgInternalTo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MsgInternalToUpsertOne) Ignore() *MsgInternalToUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgInternalToUpsertOne) DoNothing() *MsgInternalToUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgInternalToCreate.OnConflict
// documentation for more info.
func (u *MsgInternalToUpsertOne) Update(set func(*MsgInternalToUpsert)) *MsgInternalToUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgInternalToUpsert{UpdateSet: update})
	}))
	return u
}

// SetReadAt sets the "read_at" field.
func (u *MsgInternalToUpsertOne) SetReadAt(v time.Time) *MsgInternalToUpsertOne {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.SetReadAt(v)
	})
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *MsgInternalToUpsertOne) UpdateReadAt() *MsgInternalToUpsertOne {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.UpdateReadAt()
	})
}

// ClearReadAt clears the value of the "read_at" field.
func (u *MsgInternalToUpsertOne) ClearReadAt() *MsgInternalToUpsertOne {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.ClearReadAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *MsgInternalToUpsertOne) SetDeleteAt(v time.Time) *MsgInternalToUpsertOne {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MsgInternalToUpsertOne) UpdateDeleteAt() *MsgInternalToUpsertOne {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.UpdateDeleteAt()
	})
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (u *MsgInternalToUpsertOne) ClearDeleteAt() *MsgInternalToUpsertOne {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.ClearDeleteAt()
	})
}

// Exec executes the query.
func (u *MsgInternalToUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgInternalToCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgInternalToUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MsgInternalToUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MsgInternalToUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MsgInternalToCreateBulk is the builder for creating many MsgInternalTo entities in bulk.
type MsgInternalToCreateBulk struct {
	config
	err      error
	builders []*MsgInternalToCreate
	conflict []sql.ConflictOption
}

// Save creates the MsgInternalTo entities in the database.
func (mitcb *MsgInternalToCreateBulk) Save(ctx context.Context) ([]*MsgInternalTo, error) {
	if mitcb.err != nil {
		return nil, mitcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mitcb.builders))
	nodes := make([]*MsgInternalTo, len(mitcb.builders))
	mutators := make([]Mutator, len(mitcb.builders))
	for i := range mitcb.builders {
		func(i int, root context.Context) {
			builder := mitcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgInternalToMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mitcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mitcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mitcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mitcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mitcb *MsgInternalToCreateBulk) SaveX(ctx context.Context) []*MsgInternalTo {
	v, err := mitcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mitcb *MsgInternalToCreateBulk) Exec(ctx context.Context) error {
	_, err := mitcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mitcb *MsgInternalToCreateBulk) ExecX(ctx context.Context) {
	if err := mitcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgInternalTo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgInternalToUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (mitcb *MsgInternalToCreateBulk) OnConflict(opts ...sql.ConflictOption) *MsgInternalToUpsertBulk {
	mitcb.conflict = opts
	return &MsgInternalToUpsertBulk{
		create: mitcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgInternalTo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mitcb *MsgInternalToCreateBulk) OnConflictColumns(columns ...string) *MsgInternalToUpsertBulk {
	mitcb.conflict = append(mitcb.conflict, sql.ConflictColumns(columns...))
	return &MsgInternalToUpsertBulk{
		create: mitcb,
	}
}

// MsgInternalToUpsertBulk is the builder for "upsert"-ing
// a bulk of MsgInternalTo nodes.
type MsgInternalToUpsertBulk struct {
	create *MsgInternalToCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MsgInternalTo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msginternalto.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgInternalToUpsertBulk) UpdateNewValues() *MsgInternalToUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(msginternalto.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(msginternalto.FieldTenantID)
			}
			if _, exists := b.mutation.MsgInternalID(); exists {
				s.SetIgnore(msginternalto.FieldMsgInternalID)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(msginternalto.FieldUserID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(msginternalto.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgInternalTo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MsgInternalToUpsertBulk) Ignore() *MsgInternalToUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgInternalToUpsertBulk) DoNothing() *MsgInternalToUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgInternalToCreateBulk.OnConflict
// documentation for more info.
func (u *MsgInternalToUpsertBulk) Update(set func(*MsgInternalToUpsert)) *MsgInternalToUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgInternalToUpsert{UpdateSet: update})
	}))
	return u
}

// SetReadAt sets the "read_at" field.
func (u *MsgInternalToUpsertBulk) SetReadAt(v time.Time) *MsgInternalToUpsertBulk {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.SetReadAt(v)
	})
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *MsgInternalToUpsertBulk) UpdateReadAt() *MsgInternalToUpsertBulk {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.UpdateReadAt()
	})
}

// ClearReadAt clears the value of the "read_at" field.
func (u *MsgInternalToUpsertBulk) ClearReadAt() *MsgInternalToUpsertBulk {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.ClearReadAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *MsgInternalToUpsertBulk) SetDeleteAt(v time.Time) *MsgInternalToUpsertBulk {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *MsgInternalToUpsertBulk) UpdateDeleteAt() *MsgInternalToUpsertBulk {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.UpdateDeleteAt()
	})
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (u *MsgInternalToUpsertBulk) ClearDeleteAt() *MsgInternalToUpsertBulk {
	return u.Update(func(s *MsgInternalToUpsert) {
		s.ClearDeleteAt()
	})
}

// Exec executes the query.
func (u *MsgInternalToUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MsgInternalToCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgInternalToCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgInternalToUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
