// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/woocoos/msgcenter/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/msgcenter/ent/msgchannel"
	"github.com/woocoos/msgcenter/ent/msgevent"
	"github.com/woocoos/msgcenter/ent/msgsubscriber"
	"github.com/woocoos/msgcenter/ent/msgtemplate"
	"github.com/woocoos/msgcenter/ent/msgtype"
	"github.com/woocoos/msgcenter/ent/orgroleuser"
	"github.com/woocoos/msgcenter/ent/user"

	"github.com/woocoos/msgcenter/ent/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// MsgChannel is the client for interacting with the MsgChannel builders.
	MsgChannel *MsgChannelClient
	// MsgEvent is the client for interacting with the MsgEvent builders.
	MsgEvent *MsgEventClient
	// MsgSubscriber is the client for interacting with the MsgSubscriber builders.
	MsgSubscriber *MsgSubscriberClient
	// MsgTemplate is the client for interacting with the MsgTemplate builders.
	MsgTemplate *MsgTemplateClient
	// MsgType is the client for interacting with the MsgType builders.
	MsgType *MsgTypeClient
	// OrgRoleUser is the client for interacting with the OrgRoleUser builders.
	OrgRoleUser *OrgRoleUserClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.MsgChannel = NewMsgChannelClient(c.config)
	c.MsgEvent = NewMsgEventClient(c.config)
	c.MsgSubscriber = NewMsgSubscriberClient(c.config)
	c.MsgTemplate = NewMsgTemplateClient(c.config)
	c.MsgType = NewMsgTypeClient(c.config)
	c.OrgRoleUser = NewOrgRoleUserClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		MsgChannel:    NewMsgChannelClient(cfg),
		MsgEvent:      NewMsgEventClient(cfg),
		MsgSubscriber: NewMsgSubscriberClient(cfg),
		MsgTemplate:   NewMsgTemplateClient(cfg),
		MsgType:       NewMsgTypeClient(cfg),
		OrgRoleUser:   NewOrgRoleUserClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		MsgChannel:    NewMsgChannelClient(cfg),
		MsgEvent:      NewMsgEventClient(cfg),
		MsgSubscriber: NewMsgSubscriberClient(cfg),
		MsgTemplate:   NewMsgTemplateClient(cfg),
		MsgType:       NewMsgTypeClient(cfg),
		OrgRoleUser:   NewOrgRoleUserClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		MsgChannel.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.MsgChannel, c.MsgEvent, c.MsgSubscriber, c.MsgTemplate, c.MsgType,
		c.OrgRoleUser, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.MsgChannel, c.MsgEvent, c.MsgSubscriber, c.MsgTemplate, c.MsgType,
		c.OrgRoleUser, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MsgChannelMutation:
		return c.MsgChannel.mutate(ctx, m)
	case *MsgEventMutation:
		return c.MsgEvent.mutate(ctx, m)
	case *MsgSubscriberMutation:
		return c.MsgSubscriber.mutate(ctx, m)
	case *MsgTemplateMutation:
		return c.MsgTemplate.mutate(ctx, m)
	case *MsgTypeMutation:
		return c.MsgType.mutate(ctx, m)
	case *OrgRoleUserMutation:
		return c.OrgRoleUser.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MsgChannelClient is a client for the MsgChannel schema.
type MsgChannelClient struct {
	config
}

// NewMsgChannelClient returns a client for the MsgChannel from the given config.
func NewMsgChannelClient(c config) *MsgChannelClient {
	return &MsgChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `msgchannel.Hooks(f(g(h())))`.
func (c *MsgChannelClient) Use(hooks ...Hook) {
	c.hooks.MsgChannel = append(c.hooks.MsgChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `msgchannel.Intercept(f(g(h())))`.
func (c *MsgChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.MsgChannel = append(c.inters.MsgChannel, interceptors...)
}

// Create returns a builder for creating a MsgChannel entity.
func (c *MsgChannelClient) Create() *MsgChannelCreate {
	mutation := newMsgChannelMutation(c.config, OpCreate)
	return &MsgChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MsgChannel entities.
func (c *MsgChannelClient) CreateBulk(builders ...*MsgChannelCreate) *MsgChannelCreateBulk {
	return &MsgChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MsgChannel.
func (c *MsgChannelClient) Update() *MsgChannelUpdate {
	mutation := newMsgChannelMutation(c.config, OpUpdate)
	return &MsgChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MsgChannelClient) UpdateOne(mc *MsgChannel) *MsgChannelUpdateOne {
	mutation := newMsgChannelMutation(c.config, OpUpdateOne, withMsgChannel(mc))
	return &MsgChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MsgChannelClient) UpdateOneID(id int) *MsgChannelUpdateOne {
	mutation := newMsgChannelMutation(c.config, OpUpdateOne, withMsgChannelID(id))
	return &MsgChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MsgChannel.
func (c *MsgChannelClient) Delete() *MsgChannelDelete {
	mutation := newMsgChannelMutation(c.config, OpDelete)
	return &MsgChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MsgChannelClient) DeleteOne(mc *MsgChannel) *MsgChannelDeleteOne {
	return c.DeleteOneID(mc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MsgChannelClient) DeleteOneID(id int) *MsgChannelDeleteOne {
	builder := c.Delete().Where(msgchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MsgChannelDeleteOne{builder}
}

// Query returns a query builder for MsgChannel.
func (c *MsgChannelClient) Query() *MsgChannelQuery {
	return &MsgChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMsgChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a MsgChannel entity by its id.
func (c *MsgChannelClient) Get(ctx context.Context, id int) (*MsgChannel, error) {
	return c.Query().Where(msgchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MsgChannelClient) GetX(ctx context.Context, id int) *MsgChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MsgChannelClient) Hooks() []Hook {
	hooks := c.hooks.MsgChannel
	return append(hooks[:len(hooks):len(hooks)], msgchannel.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *MsgChannelClient) Interceptors() []Interceptor {
	return c.inters.MsgChannel
}

func (c *MsgChannelClient) mutate(ctx context.Context, m *MsgChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MsgChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MsgChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MsgChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MsgChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MsgChannel mutation op: %q", m.Op())
	}
}

// MsgEventClient is a client for the MsgEvent schema.
type MsgEventClient struct {
	config
}

// NewMsgEventClient returns a client for the MsgEvent from the given config.
func NewMsgEventClient(c config) *MsgEventClient {
	return &MsgEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `msgevent.Hooks(f(g(h())))`.
func (c *MsgEventClient) Use(hooks ...Hook) {
	c.hooks.MsgEvent = append(c.hooks.MsgEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `msgevent.Intercept(f(g(h())))`.
func (c *MsgEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.MsgEvent = append(c.inters.MsgEvent, interceptors...)
}

// Create returns a builder for creating a MsgEvent entity.
func (c *MsgEventClient) Create() *MsgEventCreate {
	mutation := newMsgEventMutation(c.config, OpCreate)
	return &MsgEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MsgEvent entities.
func (c *MsgEventClient) CreateBulk(builders ...*MsgEventCreate) *MsgEventCreateBulk {
	return &MsgEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MsgEvent.
func (c *MsgEventClient) Update() *MsgEventUpdate {
	mutation := newMsgEventMutation(c.config, OpUpdate)
	return &MsgEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MsgEventClient) UpdateOne(me *MsgEvent) *MsgEventUpdateOne {
	mutation := newMsgEventMutation(c.config, OpUpdateOne, withMsgEvent(me))
	return &MsgEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MsgEventClient) UpdateOneID(id int) *MsgEventUpdateOne {
	mutation := newMsgEventMutation(c.config, OpUpdateOne, withMsgEventID(id))
	return &MsgEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MsgEvent.
func (c *MsgEventClient) Delete() *MsgEventDelete {
	mutation := newMsgEventMutation(c.config, OpDelete)
	return &MsgEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MsgEventClient) DeleteOne(me *MsgEvent) *MsgEventDeleteOne {
	return c.DeleteOneID(me.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MsgEventClient) DeleteOneID(id int) *MsgEventDeleteOne {
	builder := c.Delete().Where(msgevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MsgEventDeleteOne{builder}
}

// Query returns a query builder for MsgEvent.
func (c *MsgEventClient) Query() *MsgEventQuery {
	return &MsgEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMsgEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a MsgEvent entity by its id.
func (c *MsgEventClient) Get(ctx context.Context, id int) (*MsgEvent, error) {
	return c.Query().Where(msgevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MsgEventClient) GetX(ctx context.Context, id int) *MsgEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMsgType queries the msg_type edge of a MsgEvent.
func (c *MsgEventClient) QueryMsgType(me *MsgEvent) *MsgTypeQuery {
	query := (&MsgTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := me.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msgevent.Table, msgevent.FieldID, id),
			sqlgraph.To(msgtype.Table, msgtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, msgevent.MsgTypeTable, msgevent.MsgTypeColumn),
		)
		schemaConfig := me.schemaConfig
		step.To.Schema = schemaConfig.MsgType
		step.Edge.Schema = schemaConfig.MsgEvent
		fromV = sqlgraph.Neighbors(me.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomerTemplate queries the customer_template edge of a MsgEvent.
func (c *MsgEventClient) QueryCustomerTemplate(me *MsgEvent) *MsgTemplateQuery {
	query := (&MsgTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := me.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msgevent.Table, msgevent.FieldID, id),
			sqlgraph.To(msgtemplate.Table, msgtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, msgevent.CustomerTemplateTable, msgevent.CustomerTemplateColumn),
		)
		schemaConfig := me.schemaConfig
		step.To.Schema = schemaConfig.MsgTemplate
		step.Edge.Schema = schemaConfig.MsgTemplate
		fromV = sqlgraph.Neighbors(me.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MsgEventClient) Hooks() []Hook {
	hooks := c.hooks.MsgEvent
	return append(hooks[:len(hooks):len(hooks)], msgevent.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *MsgEventClient) Interceptors() []Interceptor {
	return c.inters.MsgEvent
}

func (c *MsgEventClient) mutate(ctx context.Context, m *MsgEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MsgEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MsgEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MsgEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MsgEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MsgEvent mutation op: %q", m.Op())
	}
}

// MsgSubscriberClient is a client for the MsgSubscriber schema.
type MsgSubscriberClient struct {
	config
}

// NewMsgSubscriberClient returns a client for the MsgSubscriber from the given config.
func NewMsgSubscriberClient(c config) *MsgSubscriberClient {
	return &MsgSubscriberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `msgsubscriber.Hooks(f(g(h())))`.
func (c *MsgSubscriberClient) Use(hooks ...Hook) {
	c.hooks.MsgSubscriber = append(c.hooks.MsgSubscriber, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `msgsubscriber.Intercept(f(g(h())))`.
func (c *MsgSubscriberClient) Intercept(interceptors ...Interceptor) {
	c.inters.MsgSubscriber = append(c.inters.MsgSubscriber, interceptors...)
}

// Create returns a builder for creating a MsgSubscriber entity.
func (c *MsgSubscriberClient) Create() *MsgSubscriberCreate {
	mutation := newMsgSubscriberMutation(c.config, OpCreate)
	return &MsgSubscriberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MsgSubscriber entities.
func (c *MsgSubscriberClient) CreateBulk(builders ...*MsgSubscriberCreate) *MsgSubscriberCreateBulk {
	return &MsgSubscriberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MsgSubscriber.
func (c *MsgSubscriberClient) Update() *MsgSubscriberUpdate {
	mutation := newMsgSubscriberMutation(c.config, OpUpdate)
	return &MsgSubscriberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MsgSubscriberClient) UpdateOne(ms *MsgSubscriber) *MsgSubscriberUpdateOne {
	mutation := newMsgSubscriberMutation(c.config, OpUpdateOne, withMsgSubscriber(ms))
	return &MsgSubscriberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MsgSubscriberClient) UpdateOneID(id int) *MsgSubscriberUpdateOne {
	mutation := newMsgSubscriberMutation(c.config, OpUpdateOne, withMsgSubscriberID(id))
	return &MsgSubscriberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MsgSubscriber.
func (c *MsgSubscriberClient) Delete() *MsgSubscriberDelete {
	mutation := newMsgSubscriberMutation(c.config, OpDelete)
	return &MsgSubscriberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MsgSubscriberClient) DeleteOne(ms *MsgSubscriber) *MsgSubscriberDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MsgSubscriberClient) DeleteOneID(id int) *MsgSubscriberDeleteOne {
	builder := c.Delete().Where(msgsubscriber.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MsgSubscriberDeleteOne{builder}
}

// Query returns a query builder for MsgSubscriber.
func (c *MsgSubscriberClient) Query() *MsgSubscriberQuery {
	return &MsgSubscriberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMsgSubscriber},
		inters: c.Interceptors(),
	}
}

// Get returns a MsgSubscriber entity by its id.
func (c *MsgSubscriberClient) Get(ctx context.Context, id int) (*MsgSubscriber, error) {
	return c.Query().Where(msgsubscriber.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MsgSubscriberClient) GetX(ctx context.Context, id int) *MsgSubscriber {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMsgType queries the msg_type edge of a MsgSubscriber.
func (c *MsgSubscriberClient) QueryMsgType(ms *MsgSubscriber) *MsgTypeQuery {
	query := (&MsgTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msgsubscriber.Table, msgsubscriber.FieldID, id),
			sqlgraph.To(msgtype.Table, msgtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, msgsubscriber.MsgTypeTable, msgsubscriber.MsgTypeColumn),
		)
		schemaConfig := ms.schemaConfig
		step.To.Schema = schemaConfig.MsgType
		step.Edge.Schema = schemaConfig.MsgSubscriber
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a MsgSubscriber.
func (c *MsgSubscriberClient) QueryUser(ms *MsgSubscriber) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msgsubscriber.Table, msgsubscriber.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, msgsubscriber.UserTable, msgsubscriber.UserColumn),
		)
		schemaConfig := ms.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.MsgSubscriber
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MsgSubscriberClient) Hooks() []Hook {
	hooks := c.hooks.MsgSubscriber
	return append(hooks[:len(hooks):len(hooks)], msgsubscriber.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *MsgSubscriberClient) Interceptors() []Interceptor {
	return c.inters.MsgSubscriber
}

func (c *MsgSubscriberClient) mutate(ctx context.Context, m *MsgSubscriberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MsgSubscriberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MsgSubscriberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MsgSubscriberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MsgSubscriberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MsgSubscriber mutation op: %q", m.Op())
	}
}

// MsgTemplateClient is a client for the MsgTemplate schema.
type MsgTemplateClient struct {
	config
}

// NewMsgTemplateClient returns a client for the MsgTemplate from the given config.
func NewMsgTemplateClient(c config) *MsgTemplateClient {
	return &MsgTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `msgtemplate.Hooks(f(g(h())))`.
func (c *MsgTemplateClient) Use(hooks ...Hook) {
	c.hooks.MsgTemplate = append(c.hooks.MsgTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `msgtemplate.Intercept(f(g(h())))`.
func (c *MsgTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.MsgTemplate = append(c.inters.MsgTemplate, interceptors...)
}

// Create returns a builder for creating a MsgTemplate entity.
func (c *MsgTemplateClient) Create() *MsgTemplateCreate {
	mutation := newMsgTemplateMutation(c.config, OpCreate)
	return &MsgTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MsgTemplate entities.
func (c *MsgTemplateClient) CreateBulk(builders ...*MsgTemplateCreate) *MsgTemplateCreateBulk {
	return &MsgTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MsgTemplate.
func (c *MsgTemplateClient) Update() *MsgTemplateUpdate {
	mutation := newMsgTemplateMutation(c.config, OpUpdate)
	return &MsgTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MsgTemplateClient) UpdateOne(mt *MsgTemplate) *MsgTemplateUpdateOne {
	mutation := newMsgTemplateMutation(c.config, OpUpdateOne, withMsgTemplate(mt))
	return &MsgTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MsgTemplateClient) UpdateOneID(id int) *MsgTemplateUpdateOne {
	mutation := newMsgTemplateMutation(c.config, OpUpdateOne, withMsgTemplateID(id))
	return &MsgTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MsgTemplate.
func (c *MsgTemplateClient) Delete() *MsgTemplateDelete {
	mutation := newMsgTemplateMutation(c.config, OpDelete)
	return &MsgTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MsgTemplateClient) DeleteOne(mt *MsgTemplate) *MsgTemplateDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MsgTemplateClient) DeleteOneID(id int) *MsgTemplateDeleteOne {
	builder := c.Delete().Where(msgtemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MsgTemplateDeleteOne{builder}
}

// Query returns a query builder for MsgTemplate.
func (c *MsgTemplateClient) Query() *MsgTemplateQuery {
	return &MsgTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMsgTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a MsgTemplate entity by its id.
func (c *MsgTemplateClient) Get(ctx context.Context, id int) (*MsgTemplate, error) {
	return c.Query().Where(msgtemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MsgTemplateClient) GetX(ctx context.Context, id int) *MsgTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a MsgTemplate.
func (c *MsgTemplateClient) QueryEvent(mt *MsgTemplate) *MsgEventQuery {
	query := (&MsgEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msgtemplate.Table, msgtemplate.FieldID, id),
			sqlgraph.To(msgevent.Table, msgevent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, msgtemplate.EventTable, msgtemplate.EventColumn),
		)
		schemaConfig := mt.schemaConfig
		step.To.Schema = schemaConfig.MsgEvent
		step.Edge.Schema = schemaConfig.MsgTemplate
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MsgTemplateClient) Hooks() []Hook {
	hooks := c.hooks.MsgTemplate
	return append(hooks[:len(hooks):len(hooks)], msgtemplate.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *MsgTemplateClient) Interceptors() []Interceptor {
	return c.inters.MsgTemplate
}

func (c *MsgTemplateClient) mutate(ctx context.Context, m *MsgTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MsgTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MsgTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MsgTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MsgTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MsgTemplate mutation op: %q", m.Op())
	}
}

// MsgTypeClient is a client for the MsgType schema.
type MsgTypeClient struct {
	config
}

// NewMsgTypeClient returns a client for the MsgType from the given config.
func NewMsgTypeClient(c config) *MsgTypeClient {
	return &MsgTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `msgtype.Hooks(f(g(h())))`.
func (c *MsgTypeClient) Use(hooks ...Hook) {
	c.hooks.MsgType = append(c.hooks.MsgType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `msgtype.Intercept(f(g(h())))`.
func (c *MsgTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.MsgType = append(c.inters.MsgType, interceptors...)
}

// Create returns a builder for creating a MsgType entity.
func (c *MsgTypeClient) Create() *MsgTypeCreate {
	mutation := newMsgTypeMutation(c.config, OpCreate)
	return &MsgTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MsgType entities.
func (c *MsgTypeClient) CreateBulk(builders ...*MsgTypeCreate) *MsgTypeCreateBulk {
	return &MsgTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MsgType.
func (c *MsgTypeClient) Update() *MsgTypeUpdate {
	mutation := newMsgTypeMutation(c.config, OpUpdate)
	return &MsgTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MsgTypeClient) UpdateOne(mt *MsgType) *MsgTypeUpdateOne {
	mutation := newMsgTypeMutation(c.config, OpUpdateOne, withMsgType(mt))
	return &MsgTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MsgTypeClient) UpdateOneID(id int) *MsgTypeUpdateOne {
	mutation := newMsgTypeMutation(c.config, OpUpdateOne, withMsgTypeID(id))
	return &MsgTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MsgType.
func (c *MsgTypeClient) Delete() *MsgTypeDelete {
	mutation := newMsgTypeMutation(c.config, OpDelete)
	return &MsgTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MsgTypeClient) DeleteOne(mt *MsgType) *MsgTypeDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MsgTypeClient) DeleteOneID(id int) *MsgTypeDeleteOne {
	builder := c.Delete().Where(msgtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MsgTypeDeleteOne{builder}
}

// Query returns a query builder for MsgType.
func (c *MsgTypeClient) Query() *MsgTypeQuery {
	return &MsgTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMsgType},
		inters: c.Interceptors(),
	}
}

// Get returns a MsgType entity by its id.
func (c *MsgTypeClient) Get(ctx context.Context, id int) (*MsgType, error) {
	return c.Query().Where(msgtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MsgTypeClient) GetX(ctx context.Context, id int) *MsgType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a MsgType.
func (c *MsgTypeClient) QueryEvents(mt *MsgType) *MsgEventQuery {
	query := (&MsgEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msgtype.Table, msgtype.FieldID, id),
			sqlgraph.To(msgevent.Table, msgevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, msgtype.EventsTable, msgtype.EventsColumn),
		)
		schemaConfig := mt.schemaConfig
		step.To.Schema = schemaConfig.MsgEvent
		step.Edge.Schema = schemaConfig.MsgEvent
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribers queries the subscribers edge of a MsgType.
func (c *MsgTypeClient) QuerySubscribers(mt *MsgType) *MsgSubscriberQuery {
	query := (&MsgSubscriberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msgtype.Table, msgtype.FieldID, id),
			sqlgraph.To(msgsubscriber.Table, msgsubscriber.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, msgtype.SubscribersTable, msgtype.SubscribersColumn),
		)
		schemaConfig := mt.schemaConfig
		step.To.Schema = schemaConfig.MsgSubscriber
		step.Edge.Schema = schemaConfig.MsgSubscriber
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MsgTypeClient) Hooks() []Hook {
	hooks := c.hooks.MsgType
	return append(hooks[:len(hooks):len(hooks)], msgtype.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *MsgTypeClient) Interceptors() []Interceptor {
	return c.inters.MsgType
}

func (c *MsgTypeClient) mutate(ctx context.Context, m *MsgTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MsgTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MsgTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MsgTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MsgTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MsgType mutation op: %q", m.Op())
	}
}

// OrgRoleUserClient is a client for the OrgRoleUser schema.
type OrgRoleUserClient struct {
	config
}

// NewOrgRoleUserClient returns a client for the OrgRoleUser from the given config.
func NewOrgRoleUserClient(c config) *OrgRoleUserClient {
	return &OrgRoleUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orgroleuser.Hooks(f(g(h())))`.
func (c *OrgRoleUserClient) Use(hooks ...Hook) {
	c.hooks.OrgRoleUser = append(c.hooks.OrgRoleUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orgroleuser.Intercept(f(g(h())))`.
func (c *OrgRoleUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrgRoleUser = append(c.inters.OrgRoleUser, interceptors...)
}

// Create returns a builder for creating a OrgRoleUser entity.
func (c *OrgRoleUserClient) Create() *OrgRoleUserCreate {
	mutation := newOrgRoleUserMutation(c.config, OpCreate)
	return &OrgRoleUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrgRoleUser entities.
func (c *OrgRoleUserClient) CreateBulk(builders ...*OrgRoleUserCreate) *OrgRoleUserCreateBulk {
	return &OrgRoleUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrgRoleUser.
func (c *OrgRoleUserClient) Update() *OrgRoleUserUpdate {
	mutation := newOrgRoleUserMutation(c.config, OpUpdate)
	return &OrgRoleUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrgRoleUserClient) UpdateOne(oru *OrgRoleUser) *OrgRoleUserUpdateOne {
	mutation := newOrgRoleUserMutation(c.config, OpUpdateOne, withOrgRoleUser(oru))
	return &OrgRoleUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrgRoleUserClient) UpdateOneID(id int) *OrgRoleUserUpdateOne {
	mutation := newOrgRoleUserMutation(c.config, OpUpdateOne, withOrgRoleUserID(id))
	return &OrgRoleUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrgRoleUser.
func (c *OrgRoleUserClient) Delete() *OrgRoleUserDelete {
	mutation := newOrgRoleUserMutation(c.config, OpDelete)
	return &OrgRoleUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrgRoleUserClient) DeleteOne(oru *OrgRoleUser) *OrgRoleUserDeleteOne {
	return c.DeleteOneID(oru.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrgRoleUserClient) DeleteOneID(id int) *OrgRoleUserDeleteOne {
	builder := c.Delete().Where(orgroleuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrgRoleUserDeleteOne{builder}
}

// Query returns a query builder for OrgRoleUser.
func (c *OrgRoleUserClient) Query() *OrgRoleUserQuery {
	return &OrgRoleUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrgRoleUser},
		inters: c.Interceptors(),
	}
}

// Get returns a OrgRoleUser entity by its id.
func (c *OrgRoleUserClient) Get(ctx context.Context, id int) (*OrgRoleUser, error) {
	return c.Query().Where(orgroleuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrgRoleUserClient) GetX(ctx context.Context, id int) *OrgRoleUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrgRoleUserClient) Hooks() []Hook {
	hooks := c.hooks.OrgRoleUser
	return append(hooks[:len(hooks):len(hooks)], orgroleuser.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrgRoleUserClient) Interceptors() []Interceptor {
	return c.inters.OrgRoleUser
}

func (c *OrgRoleUserClient) mutate(ctx context.Context, m *OrgRoleUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrgRoleUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrgRoleUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrgRoleUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrgRoleUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrgRoleUser mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		MsgChannel, MsgEvent, MsgSubscriber, MsgTemplate, MsgType, OrgRoleUser,
		User []ent.Hook
	}
	inters struct {
		MsgChannel, MsgEvent, MsgSubscriber, MsgTemplate, MsgType, OrgRoleUser,
		User []ent.Interceptor
	}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}
