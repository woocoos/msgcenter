// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
	"github.com/woocoos/msgcenter/ent/msgtype"
)

// MsgTypeDelete is the builder for deleting a MsgType entity.
type MsgTypeDelete struct {
	config
	hooks    []Hook
	mutation *MsgTypeMutation
}

// Where appends a list predicates to the MsgTypeDelete builder.
func (mtd *MsgTypeDelete) Where(ps ...predicate.MsgType) *MsgTypeDelete {
	mtd.mutation.Where(ps...)
	return mtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mtd *MsgTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mtd.sqlExec, mtd.mutation, mtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mtd *MsgTypeDelete) ExecX(ctx context.Context) int {
	n, err := mtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mtd *MsgTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(msgtype.Table, sqlgraph.NewFieldSpec(msgtype.FieldID, field.TypeInt))
	_spec.Node.Schema = mtd.schemaConfig.MsgType
	ctx = internal.NewSchemaConfigContext(ctx, mtd.schemaConfig)
	if ps := mtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mtd.mutation.done = true
	return affected, err
}

// MsgTypeDeleteOne is the builder for deleting a single MsgType entity.
type MsgTypeDeleteOne struct {
	mtd *MsgTypeDelete
}

// Where appends a list predicates to the MsgTypeDelete builder.
func (mtdo *MsgTypeDeleteOne) Where(ps ...predicate.MsgType) *MsgTypeDeleteOne {
	mtdo.mtd.mutation.Where(ps...)
	return mtdo
}

// Exec executes the deletion query.
func (mtdo *MsgTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := mtdo.mtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{msgtype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mtdo *MsgTypeDeleteOne) ExecX(ctx context.Context) {
	if err := mtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
