// Code generated by ent, DO NOT EDIT.

package fileidentity

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fileidentity type in the database.
	Label = "file_identity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAccessKeyID holds the string denoting the access_key_id field in the database.
	FieldAccessKeyID = "access_key_id"
	// FieldAccessKeySecret holds the string denoting the access_key_secret field in the database.
	FieldAccessKeySecret = "access_key_secret"
	// FieldFileSourceID holds the string denoting the file_source_id field in the database.
	FieldFileSourceID = "file_source_id"
	// FieldRoleArn holds the string denoting the role_arn field in the database.
	FieldRoleArn = "role_arn"
	// FieldPolicy holds the string denoting the policy field in the database.
	FieldPolicy = "policy"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// EdgeSource holds the string denoting the source edge name in mutations.
	EdgeSource = "source"
	// Table holds the table name of the fileidentity in the database.
	Table = "file_identity"
	// SourceTable is the table that holds the source relation/edge.
	SourceTable = "file_identity"
	// SourceInverseTable is the table name for the FileSource entity.
	// It exists in this package in order to avoid circular dependency with the "filesource" package.
	SourceInverseTable = "file_source"
	// SourceColumn is the table column denoting the source relation/edge.
	SourceColumn = "file_source_id"
)

// Columns holds all SQL columns for fileidentity fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldAccessKeyID,
	FieldAccessKeySecret,
	FieldFileSourceID,
	FieldRoleArn,
	FieldPolicy,
	FieldDurationSeconds,
	FieldIsDefault,
	FieldComments,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/msgcenter/ent/runtime"
var (
	Hooks [1]ent.Hook
	// AccessKeyIDValidator is a validator for the "access_key_id" field. It is called by the builders before save.
	AccessKeyIDValidator func(string) error
	// AccessKeySecretValidator is a validator for the "access_key_secret" field. It is called by the builders before save.
	AccessKeySecretValidator func(string) error
	// RoleArnValidator is a validator for the "role_arn" field. It is called by the builders before save.
	RoleArnValidator func(string) error
	// DefaultDurationSeconds holds the default value on creation for the "duration_seconds" field.
	DefaultDurationSeconds int
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
)

// OrderOption defines the ordering options for the FileIdentity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByAccessKeyID orders the results by the access_key_id field.
func ByAccessKeyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessKeyID, opts...).ToFunc()
}

// ByAccessKeySecret orders the results by the access_key_secret field.
func ByAccessKeySecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessKeySecret, opts...).ToFunc()
}

// ByFileSourceID orders the results by the file_source_id field.
func ByFileSourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSourceID, opts...).ToFunc()
}

// ByRoleArn orders the results by the role_arn field.
func ByRoleArn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleArn, opts...).ToFunc()
}

// ByPolicy orders the results by the policy field.
func ByPolicy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPolicy, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// BySourceField orders the results by source field.
func BySourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceStep(), sql.OrderByField(field, opts...))
	}
}
func newSourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SourceTable, SourceColumn),
	)
}
