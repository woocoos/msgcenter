// Code generated by ent, DO NOT EDIT.

package fileidentity

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldTenantID, v))
}

// AccessKeyID applies equality check predicate on the "access_key_id" field. It's identical to AccessKeyIDEQ.
func AccessKeyID(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldAccessKeyID, v))
}

// AccessKeySecret applies equality check predicate on the "access_key_secret" field. It's identical to AccessKeySecretEQ.
func AccessKeySecret(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldAccessKeySecret, v))
}

// FileSourceID applies equality check predicate on the "file_source_id" field. It's identical to FileSourceIDEQ.
func FileSourceID(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldFileSourceID, v))
}

// RoleArn applies equality check predicate on the "role_arn" field. It's identical to RoleArnEQ.
func RoleArn(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldRoleArn, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldDurationSeconds, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldIsDefault, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldComments, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLTE(FieldTenantID, v))
}

// AccessKeyIDEQ applies the EQ predicate on the "access_key_id" field.
func AccessKeyIDEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldAccessKeyID, v))
}

// AccessKeyIDNEQ applies the NEQ predicate on the "access_key_id" field.
func AccessKeyIDNEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldAccessKeyID, v))
}

// AccessKeyIDIn applies the In predicate on the "access_key_id" field.
func AccessKeyIDIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldAccessKeyID, vs...))
}

// AccessKeyIDNotIn applies the NotIn predicate on the "access_key_id" field.
func AccessKeyIDNotIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldAccessKeyID, vs...))
}

// AccessKeyIDGT applies the GT predicate on the "access_key_id" field.
func AccessKeyIDGT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGT(FieldAccessKeyID, v))
}

// AccessKeyIDGTE applies the GTE predicate on the "access_key_id" field.
func AccessKeyIDGTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGTE(FieldAccessKeyID, v))
}

// AccessKeyIDLT applies the LT predicate on the "access_key_id" field.
func AccessKeyIDLT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLT(FieldAccessKeyID, v))
}

// AccessKeyIDLTE applies the LTE predicate on the "access_key_id" field.
func AccessKeyIDLTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLTE(FieldAccessKeyID, v))
}

// AccessKeyIDContains applies the Contains predicate on the "access_key_id" field.
func AccessKeyIDContains(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContains(FieldAccessKeyID, v))
}

// AccessKeyIDHasPrefix applies the HasPrefix predicate on the "access_key_id" field.
func AccessKeyIDHasPrefix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasPrefix(FieldAccessKeyID, v))
}

// AccessKeyIDHasSuffix applies the HasSuffix predicate on the "access_key_id" field.
func AccessKeyIDHasSuffix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasSuffix(FieldAccessKeyID, v))
}

// AccessKeyIDEqualFold applies the EqualFold predicate on the "access_key_id" field.
func AccessKeyIDEqualFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEqualFold(FieldAccessKeyID, v))
}

// AccessKeyIDContainsFold applies the ContainsFold predicate on the "access_key_id" field.
func AccessKeyIDContainsFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContainsFold(FieldAccessKeyID, v))
}

// AccessKeySecretEQ applies the EQ predicate on the "access_key_secret" field.
func AccessKeySecretEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldAccessKeySecret, v))
}

// AccessKeySecretNEQ applies the NEQ predicate on the "access_key_secret" field.
func AccessKeySecretNEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldAccessKeySecret, v))
}

// AccessKeySecretIn applies the In predicate on the "access_key_secret" field.
func AccessKeySecretIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldAccessKeySecret, vs...))
}

// AccessKeySecretNotIn applies the NotIn predicate on the "access_key_secret" field.
func AccessKeySecretNotIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldAccessKeySecret, vs...))
}

// AccessKeySecretGT applies the GT predicate on the "access_key_secret" field.
func AccessKeySecretGT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGT(FieldAccessKeySecret, v))
}

// AccessKeySecretGTE applies the GTE predicate on the "access_key_secret" field.
func AccessKeySecretGTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGTE(FieldAccessKeySecret, v))
}

// AccessKeySecretLT applies the LT predicate on the "access_key_secret" field.
func AccessKeySecretLT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLT(FieldAccessKeySecret, v))
}

// AccessKeySecretLTE applies the LTE predicate on the "access_key_secret" field.
func AccessKeySecretLTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLTE(FieldAccessKeySecret, v))
}

// AccessKeySecretContains applies the Contains predicate on the "access_key_secret" field.
func AccessKeySecretContains(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContains(FieldAccessKeySecret, v))
}

// AccessKeySecretHasPrefix applies the HasPrefix predicate on the "access_key_secret" field.
func AccessKeySecretHasPrefix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasPrefix(FieldAccessKeySecret, v))
}

// AccessKeySecretHasSuffix applies the HasSuffix predicate on the "access_key_secret" field.
func AccessKeySecretHasSuffix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasSuffix(FieldAccessKeySecret, v))
}

// AccessKeySecretEqualFold applies the EqualFold predicate on the "access_key_secret" field.
func AccessKeySecretEqualFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEqualFold(FieldAccessKeySecret, v))
}

// AccessKeySecretContainsFold applies the ContainsFold predicate on the "access_key_secret" field.
func AccessKeySecretContainsFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContainsFold(FieldAccessKeySecret, v))
}

// FileSourceIDEQ applies the EQ predicate on the "file_source_id" field.
func FileSourceIDEQ(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldFileSourceID, v))
}

// FileSourceIDNEQ applies the NEQ predicate on the "file_source_id" field.
func FileSourceIDNEQ(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldFileSourceID, v))
}

// FileSourceIDIn applies the In predicate on the "file_source_id" field.
func FileSourceIDIn(vs ...int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldFileSourceID, vs...))
}

// FileSourceIDNotIn applies the NotIn predicate on the "file_source_id" field.
func FileSourceIDNotIn(vs ...int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldFileSourceID, vs...))
}

// RoleArnEQ applies the EQ predicate on the "role_arn" field.
func RoleArnEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldRoleArn, v))
}

// RoleArnNEQ applies the NEQ predicate on the "role_arn" field.
func RoleArnNEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldRoleArn, v))
}

// RoleArnIn applies the In predicate on the "role_arn" field.
func RoleArnIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldRoleArn, vs...))
}

// RoleArnNotIn applies the NotIn predicate on the "role_arn" field.
func RoleArnNotIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldRoleArn, vs...))
}

// RoleArnGT applies the GT predicate on the "role_arn" field.
func RoleArnGT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGT(FieldRoleArn, v))
}

// RoleArnGTE applies the GTE predicate on the "role_arn" field.
func RoleArnGTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGTE(FieldRoleArn, v))
}

// RoleArnLT applies the LT predicate on the "role_arn" field.
func RoleArnLT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLT(FieldRoleArn, v))
}

// RoleArnLTE applies the LTE predicate on the "role_arn" field.
func RoleArnLTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLTE(FieldRoleArn, v))
}

// RoleArnContains applies the Contains predicate on the "role_arn" field.
func RoleArnContains(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContains(FieldRoleArn, v))
}

// RoleArnHasPrefix applies the HasPrefix predicate on the "role_arn" field.
func RoleArnHasPrefix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasPrefix(FieldRoleArn, v))
}

// RoleArnHasSuffix applies the HasSuffix predicate on the "role_arn" field.
func RoleArnHasSuffix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasSuffix(FieldRoleArn, v))
}

// RoleArnEqualFold applies the EqualFold predicate on the "role_arn" field.
func RoleArnEqualFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEqualFold(FieldRoleArn, v))
}

// RoleArnContainsFold applies the ContainsFold predicate on the "role_arn" field.
func RoleArnContainsFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContainsFold(FieldRoleArn, v))
}

// PolicyEQ applies the EQ predicate on the "policy" field.
func PolicyEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldPolicy, v))
}

// PolicyNEQ applies the NEQ predicate on the "policy" field.
func PolicyNEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldPolicy, v))
}

// PolicyIn applies the In predicate on the "policy" field.
func PolicyIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldPolicy, vs...))
}

// PolicyNotIn applies the NotIn predicate on the "policy" field.
func PolicyNotIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldPolicy, vs...))
}

// PolicyGT applies the GT predicate on the "policy" field.
func PolicyGT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGT(FieldPolicy, v))
}

// PolicyGTE applies the GTE predicate on the "policy" field.
func PolicyGTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGTE(FieldPolicy, v))
}

// PolicyLT applies the LT predicate on the "policy" field.
func PolicyLT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLT(FieldPolicy, v))
}

// PolicyLTE applies the LTE predicate on the "policy" field.
func PolicyLTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLTE(FieldPolicy, v))
}

// PolicyContains applies the Contains predicate on the "policy" field.
func PolicyContains(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContains(FieldPolicy, v))
}

// PolicyHasPrefix applies the HasPrefix predicate on the "policy" field.
func PolicyHasPrefix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasPrefix(FieldPolicy, v))
}

// PolicyHasSuffix applies the HasSuffix predicate on the "policy" field.
func PolicyHasSuffix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasSuffix(FieldPolicy, v))
}

// PolicyIsNil applies the IsNil predicate on the "policy" field.
func PolicyIsNil() predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIsNull(FieldPolicy))
}

// PolicyNotNil applies the NotNil predicate on the "policy" field.
func PolicyNotNil() predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotNull(FieldPolicy))
}

// PolicyEqualFold applies the EqualFold predicate on the "policy" field.
func PolicyEqualFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEqualFold(FieldPolicy, v))
}

// PolicyContainsFold applies the ContainsFold predicate on the "policy" field.
func PolicyContainsFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContainsFold(FieldPolicy, v))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v int) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLTE(FieldDurationSeconds, v))
}

// DurationSecondsIsNil applies the IsNil predicate on the "duration_seconds" field.
func DurationSecondsIsNil() predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIsNull(FieldDurationSeconds))
}

// DurationSecondsNotNil applies the NotNil predicate on the "duration_seconds" field.
func DurationSecondsNotNil() predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotNull(FieldDurationSeconds))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldIsDefault, v))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.FileIdentity {
	return predicate.FileIdentity(sql.FieldContainsFold(FieldComments, v))
}

// HasSource applies the HasEdge predicate on the "source" edge.
func HasSource() predicate.FileIdentity {
	return predicate.FileIdentity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SourceTable, SourceColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.FileSource
		step.Edge.Schema = schemaConfig.FileIdentity
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWith applies the HasEdge predicate on the "source" edge with a given conditions (other predicates).
func HasSourceWith(preds ...predicate.FileSource) predicate.FileIdentity {
	return predicate.FileIdentity(func(s *sql.Selector) {
		step := newSourceStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.FileSource
		step.Edge.Schema = schemaConfig.FileIdentity
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileIdentity) predicate.FileIdentity {
	return predicate.FileIdentity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileIdentity) predicate.FileIdentity {
	return predicate.FileIdentity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileIdentity) predicate.FileIdentity {
	return predicate.FileIdentity(sql.NotPredicates(p))
}
