// Code generated by ent, DO NOT EDIT.

package msginternalto

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldTenantID, v))
}

// MsgInternalID applies equality check predicate on the "msg_internal_id" field. It's identical to MsgInternalIDEQ.
func MsgInternalID(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldMsgInternalID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldUserID, v))
}

// ReadAt applies equality check predicate on the "read_at" field. It's identical to ReadAtEQ.
func ReadAt(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldReadAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldDeleteAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldCreatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLTE(FieldTenantID, v))
}

// MsgInternalIDEQ applies the EQ predicate on the "msg_internal_id" field.
func MsgInternalIDEQ(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldMsgInternalID, v))
}

// MsgInternalIDNEQ applies the NEQ predicate on the "msg_internal_id" field.
func MsgInternalIDNEQ(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNEQ(FieldMsgInternalID, v))
}

// MsgInternalIDIn applies the In predicate on the "msg_internal_id" field.
func MsgInternalIDIn(vs ...int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIn(FieldMsgInternalID, vs...))
}

// MsgInternalIDNotIn applies the NotIn predicate on the "msg_internal_id" field.
func MsgInternalIDNotIn(vs ...int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotIn(FieldMsgInternalID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotIn(FieldUserID, vs...))
}

// ReadAtEQ applies the EQ predicate on the "read_at" field.
func ReadAtEQ(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldReadAt, v))
}

// ReadAtNEQ applies the NEQ predicate on the "read_at" field.
func ReadAtNEQ(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNEQ(FieldReadAt, v))
}

// ReadAtIn applies the In predicate on the "read_at" field.
func ReadAtIn(vs ...time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIn(FieldReadAt, vs...))
}

// ReadAtNotIn applies the NotIn predicate on the "read_at" field.
func ReadAtNotIn(vs ...time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotIn(FieldReadAt, vs...))
}

// ReadAtGT applies the GT predicate on the "read_at" field.
func ReadAtGT(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGT(FieldReadAt, v))
}

// ReadAtGTE applies the GTE predicate on the "read_at" field.
func ReadAtGTE(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGTE(FieldReadAt, v))
}

// ReadAtLT applies the LT predicate on the "read_at" field.
func ReadAtLT(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLT(FieldReadAt, v))
}

// ReadAtLTE applies the LTE predicate on the "read_at" field.
func ReadAtLTE(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLTE(FieldReadAt, v))
}

// ReadAtIsNil applies the IsNil predicate on the "read_at" field.
func ReadAtIsNil() predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIsNull(FieldReadAt))
}

// ReadAtNotNil applies the NotNil predicate on the "read_at" field.
func ReadAtNotNil() predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotNull(FieldReadAt))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotNull(FieldDeleteAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.FieldLTE(FieldCreatedAt, v))
}

// HasMsgInternal applies the HasEdge predicate on the "msg_internal" edge.
func HasMsgInternal() predicate.MsgInternalTo {
	return predicate.MsgInternalTo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MsgInternalTable, MsgInternalColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgInternal
		step.Edge.Schema = schemaConfig.MsgInternalTo
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMsgInternalWith applies the HasEdge predicate on the "msg_internal" edge with a given conditions (other predicates).
func HasMsgInternalWith(preds ...predicate.MsgInternal) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(func(s *sql.Selector) {
		step := newMsgInternalStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.MsgInternal
		step.Edge.Schema = schemaConfig.MsgInternalTo
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.MsgInternalTo {
	return predicate.MsgInternalTo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.MsgInternalTo
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.MsgInternalTo
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MsgInternalTo) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MsgInternalTo) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MsgInternalTo) predicate.MsgInternalTo {
	return predicate.MsgInternalTo(sql.NotPredicates(p))
}
