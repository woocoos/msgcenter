// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/msgcenter/ent/msgevent"
	"github.com/woocoos/msgcenter/ent/msgsubscriber"
	"github.com/woocoos/msgcenter/ent/msgtype"
	"github.com/woocoos/msgcenter/ent/predicate"

	"github.com/woocoos/msgcenter/ent/internal"
)

// MsgTypeUpdate is the builder for updating MsgType entities.
type MsgTypeUpdate struct {
	config
	hooks    []Hook
	mutation *MsgTypeMutation
}

// Where appends a list predicates to the MsgTypeUpdate builder.
func (mtu *MsgTypeUpdate) Where(ps ...predicate.MsgType) *MsgTypeUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetUpdatedBy sets the "updated_by" field.
func (mtu *MsgTypeUpdate) SetUpdatedBy(i int) *MsgTypeUpdate {
	mtu.mutation.ResetUpdatedBy()
	mtu.mutation.SetUpdatedBy(i)
	return mtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableUpdatedBy(i *int) *MsgTypeUpdate {
	if i != nil {
		mtu.SetUpdatedBy(*i)
	}
	return mtu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mtu *MsgTypeUpdate) AddUpdatedBy(i int) *MsgTypeUpdate {
	mtu.mutation.AddUpdatedBy(i)
	return mtu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mtu *MsgTypeUpdate) ClearUpdatedBy() *MsgTypeUpdate {
	mtu.mutation.ClearUpdatedBy()
	return mtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mtu *MsgTypeUpdate) SetUpdatedAt(t time.Time) *MsgTypeUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableUpdatedAt(t *time.Time) *MsgTypeUpdate {
	if t != nil {
		mtu.SetUpdatedAt(*t)
	}
	return mtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mtu *MsgTypeUpdate) ClearUpdatedAt() *MsgTypeUpdate {
	mtu.mutation.ClearUpdatedAt()
	return mtu
}

// SetAppID sets the "app_id" field.
func (mtu *MsgTypeUpdate) SetAppID(i int) *MsgTypeUpdate {
	mtu.mutation.ResetAppID()
	mtu.mutation.SetAppID(i)
	return mtu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableAppID(i *int) *MsgTypeUpdate {
	if i != nil {
		mtu.SetAppID(*i)
	}
	return mtu
}

// AddAppID adds i to the "app_id" field.
func (mtu *MsgTypeUpdate) AddAppID(i int) *MsgTypeUpdate {
	mtu.mutation.AddAppID(i)
	return mtu
}

// ClearAppID clears the value of the "app_id" field.
func (mtu *MsgTypeUpdate) ClearAppID() *MsgTypeUpdate {
	mtu.mutation.ClearAppID()
	return mtu
}

// SetCategory sets the "category" field.
func (mtu *MsgTypeUpdate) SetCategory(s string) *MsgTypeUpdate {
	mtu.mutation.SetCategory(s)
	return mtu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableCategory(s *string) *MsgTypeUpdate {
	if s != nil {
		mtu.SetCategory(*s)
	}
	return mtu
}

// SetName sets the "name" field.
func (mtu *MsgTypeUpdate) SetName(s string) *MsgTypeUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableName(s *string) *MsgTypeUpdate {
	if s != nil {
		mtu.SetName(*s)
	}
	return mtu
}

// SetStatus sets the "status" field.
func (mtu *MsgTypeUpdate) SetStatus(ts typex.SimpleStatus) *MsgTypeUpdate {
	mtu.mutation.SetStatus(ts)
	return mtu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableStatus(ts *typex.SimpleStatus) *MsgTypeUpdate {
	if ts != nil {
		mtu.SetStatus(*ts)
	}
	return mtu
}

// ClearStatus clears the value of the "status" field.
func (mtu *MsgTypeUpdate) ClearStatus() *MsgTypeUpdate {
	mtu.mutation.ClearStatus()
	return mtu
}

// SetComments sets the "comments" field.
func (mtu *MsgTypeUpdate) SetComments(s string) *MsgTypeUpdate {
	mtu.mutation.SetComments(s)
	return mtu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableComments(s *string) *MsgTypeUpdate {
	if s != nil {
		mtu.SetComments(*s)
	}
	return mtu
}

// ClearComments clears the value of the "comments" field.
func (mtu *MsgTypeUpdate) ClearComments() *MsgTypeUpdate {
	mtu.mutation.ClearComments()
	return mtu
}

// SetCanSubs sets the "can_subs" field.
func (mtu *MsgTypeUpdate) SetCanSubs(b bool) *MsgTypeUpdate {
	mtu.mutation.SetCanSubs(b)
	return mtu
}

// SetNillableCanSubs sets the "can_subs" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableCanSubs(b *bool) *MsgTypeUpdate {
	if b != nil {
		mtu.SetCanSubs(*b)
	}
	return mtu
}

// ClearCanSubs clears the value of the "can_subs" field.
func (mtu *MsgTypeUpdate) ClearCanSubs() *MsgTypeUpdate {
	mtu.mutation.ClearCanSubs()
	return mtu
}

// SetCanCustom sets the "can_custom" field.
func (mtu *MsgTypeUpdate) SetCanCustom(b bool) *MsgTypeUpdate {
	mtu.mutation.SetCanCustom(b)
	return mtu
}

// SetNillableCanCustom sets the "can_custom" field if the given value is not nil.
func (mtu *MsgTypeUpdate) SetNillableCanCustom(b *bool) *MsgTypeUpdate {
	if b != nil {
		mtu.SetCanCustom(*b)
	}
	return mtu
}

// ClearCanCustom clears the value of the "can_custom" field.
func (mtu *MsgTypeUpdate) ClearCanCustom() *MsgTypeUpdate {
	mtu.mutation.ClearCanCustom()
	return mtu
}

// AddEventIDs adds the "events" edge to the MsgEvent entity by IDs.
func (mtu *MsgTypeUpdate) AddEventIDs(ids ...int) *MsgTypeUpdate {
	mtu.mutation.AddEventIDs(ids...)
	return mtu
}

// AddEvents adds the "events" edges to the MsgEvent entity.
func (mtu *MsgTypeUpdate) AddEvents(m ...*MsgEvent) *MsgTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.AddEventIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the MsgSubscriber entity by IDs.
func (mtu *MsgTypeUpdate) AddSubscriberIDs(ids ...int) *MsgTypeUpdate {
	mtu.mutation.AddSubscriberIDs(ids...)
	return mtu
}

// AddSubscribers adds the "subscribers" edges to the MsgSubscriber entity.
func (mtu *MsgTypeUpdate) AddSubscribers(m ...*MsgSubscriber) *MsgTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.AddSubscriberIDs(ids...)
}

// Mutation returns the MsgTypeMutation object of the builder.
func (mtu *MsgTypeUpdate) Mutation() *MsgTypeMutation {
	return mtu.mutation
}

// ClearEvents clears all "events" edges to the MsgEvent entity.
func (mtu *MsgTypeUpdate) ClearEvents() *MsgTypeUpdate {
	mtu.mutation.ClearEvents()
	return mtu
}

// RemoveEventIDs removes the "events" edge to MsgEvent entities by IDs.
func (mtu *MsgTypeUpdate) RemoveEventIDs(ids ...int) *MsgTypeUpdate {
	mtu.mutation.RemoveEventIDs(ids...)
	return mtu
}

// RemoveEvents removes "events" edges to MsgEvent entities.
func (mtu *MsgTypeUpdate) RemoveEvents(m ...*MsgEvent) *MsgTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.RemoveEventIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the MsgSubscriber entity.
func (mtu *MsgTypeUpdate) ClearSubscribers() *MsgTypeUpdate {
	mtu.mutation.ClearSubscribers()
	return mtu
}

// RemoveSubscriberIDs removes the "subscribers" edge to MsgSubscriber entities by IDs.
func (mtu *MsgTypeUpdate) RemoveSubscriberIDs(ids ...int) *MsgTypeUpdate {
	mtu.mutation.RemoveSubscriberIDs(ids...)
	return mtu
}

// RemoveSubscribers removes "subscribers" edges to MsgSubscriber entities.
func (mtu *MsgTypeUpdate) RemoveSubscribers(m ...*MsgSubscriber) *MsgTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.RemoveSubscriberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MsgTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mtu.sqlSave, mtu.mutation, mtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MsgTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MsgTypeUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MsgTypeUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtu *MsgTypeUpdate) check() error {
	if v, ok := mtu.mutation.Category(); ok {
		if err := msgtype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "MsgType.category": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.Name(); ok {
		if err := msgtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MsgType.name": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.Status(); ok {
		if err := msgtype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MsgType.status": %w`, err)}
		}
	}
	return nil
}

func (mtu *MsgTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(msgtype.Table, msgtype.Columns, sqlgraph.NewFieldSpec(msgtype.FieldID, field.TypeInt))
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.UpdatedBy(); ok {
		_spec.SetField(msgtype.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := mtu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(msgtype.FieldUpdatedBy, field.TypeInt, value)
	}
	if mtu.mutation.UpdatedByCleared() {
		_spec.ClearField(msgtype.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.SetField(msgtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if mtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(msgtype.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mtu.mutation.AppID(); ok {
		_spec.SetField(msgtype.FieldAppID, field.TypeInt, value)
	}
	if value, ok := mtu.mutation.AddedAppID(); ok {
		_spec.AddField(msgtype.FieldAppID, field.TypeInt, value)
	}
	if mtu.mutation.AppIDCleared() {
		_spec.ClearField(msgtype.FieldAppID, field.TypeInt)
	}
	if value, ok := mtu.mutation.Category(); ok {
		_spec.SetField(msgtype.FieldCategory, field.TypeString, value)
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.SetField(msgtype.FieldName, field.TypeString, value)
	}
	if value, ok := mtu.mutation.Status(); ok {
		_spec.SetField(msgtype.FieldStatus, field.TypeEnum, value)
	}
	if mtu.mutation.StatusCleared() {
		_spec.ClearField(msgtype.FieldStatus, field.TypeEnum)
	}
	if value, ok := mtu.mutation.Comments(); ok {
		_spec.SetField(msgtype.FieldComments, field.TypeString, value)
	}
	if mtu.mutation.CommentsCleared() {
		_spec.ClearField(msgtype.FieldComments, field.TypeString)
	}
	if value, ok := mtu.mutation.CanSubs(); ok {
		_spec.SetField(msgtype.FieldCanSubs, field.TypeBool, value)
	}
	if mtu.mutation.CanSubsCleared() {
		_spec.ClearField(msgtype.FieldCanSubs, field.TypeBool)
	}
	if value, ok := mtu.mutation.CanCustom(); ok {
		_spec.SetField(msgtype.FieldCanCustom, field.TypeBool, value)
	}
	if mtu.mutation.CanCustomCleared() {
		_spec.ClearField(msgtype.FieldCanCustom, field.TypeBool)
	}
	if mtu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.EventsTable,
			Columns: []string{msgtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtu.schemaConfig.MsgEvent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !mtu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.EventsTable,
			Columns: []string{msgtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtu.schemaConfig.MsgEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.EventsTable,
			Columns: []string{msgtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtu.schemaConfig.MsgEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtu.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.SubscribersTable,
			Columns: []string{msgtype.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgsubscriber.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtu.schemaConfig.MsgSubscriber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !mtu.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.SubscribersTable,
			Columns: []string{msgtype.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgsubscriber.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtu.schemaConfig.MsgSubscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.SubscribersTable,
			Columns: []string{msgtype.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgsubscriber.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtu.schemaConfig.MsgSubscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mtu.schemaConfig.MsgType
	ctx = internal.NewSchemaConfigContext(ctx, mtu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mtu.mutation.done = true
	return n, nil
}

// MsgTypeUpdateOne is the builder for updating a single MsgType entity.
type MsgTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgTypeMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (mtuo *MsgTypeUpdateOne) SetUpdatedBy(i int) *MsgTypeUpdateOne {
	mtuo.mutation.ResetUpdatedBy()
	mtuo.mutation.SetUpdatedBy(i)
	return mtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableUpdatedBy(i *int) *MsgTypeUpdateOne {
	if i != nil {
		mtuo.SetUpdatedBy(*i)
	}
	return mtuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mtuo *MsgTypeUpdateOne) AddUpdatedBy(i int) *MsgTypeUpdateOne {
	mtuo.mutation.AddUpdatedBy(i)
	return mtuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mtuo *MsgTypeUpdateOne) ClearUpdatedBy() *MsgTypeUpdateOne {
	mtuo.mutation.ClearUpdatedBy()
	return mtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mtuo *MsgTypeUpdateOne) SetUpdatedAt(t time.Time) *MsgTypeUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableUpdatedAt(t *time.Time) *MsgTypeUpdateOne {
	if t != nil {
		mtuo.SetUpdatedAt(*t)
	}
	return mtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mtuo *MsgTypeUpdateOne) ClearUpdatedAt() *MsgTypeUpdateOne {
	mtuo.mutation.ClearUpdatedAt()
	return mtuo
}

// SetAppID sets the "app_id" field.
func (mtuo *MsgTypeUpdateOne) SetAppID(i int) *MsgTypeUpdateOne {
	mtuo.mutation.ResetAppID()
	mtuo.mutation.SetAppID(i)
	return mtuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableAppID(i *int) *MsgTypeUpdateOne {
	if i != nil {
		mtuo.SetAppID(*i)
	}
	return mtuo
}

// AddAppID adds i to the "app_id" field.
func (mtuo *MsgTypeUpdateOne) AddAppID(i int) *MsgTypeUpdateOne {
	mtuo.mutation.AddAppID(i)
	return mtuo
}

// ClearAppID clears the value of the "app_id" field.
func (mtuo *MsgTypeUpdateOne) ClearAppID() *MsgTypeUpdateOne {
	mtuo.mutation.ClearAppID()
	return mtuo
}

// SetCategory sets the "category" field.
func (mtuo *MsgTypeUpdateOne) SetCategory(s string) *MsgTypeUpdateOne {
	mtuo.mutation.SetCategory(s)
	return mtuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableCategory(s *string) *MsgTypeUpdateOne {
	if s != nil {
		mtuo.SetCategory(*s)
	}
	return mtuo
}

// SetName sets the "name" field.
func (mtuo *MsgTypeUpdateOne) SetName(s string) *MsgTypeUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableName(s *string) *MsgTypeUpdateOne {
	if s != nil {
		mtuo.SetName(*s)
	}
	return mtuo
}

// SetStatus sets the "status" field.
func (mtuo *MsgTypeUpdateOne) SetStatus(ts typex.SimpleStatus) *MsgTypeUpdateOne {
	mtuo.mutation.SetStatus(ts)
	return mtuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *MsgTypeUpdateOne {
	if ts != nil {
		mtuo.SetStatus(*ts)
	}
	return mtuo
}

// ClearStatus clears the value of the "status" field.
func (mtuo *MsgTypeUpdateOne) ClearStatus() *MsgTypeUpdateOne {
	mtuo.mutation.ClearStatus()
	return mtuo
}

// SetComments sets the "comments" field.
func (mtuo *MsgTypeUpdateOne) SetComments(s string) *MsgTypeUpdateOne {
	mtuo.mutation.SetComments(s)
	return mtuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableComments(s *string) *MsgTypeUpdateOne {
	if s != nil {
		mtuo.SetComments(*s)
	}
	return mtuo
}

// ClearComments clears the value of the "comments" field.
func (mtuo *MsgTypeUpdateOne) ClearComments() *MsgTypeUpdateOne {
	mtuo.mutation.ClearComments()
	return mtuo
}

// SetCanSubs sets the "can_subs" field.
func (mtuo *MsgTypeUpdateOne) SetCanSubs(b bool) *MsgTypeUpdateOne {
	mtuo.mutation.SetCanSubs(b)
	return mtuo
}

// SetNillableCanSubs sets the "can_subs" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableCanSubs(b *bool) *MsgTypeUpdateOne {
	if b != nil {
		mtuo.SetCanSubs(*b)
	}
	return mtuo
}

// ClearCanSubs clears the value of the "can_subs" field.
func (mtuo *MsgTypeUpdateOne) ClearCanSubs() *MsgTypeUpdateOne {
	mtuo.mutation.ClearCanSubs()
	return mtuo
}

// SetCanCustom sets the "can_custom" field.
func (mtuo *MsgTypeUpdateOne) SetCanCustom(b bool) *MsgTypeUpdateOne {
	mtuo.mutation.SetCanCustom(b)
	return mtuo
}

// SetNillableCanCustom sets the "can_custom" field if the given value is not nil.
func (mtuo *MsgTypeUpdateOne) SetNillableCanCustom(b *bool) *MsgTypeUpdateOne {
	if b != nil {
		mtuo.SetCanCustom(*b)
	}
	return mtuo
}

// ClearCanCustom clears the value of the "can_custom" field.
func (mtuo *MsgTypeUpdateOne) ClearCanCustom() *MsgTypeUpdateOne {
	mtuo.mutation.ClearCanCustom()
	return mtuo
}

// AddEventIDs adds the "events" edge to the MsgEvent entity by IDs.
func (mtuo *MsgTypeUpdateOne) AddEventIDs(ids ...int) *MsgTypeUpdateOne {
	mtuo.mutation.AddEventIDs(ids...)
	return mtuo
}

// AddEvents adds the "events" edges to the MsgEvent entity.
func (mtuo *MsgTypeUpdateOne) AddEvents(m ...*MsgEvent) *MsgTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.AddEventIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the MsgSubscriber entity by IDs.
func (mtuo *MsgTypeUpdateOne) AddSubscriberIDs(ids ...int) *MsgTypeUpdateOne {
	mtuo.mutation.AddSubscriberIDs(ids...)
	return mtuo
}

// AddSubscribers adds the "subscribers" edges to the MsgSubscriber entity.
func (mtuo *MsgTypeUpdateOne) AddSubscribers(m ...*MsgSubscriber) *MsgTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.AddSubscriberIDs(ids...)
}

// Mutation returns the MsgTypeMutation object of the builder.
func (mtuo *MsgTypeUpdateOne) Mutation() *MsgTypeMutation {
	return mtuo.mutation
}

// ClearEvents clears all "events" edges to the MsgEvent entity.
func (mtuo *MsgTypeUpdateOne) ClearEvents() *MsgTypeUpdateOne {
	mtuo.mutation.ClearEvents()
	return mtuo
}

// RemoveEventIDs removes the "events" edge to MsgEvent entities by IDs.
func (mtuo *MsgTypeUpdateOne) RemoveEventIDs(ids ...int) *MsgTypeUpdateOne {
	mtuo.mutation.RemoveEventIDs(ids...)
	return mtuo
}

// RemoveEvents removes "events" edges to MsgEvent entities.
func (mtuo *MsgTypeUpdateOne) RemoveEvents(m ...*MsgEvent) *MsgTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.RemoveEventIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the MsgSubscriber entity.
func (mtuo *MsgTypeUpdateOne) ClearSubscribers() *MsgTypeUpdateOne {
	mtuo.mutation.ClearSubscribers()
	return mtuo
}

// RemoveSubscriberIDs removes the "subscribers" edge to MsgSubscriber entities by IDs.
func (mtuo *MsgTypeUpdateOne) RemoveSubscriberIDs(ids ...int) *MsgTypeUpdateOne {
	mtuo.mutation.RemoveSubscriberIDs(ids...)
	return mtuo
}

// RemoveSubscribers removes "subscribers" edges to MsgSubscriber entities.
func (mtuo *MsgTypeUpdateOne) RemoveSubscribers(m ...*MsgSubscriber) *MsgTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.RemoveSubscriberIDs(ids...)
}

// Where appends a list predicates to the MsgTypeUpdate builder.
func (mtuo *MsgTypeUpdateOne) Where(ps ...predicate.MsgType) *MsgTypeUpdateOne {
	mtuo.mutation.Where(ps...)
	return mtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MsgTypeUpdateOne) Select(field string, fields ...string) *MsgTypeUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MsgType entity.
func (mtuo *MsgTypeUpdateOne) Save(ctx context.Context) (*MsgType, error) {
	return withHooks(ctx, mtuo.sqlSave, mtuo.mutation, mtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MsgTypeUpdateOne) SaveX(ctx context.Context) *MsgType {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MsgTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MsgTypeUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtuo *MsgTypeUpdateOne) check() error {
	if v, ok := mtuo.mutation.Category(); ok {
		if err := msgtype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "MsgType.category": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.Name(); ok {
		if err := msgtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MsgType.name": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.Status(); ok {
		if err := msgtype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MsgType.status": %w`, err)}
		}
	}
	return nil
}

func (mtuo *MsgTypeUpdateOne) sqlSave(ctx context.Context) (_node *MsgType, err error) {
	if err := mtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(msgtype.Table, msgtype.Columns, sqlgraph.NewFieldSpec(msgtype.FieldID, field.TypeInt))
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msgtype.FieldID)
		for _, f := range fields {
			if !msgtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msgtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(msgtype.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := mtuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(msgtype.FieldUpdatedBy, field.TypeInt, value)
	}
	if mtuo.mutation.UpdatedByCleared() {
		_spec.ClearField(msgtype.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(msgtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if mtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(msgtype.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mtuo.mutation.AppID(); ok {
		_spec.SetField(msgtype.FieldAppID, field.TypeInt, value)
	}
	if value, ok := mtuo.mutation.AddedAppID(); ok {
		_spec.AddField(msgtype.FieldAppID, field.TypeInt, value)
	}
	if mtuo.mutation.AppIDCleared() {
		_spec.ClearField(msgtype.FieldAppID, field.TypeInt)
	}
	if value, ok := mtuo.mutation.Category(); ok {
		_spec.SetField(msgtype.FieldCategory, field.TypeString, value)
	}
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.SetField(msgtype.FieldName, field.TypeString, value)
	}
	if value, ok := mtuo.mutation.Status(); ok {
		_spec.SetField(msgtype.FieldStatus, field.TypeEnum, value)
	}
	if mtuo.mutation.StatusCleared() {
		_spec.ClearField(msgtype.FieldStatus, field.TypeEnum)
	}
	if value, ok := mtuo.mutation.Comments(); ok {
		_spec.SetField(msgtype.FieldComments, field.TypeString, value)
	}
	if mtuo.mutation.CommentsCleared() {
		_spec.ClearField(msgtype.FieldComments, field.TypeString)
	}
	if value, ok := mtuo.mutation.CanSubs(); ok {
		_spec.SetField(msgtype.FieldCanSubs, field.TypeBool, value)
	}
	if mtuo.mutation.CanSubsCleared() {
		_spec.ClearField(msgtype.FieldCanSubs, field.TypeBool)
	}
	if value, ok := mtuo.mutation.CanCustom(); ok {
		_spec.SetField(msgtype.FieldCanCustom, field.TypeBool, value)
	}
	if mtuo.mutation.CanCustomCleared() {
		_spec.ClearField(msgtype.FieldCanCustom, field.TypeBool)
	}
	if mtuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.EventsTable,
			Columns: []string{msgtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtuo.schemaConfig.MsgEvent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !mtuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.EventsTable,
			Columns: []string{msgtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtuo.schemaConfig.MsgEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.EventsTable,
			Columns: []string{msgtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgevent.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtuo.schemaConfig.MsgEvent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtuo.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.SubscribersTable,
			Columns: []string{msgtype.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgsubscriber.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtuo.schemaConfig.MsgSubscriber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !mtuo.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.SubscribersTable,
			Columns: []string{msgtype.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgsubscriber.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtuo.schemaConfig.MsgSubscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   msgtype.SubscribersTable,
			Columns: []string{msgtype.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(msgsubscriber.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mtuo.schemaConfig.MsgSubscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mtuo.schemaConfig.MsgType
	ctx = internal.NewSchemaConfigContext(ctx, mtuo.schemaConfig)
	_node = &MsgType{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mtuo.mutation.done = true
	return _node, nil
}
