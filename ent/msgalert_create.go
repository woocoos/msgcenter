// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/msgalert"
	"github.com/woocoos/msgcenter/ent/nlog"
	"github.com/woocoos/msgcenter/ent/nlogalert"
	"github.com/woocoos/msgcenter/pkg/alert"
	"github.com/woocoos/msgcenter/pkg/label"
)

// MsgAlertCreate is the builder for creating a MsgAlert entity.
type MsgAlertCreate struct {
	config
	mutation *MsgAlertMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (mac *MsgAlertCreate) SetTenantID(i int) *MsgAlertCreate {
	mac.mutation.SetTenantID(i)
	return mac
}

// SetLabels sets the "labels" field.
func (mac *MsgAlertCreate) SetLabels(ls *label.LabelSet) *MsgAlertCreate {
	mac.mutation.SetLabels(ls)
	return mac
}

// SetAnnotations sets the "annotations" field.
func (mac *MsgAlertCreate) SetAnnotations(ls *label.LabelSet) *MsgAlertCreate {
	mac.mutation.SetAnnotations(ls)
	return mac
}

// SetStartsAt sets the "starts_at" field.
func (mac *MsgAlertCreate) SetStartsAt(t time.Time) *MsgAlertCreate {
	mac.mutation.SetStartsAt(t)
	return mac
}

// SetEndsAt sets the "ends_at" field.
func (mac *MsgAlertCreate) SetEndsAt(t time.Time) *MsgAlertCreate {
	mac.mutation.SetEndsAt(t)
	return mac
}

// SetURL sets the "url" field.
func (mac *MsgAlertCreate) SetURL(s string) *MsgAlertCreate {
	mac.mutation.SetURL(s)
	return mac
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mac *MsgAlertCreate) SetNillableURL(s *string) *MsgAlertCreate {
	if s != nil {
		mac.SetURL(*s)
	}
	return mac
}

// SetTimeout sets the "timeout" field.
func (mac *MsgAlertCreate) SetTimeout(b bool) *MsgAlertCreate {
	mac.mutation.SetTimeout(b)
	return mac
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (mac *MsgAlertCreate) SetNillableTimeout(b *bool) *MsgAlertCreate {
	if b != nil {
		mac.SetTimeout(*b)
	}
	return mac
}

// SetFingerprint sets the "fingerprint" field.
func (mac *MsgAlertCreate) SetFingerprint(s string) *MsgAlertCreate {
	mac.mutation.SetFingerprint(s)
	return mac
}

// SetState sets the "state" field.
func (mac *MsgAlertCreate) SetState(as alert.AlertStatus) *MsgAlertCreate {
	mac.mutation.SetState(as)
	return mac
}

// SetNillableState sets the "state" field if the given value is not nil.
func (mac *MsgAlertCreate) SetNillableState(as *alert.AlertStatus) *MsgAlertCreate {
	if as != nil {
		mac.SetState(*as)
	}
	return mac
}

// SetCreatedAt sets the "created_at" field.
func (mac *MsgAlertCreate) SetCreatedAt(t time.Time) *MsgAlertCreate {
	mac.mutation.SetCreatedAt(t)
	return mac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mac *MsgAlertCreate) SetNillableCreatedAt(t *time.Time) *MsgAlertCreate {
	if t != nil {
		mac.SetCreatedAt(*t)
	}
	return mac
}

// SetUpdatedAt sets the "updated_at" field.
func (mac *MsgAlertCreate) SetUpdatedAt(t time.Time) *MsgAlertCreate {
	mac.mutation.SetUpdatedAt(t)
	return mac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mac *MsgAlertCreate) SetNillableUpdatedAt(t *time.Time) *MsgAlertCreate {
	if t != nil {
		mac.SetUpdatedAt(*t)
	}
	return mac
}

// SetDeleted sets the "deleted" field.
func (mac *MsgAlertCreate) SetDeleted(b bool) *MsgAlertCreate {
	mac.mutation.SetDeleted(b)
	return mac
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (mac *MsgAlertCreate) SetNillableDeleted(b *bool) *MsgAlertCreate {
	if b != nil {
		mac.SetDeleted(*b)
	}
	return mac
}

// SetID sets the "id" field.
func (mac *MsgAlertCreate) SetID(i int) *MsgAlertCreate {
	mac.mutation.SetID(i)
	return mac
}

// AddNlogIDs adds the "nlog" edge to the Nlog entity by IDs.
func (mac *MsgAlertCreate) AddNlogIDs(ids ...int) *MsgAlertCreate {
	mac.mutation.AddNlogIDs(ids...)
	return mac
}

// AddNlog adds the "nlog" edges to the Nlog entity.
func (mac *MsgAlertCreate) AddNlog(n ...*Nlog) *MsgAlertCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mac.AddNlogIDs(ids...)
}

// AddNlogAlertIDs adds the "nlog_alerts" edge to the NlogAlert entity by IDs.
func (mac *MsgAlertCreate) AddNlogAlertIDs(ids ...int) *MsgAlertCreate {
	mac.mutation.AddNlogAlertIDs(ids...)
	return mac
}

// AddNlogAlerts adds the "nlog_alerts" edges to the NlogAlert entity.
func (mac *MsgAlertCreate) AddNlogAlerts(n ...*NlogAlert) *MsgAlertCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mac.AddNlogAlertIDs(ids...)
}

// Mutation returns the MsgAlertMutation object of the builder.
func (mac *MsgAlertCreate) Mutation() *MsgAlertMutation {
	return mac.mutation
}

// Save creates the MsgAlert in the database.
func (mac *MsgAlertCreate) Save(ctx context.Context) (*MsgAlert, error) {
	if err := mac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mac.sqlSave, mac.mutation, mac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mac *MsgAlertCreate) SaveX(ctx context.Context) *MsgAlert {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mac *MsgAlertCreate) Exec(ctx context.Context) error {
	_, err := mac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mac *MsgAlertCreate) ExecX(ctx context.Context) {
	if err := mac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mac *MsgAlertCreate) defaults() error {
	if _, ok := mac.mutation.Timeout(); !ok {
		v := msgalert.DefaultTimeout
		mac.mutation.SetTimeout(v)
	}
	if _, ok := mac.mutation.State(); !ok {
		v := msgalert.DefaultState
		mac.mutation.SetState(v)
	}
	if _, ok := mac.mutation.CreatedAt(); !ok {
		if msgalert.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized msgalert.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := msgalert.DefaultCreatedAt()
		mac.mutation.SetCreatedAt(v)
	}
	if _, ok := mac.mutation.Deleted(); !ok {
		v := msgalert.DefaultDeleted
		mac.mutation.SetDeleted(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mac *MsgAlertCreate) check() error {
	if _, ok := mac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "MsgAlert.tenant_id"`)}
	}
	if v, ok := mac.mutation.Labels(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "labels", err: fmt.Errorf(`ent: validator failed for field "MsgAlert.labels": %w`, err)}
		}
	}
	if v, ok := mac.mutation.Annotations(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "annotations", err: fmt.Errorf(`ent: validator failed for field "MsgAlert.annotations": %w`, err)}
		}
	}
	if _, ok := mac.mutation.StartsAt(); !ok {
		return &ValidationError{Name: "starts_at", err: errors.New(`ent: missing required field "MsgAlert.starts_at"`)}
	}
	if _, ok := mac.mutation.EndsAt(); !ok {
		return &ValidationError{Name: "ends_at", err: errors.New(`ent: missing required field "MsgAlert.ends_at"`)}
	}
	if _, ok := mac.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "MsgAlert.timeout"`)}
	}
	if _, ok := mac.mutation.Fingerprint(); !ok {
		return &ValidationError{Name: "fingerprint", err: errors.New(`ent: missing required field "MsgAlert.fingerprint"`)}
	}
	if _, ok := mac.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "MsgAlert.state"`)}
	}
	if v, ok := mac.mutation.State(); ok {
		if err := msgalert.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "MsgAlert.state": %w`, err)}
		}
	}
	if _, ok := mac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MsgAlert.created_at"`)}
	}
	if _, ok := mac.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "MsgAlert.deleted"`)}
	}
	return nil
}

func (mac *MsgAlertCreate) sqlSave(ctx context.Context) (*MsgAlert, error) {
	if err := mac.check(); err != nil {
		return nil, err
	}
	_node, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mac.mutation.id = &_node.ID
	mac.mutation.done = true
	return _node, nil
}

func (mac *MsgAlertCreate) createSpec() (*MsgAlert, *sqlgraph.CreateSpec) {
	var (
		_node = &MsgAlert{config: mac.config}
		_spec = sqlgraph.NewCreateSpec(msgalert.Table, sqlgraph.NewFieldSpec(msgalert.FieldID, field.TypeInt))
	)
	_spec.Schema = mac.schemaConfig.MsgAlert
	_spec.OnConflict = mac.conflict
	if id, ok := mac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mac.mutation.TenantID(); ok {
		_spec.SetField(msgalert.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := mac.mutation.Labels(); ok {
		_spec.SetField(msgalert.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := mac.mutation.Annotations(); ok {
		_spec.SetField(msgalert.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := mac.mutation.StartsAt(); ok {
		_spec.SetField(msgalert.FieldStartsAt, field.TypeTime, value)
		_node.StartsAt = value
	}
	if value, ok := mac.mutation.EndsAt(); ok {
		_spec.SetField(msgalert.FieldEndsAt, field.TypeTime, value)
		_node.EndsAt = value
	}
	if value, ok := mac.mutation.URL(); ok {
		_spec.SetField(msgalert.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := mac.mutation.Timeout(); ok {
		_spec.SetField(msgalert.FieldTimeout, field.TypeBool, value)
		_node.Timeout = value
	}
	if value, ok := mac.mutation.Fingerprint(); ok {
		_spec.SetField(msgalert.FieldFingerprint, field.TypeString, value)
		_node.Fingerprint = value
	}
	if value, ok := mac.mutation.State(); ok {
		_spec.SetField(msgalert.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := mac.mutation.CreatedAt(); ok {
		_spec.SetField(msgalert.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mac.mutation.UpdatedAt(); ok {
		_spec.SetField(msgalert.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mac.mutation.Deleted(); ok {
		_spec.SetField(msgalert.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if nodes := mac.mutation.NlogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   msgalert.NlogTable,
			Columns: msgalert.NlogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlog.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mac.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &NlogAlertCreate{config: mac.config, mutation: newNlogAlertMutation(mac.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mac.mutation.NlogAlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   msgalert.NlogAlertsTable,
			Columns: []string{msgalert.NlogAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nlogalert.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mac.schemaConfig.NlogAlert
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgAlert.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgAlertUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (mac *MsgAlertCreate) OnConflict(opts ...sql.ConflictOption) *MsgAlertUpsertOne {
	mac.conflict = opts
	return &MsgAlertUpsertOne{
		create: mac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgAlert.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mac *MsgAlertCreate) OnConflictColumns(columns ...string) *MsgAlertUpsertOne {
	mac.conflict = append(mac.conflict, sql.ConflictColumns(columns...))
	return &MsgAlertUpsertOne{
		create: mac,
	}
}

type (
	// MsgAlertUpsertOne is the builder for "upsert"-ing
	//  one MsgAlert node.
	MsgAlertUpsertOne struct {
		create *MsgAlertCreate
	}

	// MsgAlertUpsert is the "OnConflict" setter.
	MsgAlertUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabels sets the "labels" field.
func (u *MsgAlertUpsert) SetLabels(v *label.LabelSet) *MsgAlertUpsert {
	u.Set(msgalert.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateLabels() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *MsgAlertUpsert) ClearLabels() *MsgAlertUpsert {
	u.SetNull(msgalert.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *MsgAlertUpsert) SetAnnotations(v *label.LabelSet) *MsgAlertUpsert {
	u.Set(msgalert.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateAnnotations() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *MsgAlertUpsert) ClearAnnotations() *MsgAlertUpsert {
	u.SetNull(msgalert.FieldAnnotations)
	return u
}

// SetStartsAt sets the "starts_at" field.
func (u *MsgAlertUpsert) SetStartsAt(v time.Time) *MsgAlertUpsert {
	u.Set(msgalert.FieldStartsAt, v)
	return u
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateStartsAt() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldStartsAt)
	return u
}

// SetEndsAt sets the "ends_at" field.
func (u *MsgAlertUpsert) SetEndsAt(v time.Time) *MsgAlertUpsert {
	u.Set(msgalert.FieldEndsAt, v)
	return u
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateEndsAt() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldEndsAt)
	return u
}

// SetURL sets the "url" field.
func (u *MsgAlertUpsert) SetURL(v string) *MsgAlertUpsert {
	u.Set(msgalert.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateURL() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *MsgAlertUpsert) ClearURL() *MsgAlertUpsert {
	u.SetNull(msgalert.FieldURL)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *MsgAlertUpsert) SetTimeout(v bool) *MsgAlertUpsert {
	u.Set(msgalert.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateTimeout() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldTimeout)
	return u
}

// SetFingerprint sets the "fingerprint" field.
func (u *MsgAlertUpsert) SetFingerprint(v string) *MsgAlertUpsert {
	u.Set(msgalert.FieldFingerprint, v)
	return u
}

// UpdateFingerprint sets the "fingerprint" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateFingerprint() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldFingerprint)
	return u
}

// SetState sets the "state" field.
func (u *MsgAlertUpsert) SetState(v alert.AlertStatus) *MsgAlertUpsert {
	u.Set(msgalert.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateState() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldState)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgAlertUpsert) SetUpdatedAt(v time.Time) *MsgAlertUpsert {
	u.Set(msgalert.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateUpdatedAt() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgAlertUpsert) ClearUpdatedAt() *MsgAlertUpsert {
	u.SetNull(msgalert.FieldUpdatedAt)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *MsgAlertUpsert) SetDeleted(v bool) *MsgAlertUpsert {
	u.Set(msgalert.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *MsgAlertUpsert) UpdateDeleted() *MsgAlertUpsert {
	u.SetExcluded(msgalert.FieldDeleted)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MsgAlert.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msgalert.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgAlertUpsertOne) UpdateNewValues() *MsgAlertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(msgalert.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(msgalert.FieldTenantID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(msgalert.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgAlert.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MsgAlertUpsertOne) Ignore() *MsgAlertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgAlertUpsertOne) DoNothing() *MsgAlertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgAlertCreate.OnConflict
// documentation for more info.
func (u *MsgAlertUpsertOne) Update(set func(*MsgAlertUpsert)) *MsgAlertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgAlertUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabels sets the "labels" field.
func (u *MsgAlertUpsertOne) SetLabels(v *label.LabelSet) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateLabels() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *MsgAlertUpsertOne) ClearLabels() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *MsgAlertUpsertOne) SetAnnotations(v *label.LabelSet) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateAnnotations() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *MsgAlertUpsertOne) ClearAnnotations() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.ClearAnnotations()
	})
}

// SetStartsAt sets the "starts_at" field.
func (u *MsgAlertUpsertOne) SetStartsAt(v time.Time) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetStartsAt(v)
	})
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateStartsAt() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateStartsAt()
	})
}

// SetEndsAt sets the "ends_at" field.
func (u *MsgAlertUpsertOne) SetEndsAt(v time.Time) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetEndsAt(v)
	})
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateEndsAt() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateEndsAt()
	})
}

// SetURL sets the "url" field.
func (u *MsgAlertUpsertOne) SetURL(v string) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateURL() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *MsgAlertUpsertOne) ClearURL() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.ClearURL()
	})
}

// SetTimeout sets the "timeout" field.
func (u *MsgAlertUpsertOne) SetTimeout(v bool) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateTimeout() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateTimeout()
	})
}

// SetFingerprint sets the "fingerprint" field.
func (u *MsgAlertUpsertOne) SetFingerprint(v string) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetFingerprint(v)
	})
}

// UpdateFingerprint sets the "fingerprint" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateFingerprint() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateFingerprint()
	})
}

// SetState sets the "state" field.
func (u *MsgAlertUpsertOne) SetState(v alert.AlertStatus) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateState() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateState()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgAlertUpsertOne) SetUpdatedAt(v time.Time) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateUpdatedAt() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgAlertUpsertOne) ClearUpdatedAt() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *MsgAlertUpsertOne) SetDeleted(v bool) *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *MsgAlertUpsertOne) UpdateDeleted() *MsgAlertUpsertOne {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateDeleted()
	})
}

// Exec executes the query.
func (u *MsgAlertUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgAlertCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgAlertUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MsgAlertUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MsgAlertUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MsgAlertCreateBulk is the builder for creating many MsgAlert entities in bulk.
type MsgAlertCreateBulk struct {
	config
	builders []*MsgAlertCreate
	conflict []sql.ConflictOption
}

// Save creates the MsgAlert entities in the database.
func (macb *MsgAlertCreateBulk) Save(ctx context.Context) ([]*MsgAlert, error) {
	specs := make([]*sqlgraph.CreateSpec, len(macb.builders))
	nodes := make([]*MsgAlert, len(macb.builders))
	mutators := make([]Mutator, len(macb.builders))
	for i := range macb.builders {
		func(i int, root context.Context) {
			builder := macb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgAlertMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, macb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = macb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, macb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, macb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (macb *MsgAlertCreateBulk) SaveX(ctx context.Context) []*MsgAlert {
	v, err := macb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macb *MsgAlertCreateBulk) Exec(ctx context.Context) error {
	_, err := macb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macb *MsgAlertCreateBulk) ExecX(ctx context.Context) {
	if err := macb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MsgAlert.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MsgAlertUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (macb *MsgAlertCreateBulk) OnConflict(opts ...sql.ConflictOption) *MsgAlertUpsertBulk {
	macb.conflict = opts
	return &MsgAlertUpsertBulk{
		create: macb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MsgAlert.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (macb *MsgAlertCreateBulk) OnConflictColumns(columns ...string) *MsgAlertUpsertBulk {
	macb.conflict = append(macb.conflict, sql.ConflictColumns(columns...))
	return &MsgAlertUpsertBulk{
		create: macb,
	}
}

// MsgAlertUpsertBulk is the builder for "upsert"-ing
// a bulk of MsgAlert nodes.
type MsgAlertUpsertBulk struct {
	create *MsgAlertCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MsgAlert.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(msgalert.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MsgAlertUpsertBulk) UpdateNewValues() *MsgAlertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(msgalert.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(msgalert.FieldTenantID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(msgalert.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MsgAlert.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MsgAlertUpsertBulk) Ignore() *MsgAlertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MsgAlertUpsertBulk) DoNothing() *MsgAlertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MsgAlertCreateBulk.OnConflict
// documentation for more info.
func (u *MsgAlertUpsertBulk) Update(set func(*MsgAlertUpsert)) *MsgAlertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MsgAlertUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabels sets the "labels" field.
func (u *MsgAlertUpsertBulk) SetLabels(v *label.LabelSet) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateLabels() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *MsgAlertUpsertBulk) ClearLabels() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *MsgAlertUpsertBulk) SetAnnotations(v *label.LabelSet) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateAnnotations() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *MsgAlertUpsertBulk) ClearAnnotations() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.ClearAnnotations()
	})
}

// SetStartsAt sets the "starts_at" field.
func (u *MsgAlertUpsertBulk) SetStartsAt(v time.Time) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetStartsAt(v)
	})
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateStartsAt() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateStartsAt()
	})
}

// SetEndsAt sets the "ends_at" field.
func (u *MsgAlertUpsertBulk) SetEndsAt(v time.Time) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetEndsAt(v)
	})
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateEndsAt() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateEndsAt()
	})
}

// SetURL sets the "url" field.
func (u *MsgAlertUpsertBulk) SetURL(v string) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateURL() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *MsgAlertUpsertBulk) ClearURL() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.ClearURL()
	})
}

// SetTimeout sets the "timeout" field.
func (u *MsgAlertUpsertBulk) SetTimeout(v bool) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateTimeout() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateTimeout()
	})
}

// SetFingerprint sets the "fingerprint" field.
func (u *MsgAlertUpsertBulk) SetFingerprint(v string) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetFingerprint(v)
	})
}

// UpdateFingerprint sets the "fingerprint" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateFingerprint() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateFingerprint()
	})
}

// SetState sets the "state" field.
func (u *MsgAlertUpsertBulk) SetState(v alert.AlertStatus) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateState() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateState()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MsgAlertUpsertBulk) SetUpdatedAt(v time.Time) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateUpdatedAt() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MsgAlertUpsertBulk) ClearUpdatedAt() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *MsgAlertUpsertBulk) SetDeleted(v bool) *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *MsgAlertUpsertBulk) UpdateDeleted() *MsgAlertUpsertBulk {
	return u.Update(func(s *MsgAlertUpsert) {
		s.UpdateDeleted()
	})
}

// Exec executes the query.
func (u *MsgAlertUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MsgAlertCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MsgAlertCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MsgAlertUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
