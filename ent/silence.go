// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/msgcenter/ent/silence"
	"github.com/woocoos/msgcenter/ent/user"
	"github.com/woocoos/msgcenter/pkg/label"
)

// Silence is the model entity for the Silence schema.
type Silence struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 应用ID
	Matchers []label.Matcher `json:"matchers,omitempty"`
	// 开始时间
	StartsAt time.Time `json:"starts_at,omitempty"`
	// 结束时间
	EndsAt time.Time `json:"ends_at,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SilenceQuery when eager-loading is set.
	Edges        SilenceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SilenceEdges holds the relations/edges for other nodes in the graph.
type SilenceEdges struct {
	// 创建人
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SilenceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Silence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case silence.FieldMatchers:
			values[i] = new([]byte)
		case silence.FieldID, silence.FieldCreatedBy, silence.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case silence.FieldComments:
			values[i] = new(sql.NullString)
		case silence.FieldCreatedAt, silence.FieldUpdatedAt, silence.FieldDeletedAt, silence.FieldStartsAt, silence.FieldEndsAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Silence fields.
func (s *Silence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case silence.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case silence.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = int(value.Int64)
			}
		case silence.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case silence.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = int(value.Int64)
			}
		case silence.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case silence.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case silence.FieldMatchers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field matchers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Matchers); err != nil {
					return fmt.Errorf("unmarshal field matchers: %w", err)
				}
			}
		case silence.FieldStartsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field starts_at", values[i])
			} else if value.Valid {
				s.StartsAt = value.Time
			}
		case silence.FieldEndsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ends_at", values[i])
			} else if value.Valid {
				s.EndsAt = value.Time
			}
		case silence.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				s.Comments = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Silence.
// This includes values selected through modifiers, order, etc.
func (s *Silence) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Silence entity.
func (s *Silence) QueryUser() *UserQuery {
	return NewSilenceClient(s.config).QueryUser(s)
}

// Update returns a builder for updating this Silence.
// Note that you need to call Silence.Unwrap() before calling this method if this Silence
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Silence) Update() *SilenceUpdateOne {
	return NewSilenceClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Silence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Silence) Unwrap() *Silence {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Silence is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Silence) String() string {
	var builder strings.Builder
	builder.WriteString("Silence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("matchers=")
	builder.WriteString(fmt.Sprintf("%v", s.Matchers))
	builder.WriteString(", ")
	builder.WriteString("starts_at=")
	builder.WriteString(s.StartsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ends_at=")
	builder.WriteString(s.EndsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(s.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// Silences is a parsable slice of Silence.
type Silences []*Silence
