// Code generated by ent, DO NOT EDIT.

package orgroleuser

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the orgroleuser type in the database.
	Label = "org_role_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrgRoleID holds the string denoting the org_role_id field in the database.
	FieldOrgRoleID = "org_role_id"
	// FieldOrgUserID holds the string denoting the org_user_id field in the database.
	FieldOrgUserID = "org_user_id"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// Table holds the table name of the orgroleuser in the database.
	Table = "org_role_user"
)

// Columns holds all SQL columns for orgroleuser fields.
var Columns = []string{
	FieldID,
	FieldOrgRoleID,
	FieldOrgUserID,
	FieldOrgID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/msgcenter/ent/runtime"
var (
	Hooks [1]ent.Hook
)

// OrderOption defines the ordering options for the OrgRoleUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrgRoleID orders the results by the org_role_id field.
func ByOrgRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgRoleID, opts...).ToFunc()
}

// ByOrgUserID orders the results by the org_user_id field.
func ByOrgUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgUserID, opts...).ToFunc()
}

// ByOrgID orders the results by the org_id field.
func ByOrgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}
