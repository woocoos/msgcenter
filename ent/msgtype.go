// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/msgcenter/ent/msgtype"
)

// MsgType is the model entity for the MsgType schema.
type MsgType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 应用ID
	AppID int `json:"app_id,omitempty"`
	// 消息类型分类
	Category string `json:"category,omitempty"`
	// 消息类型名称,应用内唯一
	Name string `json:"name,omitempty"`
	// 状态
	Status typex.SimpleStatus `json:"status,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// 是否可订阅
	CanSubs bool `json:"can_subs,omitempty"`
	// 是否可定制
	CanCustom bool `json:"can_custom,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MsgTypeQuery when eager-loading is set.
	Edges        MsgTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MsgTypeEdges holds the relations/edges for other nodes in the graph.
type MsgTypeEdges struct {
	// 消息事件
	Events []*MsgEvent `json:"events,omitempty"`
	// 订阅者
	Subscribers []*MsgSubscriber `json:"subscribers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedEvents      map[string][]*MsgEvent
	namedSubscribers map[string][]*MsgSubscriber
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e MsgTypeEdges) EventsOrErr() ([]*MsgEvent, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// SubscribersOrErr returns the Subscribers value or an error if the edge
// was not loaded in eager-loading.
func (e MsgTypeEdges) SubscribersOrErr() ([]*MsgSubscriber, error) {
	if e.loadedTypes[1] {
		return e.Subscribers, nil
	}
	return nil, &NotLoadedError{edge: "subscribers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MsgType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msgtype.FieldCanSubs, msgtype.FieldCanCustom:
			values[i] = new(sql.NullBool)
		case msgtype.FieldID, msgtype.FieldCreatedBy, msgtype.FieldUpdatedBy, msgtype.FieldAppID:
			values[i] = new(sql.NullInt64)
		case msgtype.FieldCategory, msgtype.FieldName, msgtype.FieldStatus, msgtype.FieldComments:
			values[i] = new(sql.NullString)
		case msgtype.FieldCreatedAt, msgtype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MsgType fields.
func (mt *MsgType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msgtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mt.ID = int(value.Int64)
		case msgtype.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mt.CreatedBy = int(value.Int64)
			}
		case msgtype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mt.CreatedAt = value.Time
			}
		case msgtype.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mt.UpdatedBy = int(value.Int64)
			}
		case msgtype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mt.UpdatedAt = value.Time
			}
		case msgtype.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				mt.AppID = int(value.Int64)
			}
		case msgtype.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				mt.Category = value.String
			}
		case msgtype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mt.Name = value.String
			}
		case msgtype.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mt.Status = typex.SimpleStatus(value.String)
			}
		case msgtype.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				mt.Comments = value.String
			}
		case msgtype.FieldCanSubs:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_subs", values[i])
			} else if value.Valid {
				mt.CanSubs = value.Bool
			}
		case msgtype.FieldCanCustom:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_custom", values[i])
			} else if value.Valid {
				mt.CanCustom = value.Bool
			}
		default:
			mt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MsgType.
// This includes values selected through modifiers, order, etc.
func (mt *MsgType) Value(name string) (ent.Value, error) {
	return mt.selectValues.Get(name)
}

// QueryEvents queries the "events" edge of the MsgType entity.
func (mt *MsgType) QueryEvents() *MsgEventQuery {
	return NewMsgTypeClient(mt.config).QueryEvents(mt)
}

// QuerySubscribers queries the "subscribers" edge of the MsgType entity.
func (mt *MsgType) QuerySubscribers() *MsgSubscriberQuery {
	return NewMsgTypeClient(mt.config).QuerySubscribers(mt)
}

// Update returns a builder for updating this MsgType.
// Note that you need to call MsgType.Unwrap() before calling this method if this MsgType
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MsgType) Update() *MsgTypeUpdateOne {
	return NewMsgTypeClient(mt.config).UpdateOne(mt)
}

// Unwrap unwraps the MsgType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *MsgType) Unwrap() *MsgType {
	_tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MsgType is not a transactional entity")
	}
	mt.config.driver = _tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MsgType) String() string {
	var builder strings.Builder
	builder.WriteString("MsgType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mt.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mt.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mt.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", mt.AppID))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(mt.Category)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mt.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mt.Status))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(mt.Comments)
	builder.WriteString(", ")
	builder.WriteString("can_subs=")
	builder.WriteString(fmt.Sprintf("%v", mt.CanSubs))
	builder.WriteString(", ")
	builder.WriteString("can_custom=")
	builder.WriteString(fmt.Sprintf("%v", mt.CanCustom))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (mt *MsgType) NamedEvents(name string) ([]*MsgEvent, error) {
	if mt.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := mt.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (mt *MsgType) appendNamedEvents(name string, edges ...*MsgEvent) {
	if mt.Edges.namedEvents == nil {
		mt.Edges.namedEvents = make(map[string][]*MsgEvent)
	}
	if len(edges) == 0 {
		mt.Edges.namedEvents[name] = []*MsgEvent{}
	} else {
		mt.Edges.namedEvents[name] = append(mt.Edges.namedEvents[name], edges...)
	}
}

// NamedSubscribers returns the Subscribers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (mt *MsgType) NamedSubscribers(name string) ([]*MsgSubscriber, error) {
	if mt.Edges.namedSubscribers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := mt.Edges.namedSubscribers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (mt *MsgType) appendNamedSubscribers(name string, edges ...*MsgSubscriber) {
	if mt.Edges.namedSubscribers == nil {
		mt.Edges.namedSubscribers = make(map[string][]*MsgSubscriber)
	}
	if len(edges) == 0 {
		mt.Edges.namedSubscribers[name] = []*MsgSubscriber{}
	} else {
		mt.Edges.namedSubscribers[name] = append(mt.Edges.namedSubscribers[name], edges...)
	}
}

// MsgTypes is a parsable slice of MsgType.
type MsgTypes []*MsgType
