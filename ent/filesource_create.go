// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/msgcenter/ent/fileidentity"
	"github.com/woocoos/msgcenter/ent/filesource"
)

// FileSourceCreate is the builder for creating a FileSource entity.
type FileSourceCreate struct {
	config
	mutation *FileSourceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKind sets the "kind" field.
func (fsc *FileSourceCreate) SetKind(f filesource.Kind) *FileSourceCreate {
	fsc.mutation.SetKind(f)
	return fsc
}

// SetComments sets the "comments" field.
func (fsc *FileSourceCreate) SetComments(s string) *FileSourceCreate {
	fsc.mutation.SetComments(s)
	return fsc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (fsc *FileSourceCreate) SetNillableComments(s *string) *FileSourceCreate {
	if s != nil {
		fsc.SetComments(*s)
	}
	return fsc
}

// SetEndpoint sets the "endpoint" field.
func (fsc *FileSourceCreate) SetEndpoint(s string) *FileSourceCreate {
	fsc.mutation.SetEndpoint(s)
	return fsc
}

// SetEndpointImmutable sets the "endpoint_immutable" field.
func (fsc *FileSourceCreate) SetEndpointImmutable(b bool) *FileSourceCreate {
	fsc.mutation.SetEndpointImmutable(b)
	return fsc
}

// SetNillableEndpointImmutable sets the "endpoint_immutable" field if the given value is not nil.
func (fsc *FileSourceCreate) SetNillableEndpointImmutable(b *bool) *FileSourceCreate {
	if b != nil {
		fsc.SetEndpointImmutable(*b)
	}
	return fsc
}

// SetStsEndpoint sets the "sts_endpoint" field.
func (fsc *FileSourceCreate) SetStsEndpoint(s string) *FileSourceCreate {
	fsc.mutation.SetStsEndpoint(s)
	return fsc
}

// SetRegion sets the "region" field.
func (fsc *FileSourceCreate) SetRegion(s string) *FileSourceCreate {
	fsc.mutation.SetRegion(s)
	return fsc
}

// SetBucket sets the "bucket" field.
func (fsc *FileSourceCreate) SetBucket(s string) *FileSourceCreate {
	fsc.mutation.SetBucket(s)
	return fsc
}

// SetBucketURL sets the "bucket_url" field.
func (fsc *FileSourceCreate) SetBucketURL(s string) *FileSourceCreate {
	fsc.mutation.SetBucketURL(s)
	return fsc
}

// SetID sets the "id" field.
func (fsc *FileSourceCreate) SetID(i int) *FileSourceCreate {
	fsc.mutation.SetID(i)
	return fsc
}

// AddIdentityIDs adds the "identities" edge to the FileIdentity entity by IDs.
func (fsc *FileSourceCreate) AddIdentityIDs(ids ...int) *FileSourceCreate {
	fsc.mutation.AddIdentityIDs(ids...)
	return fsc
}

// AddIdentities adds the "identities" edges to the FileIdentity entity.
func (fsc *FileSourceCreate) AddIdentities(f ...*FileIdentity) *FileSourceCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fsc.AddIdentityIDs(ids...)
}

// Mutation returns the FileSourceMutation object of the builder.
func (fsc *FileSourceCreate) Mutation() *FileSourceMutation {
	return fsc.mutation
}

// Save creates the FileSource in the database.
func (fsc *FileSourceCreate) Save(ctx context.Context) (*FileSource, error) {
	if err := fsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fsc.sqlSave, fsc.mutation, fsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fsc *FileSourceCreate) SaveX(ctx context.Context) *FileSource {
	v, err := fsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsc *FileSourceCreate) Exec(ctx context.Context) error {
	_, err := fsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsc *FileSourceCreate) ExecX(ctx context.Context) {
	if err := fsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsc *FileSourceCreate) defaults() error {
	if _, ok := fsc.mutation.EndpointImmutable(); !ok {
		v := filesource.DefaultEndpointImmutable
		fsc.mutation.SetEndpointImmutable(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fsc *FileSourceCreate) check() error {
	if _, ok := fsc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "FileSource.kind"`)}
	}
	if v, ok := fsc.mutation.Kind(); ok {
		if err := filesource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "FileSource.kind": %w`, err)}
		}
	}
	if _, ok := fsc.mutation.Endpoint(); !ok {
		return &ValidationError{Name: "endpoint", err: errors.New(`ent: missing required field "FileSource.endpoint"`)}
	}
	if v, ok := fsc.mutation.Endpoint(); ok {
		if err := filesource.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "FileSource.endpoint": %w`, err)}
		}
	}
	if _, ok := fsc.mutation.EndpointImmutable(); !ok {
		return &ValidationError{Name: "endpoint_immutable", err: errors.New(`ent: missing required field "FileSource.endpoint_immutable"`)}
	}
	if _, ok := fsc.mutation.StsEndpoint(); !ok {
		return &ValidationError{Name: "sts_endpoint", err: errors.New(`ent: missing required field "FileSource.sts_endpoint"`)}
	}
	if v, ok := fsc.mutation.StsEndpoint(); ok {
		if err := filesource.StsEndpointValidator(v); err != nil {
			return &ValidationError{Name: "sts_endpoint", err: fmt.Errorf(`ent: validator failed for field "FileSource.sts_endpoint": %w`, err)}
		}
	}
	if _, ok := fsc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "FileSource.region"`)}
	}
	if v, ok := fsc.mutation.Region(); ok {
		if err := filesource.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "FileSource.region": %w`, err)}
		}
	}
	if _, ok := fsc.mutation.Bucket(); !ok {
		return &ValidationError{Name: "bucket", err: errors.New(`ent: missing required field "FileSource.bucket"`)}
	}
	if v, ok := fsc.mutation.Bucket(); ok {
		if err := filesource.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "FileSource.bucket": %w`, err)}
		}
	}
	if _, ok := fsc.mutation.BucketURL(); !ok {
		return &ValidationError{Name: "bucket_url", err: errors.New(`ent: missing required field "FileSource.bucket_url"`)}
	}
	if v, ok := fsc.mutation.BucketURL(); ok {
		if err := filesource.BucketURLValidator(v); err != nil {
			return &ValidationError{Name: "bucket_url", err: fmt.Errorf(`ent: validator failed for field "FileSource.bucket_url": %w`, err)}
		}
	}
	return nil
}

func (fsc *FileSourceCreate) sqlSave(ctx context.Context) (*FileSource, error) {
	if err := fsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fsc.mutation.id = &_node.ID
	fsc.mutation.done = true
	return _node, nil
}

func (fsc *FileSourceCreate) createSpec() (*FileSource, *sqlgraph.CreateSpec) {
	var (
		_node = &FileSource{config: fsc.config}
		_spec = sqlgraph.NewCreateSpec(filesource.Table, sqlgraph.NewFieldSpec(filesource.FieldID, field.TypeInt))
	)
	_spec.Schema = fsc.schemaConfig.FileSource
	_spec.OnConflict = fsc.conflict
	if id, ok := fsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fsc.mutation.Kind(); ok {
		_spec.SetField(filesource.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := fsc.mutation.Comments(); ok {
		_spec.SetField(filesource.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := fsc.mutation.Endpoint(); ok {
		_spec.SetField(filesource.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := fsc.mutation.EndpointImmutable(); ok {
		_spec.SetField(filesource.FieldEndpointImmutable, field.TypeBool, value)
		_node.EndpointImmutable = value
	}
	if value, ok := fsc.mutation.StsEndpoint(); ok {
		_spec.SetField(filesource.FieldStsEndpoint, field.TypeString, value)
		_node.StsEndpoint = value
	}
	if value, ok := fsc.mutation.Region(); ok {
		_spec.SetField(filesource.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := fsc.mutation.Bucket(); ok {
		_spec.SetField(filesource.FieldBucket, field.TypeString, value)
		_node.Bucket = value
	}
	if value, ok := fsc.mutation.BucketURL(); ok {
		_spec.SetField(filesource.FieldBucketURL, field.TypeString, value)
		_node.BucketURL = value
	}
	if nodes := fsc.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filesource.IdentitiesTable,
			Columns: []string{filesource.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileidentity.FieldID, field.TypeInt),
			},
		}
		edge.Schema = fsc.schemaConfig.FileIdentity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileSource.Create().
//		SetKind(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileSourceUpsert) {
//			SetKind(v+v).
//		}).
//		Exec(ctx)
func (fsc *FileSourceCreate) OnConflict(opts ...sql.ConflictOption) *FileSourceUpsertOne {
	fsc.conflict = opts
	return &FileSourceUpsertOne{
		create: fsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileSource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fsc *FileSourceCreate) OnConflictColumns(columns ...string) *FileSourceUpsertOne {
	fsc.conflict = append(fsc.conflict, sql.ConflictColumns(columns...))
	return &FileSourceUpsertOne{
		create: fsc,
	}
}

type (
	// FileSourceUpsertOne is the builder for "upsert"-ing
	//  one FileSource node.
	FileSourceUpsertOne struct {
		create *FileSourceCreate
	}

	// FileSourceUpsert is the "OnConflict" setter.
	FileSourceUpsert struct {
		*sql.UpdateSet
	}
)

// SetKind sets the "kind" field.
func (u *FileSourceUpsert) SetKind(v filesource.Kind) *FileSourceUpsert {
	u.Set(filesource.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *FileSourceUpsert) UpdateKind() *FileSourceUpsert {
	u.SetExcluded(filesource.FieldKind)
	return u
}

// SetComments sets the "comments" field.
func (u *FileSourceUpsert) SetComments(v string) *FileSourceUpsert {
	u.Set(filesource.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *FileSourceUpsert) UpdateComments() *FileSourceUpsert {
	u.SetExcluded(filesource.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *FileSourceUpsert) ClearComments() *FileSourceUpsert {
	u.SetNull(filesource.FieldComments)
	return u
}

// SetEndpoint sets the "endpoint" field.
func (u *FileSourceUpsert) SetEndpoint(v string) *FileSourceUpsert {
	u.Set(filesource.FieldEndpoint, v)
	return u
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *FileSourceUpsert) UpdateEndpoint() *FileSourceUpsert {
	u.SetExcluded(filesource.FieldEndpoint)
	return u
}

// SetEndpointImmutable sets the "endpoint_immutable" field.
func (u *FileSourceUpsert) SetEndpointImmutable(v bool) *FileSourceUpsert {
	u.Set(filesource.FieldEndpointImmutable, v)
	return u
}

// UpdateEndpointImmutable sets the "endpoint_immutable" field to the value that was provided on create.
func (u *FileSourceUpsert) UpdateEndpointImmutable() *FileSourceUpsert {
	u.SetExcluded(filesource.FieldEndpointImmutable)
	return u
}

// SetStsEndpoint sets the "sts_endpoint" field.
func (u *FileSourceUpsert) SetStsEndpoint(v string) *FileSourceUpsert {
	u.Set(filesource.FieldStsEndpoint, v)
	return u
}

// UpdateStsEndpoint sets the "sts_endpoint" field to the value that was provided on create.
func (u *FileSourceUpsert) UpdateStsEndpoint() *FileSourceUpsert {
	u.SetExcluded(filesource.FieldStsEndpoint)
	return u
}

// SetRegion sets the "region" field.
func (u *FileSourceUpsert) SetRegion(v string) *FileSourceUpsert {
	u.Set(filesource.FieldRegion, v)
	return u
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *FileSourceUpsert) UpdateRegion() *FileSourceUpsert {
	u.SetExcluded(filesource.FieldRegion)
	return u
}

// SetBucket sets the "bucket" field.
func (u *FileSourceUpsert) SetBucket(v string) *FileSourceUpsert {
	u.Set(filesource.FieldBucket, v)
	return u
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *FileSourceUpsert) UpdateBucket() *FileSourceUpsert {
	u.SetExcluded(filesource.FieldBucket)
	return u
}

// SetBucketURL sets the "bucket_url" field.
func (u *FileSourceUpsert) SetBucketURL(v string) *FileSourceUpsert {
	u.Set(filesource.FieldBucketURL, v)
	return u
}

// UpdateBucketURL sets the "bucket_url" field to the value that was provided on create.
func (u *FileSourceUpsert) UpdateBucketURL() *FileSourceUpsert {
	u.SetExcluded(filesource.FieldBucketURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FileSource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(filesource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileSourceUpsertOne) UpdateNewValues() *FileSourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(filesource.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileSource.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FileSourceUpsertOne) Ignore() *FileSourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileSourceUpsertOne) DoNothing() *FileSourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileSourceCreate.OnConflict
// documentation for more info.
func (u *FileSourceUpsertOne) Update(set func(*FileSourceUpsert)) *FileSourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileSourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetKind sets the "kind" field.
func (u *FileSourceUpsertOne) SetKind(v filesource.Kind) *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *FileSourceUpsertOne) UpdateKind() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateKind()
	})
}

// SetComments sets the "comments" field.
func (u *FileSourceUpsertOne) SetComments(v string) *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *FileSourceUpsertOne) UpdateComments() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *FileSourceUpsertOne) ClearComments() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.ClearComments()
	})
}

// SetEndpoint sets the "endpoint" field.
func (u *FileSourceUpsertOne) SetEndpoint(v string) *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *FileSourceUpsertOne) UpdateEndpoint() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateEndpoint()
	})
}

// SetEndpointImmutable sets the "endpoint_immutable" field.
func (u *FileSourceUpsertOne) SetEndpointImmutable(v bool) *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetEndpointImmutable(v)
	})
}

// UpdateEndpointImmutable sets the "endpoint_immutable" field to the value that was provided on create.
func (u *FileSourceUpsertOne) UpdateEndpointImmutable() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateEndpointImmutable()
	})
}

// SetStsEndpoint sets the "sts_endpoint" field.
func (u *FileSourceUpsertOne) SetStsEndpoint(v string) *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetStsEndpoint(v)
	})
}

// UpdateStsEndpoint sets the "sts_endpoint" field to the value that was provided on create.
func (u *FileSourceUpsertOne) UpdateStsEndpoint() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateStsEndpoint()
	})
}

// SetRegion sets the "region" field.
func (u *FileSourceUpsertOne) SetRegion(v string) *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *FileSourceUpsertOne) UpdateRegion() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateRegion()
	})
}

// SetBucket sets the "bucket" field.
func (u *FileSourceUpsertOne) SetBucket(v string) *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetBucket(v)
	})
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *FileSourceUpsertOne) UpdateBucket() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateBucket()
	})
}

// SetBucketURL sets the "bucket_url" field.
func (u *FileSourceUpsertOne) SetBucketURL(v string) *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetBucketURL(v)
	})
}

// UpdateBucketURL sets the "bucket_url" field to the value that was provided on create.
func (u *FileSourceUpsertOne) UpdateBucketURL() *FileSourceUpsertOne {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateBucketURL()
	})
}

// Exec executes the query.
func (u *FileSourceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileSourceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileSourceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FileSourceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FileSourceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FileSourceCreateBulk is the builder for creating many FileSource entities in bulk.
type FileSourceCreateBulk struct {
	config
	err      error
	builders []*FileSourceCreate
	conflict []sql.ConflictOption
}

// Save creates the FileSource entities in the database.
func (fscb *FileSourceCreateBulk) Save(ctx context.Context) ([]*FileSource, error) {
	if fscb.err != nil {
		return nil, fscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fscb.builders))
	nodes := make([]*FileSource, len(fscb.builders))
	mutators := make([]Mutator, len(fscb.builders))
	for i := range fscb.builders {
		func(i int, root context.Context) {
			builder := fscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileSourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fscb *FileSourceCreateBulk) SaveX(ctx context.Context) []*FileSource {
	v, err := fscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fscb *FileSourceCreateBulk) Exec(ctx context.Context) error {
	_, err := fscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fscb *FileSourceCreateBulk) ExecX(ctx context.Context) {
	if err := fscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileSource.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileSourceUpsert) {
//			SetKind(v+v).
//		}).
//		Exec(ctx)
func (fscb *FileSourceCreateBulk) OnConflict(opts ...sql.ConflictOption) *FileSourceUpsertBulk {
	fscb.conflict = opts
	return &FileSourceUpsertBulk{
		create: fscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileSource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fscb *FileSourceCreateBulk) OnConflictColumns(columns ...string) *FileSourceUpsertBulk {
	fscb.conflict = append(fscb.conflict, sql.ConflictColumns(columns...))
	return &FileSourceUpsertBulk{
		create: fscb,
	}
}

// FileSourceUpsertBulk is the builder for "upsert"-ing
// a bulk of FileSource nodes.
type FileSourceUpsertBulk struct {
	create *FileSourceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FileSource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(filesource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileSourceUpsertBulk) UpdateNewValues() *FileSourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(filesource.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileSource.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FileSourceUpsertBulk) Ignore() *FileSourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileSourceUpsertBulk) DoNothing() *FileSourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileSourceCreateBulk.OnConflict
// documentation for more info.
func (u *FileSourceUpsertBulk) Update(set func(*FileSourceUpsert)) *FileSourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileSourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetKind sets the "kind" field.
func (u *FileSourceUpsertBulk) SetKind(v filesource.Kind) *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *FileSourceUpsertBulk) UpdateKind() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateKind()
	})
}

// SetComments sets the "comments" field.
func (u *FileSourceUpsertBulk) SetComments(v string) *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *FileSourceUpsertBulk) UpdateComments() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *FileSourceUpsertBulk) ClearComments() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.ClearComments()
	})
}

// SetEndpoint sets the "endpoint" field.
func (u *FileSourceUpsertBulk) SetEndpoint(v string) *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *FileSourceUpsertBulk) UpdateEndpoint() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateEndpoint()
	})
}

// SetEndpointImmutable sets the "endpoint_immutable" field.
func (u *FileSourceUpsertBulk) SetEndpointImmutable(v bool) *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetEndpointImmutable(v)
	})
}

// UpdateEndpointImmutable sets the "endpoint_immutable" field to the value that was provided on create.
func (u *FileSourceUpsertBulk) UpdateEndpointImmutable() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateEndpointImmutable()
	})
}

// SetStsEndpoint sets the "sts_endpoint" field.
func (u *FileSourceUpsertBulk) SetStsEndpoint(v string) *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetStsEndpoint(v)
	})
}

// UpdateStsEndpoint sets the "sts_endpoint" field to the value that was provided on create.
func (u *FileSourceUpsertBulk) UpdateStsEndpoint() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateStsEndpoint()
	})
}

// SetRegion sets the "region" field.
func (u *FileSourceUpsertBulk) SetRegion(v string) *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *FileSourceUpsertBulk) UpdateRegion() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateRegion()
	})
}

// SetBucket sets the "bucket" field.
func (u *FileSourceUpsertBulk) SetBucket(v string) *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetBucket(v)
	})
}

// UpdateBucket sets the "bucket" field to the value that was provided on create.
func (u *FileSourceUpsertBulk) UpdateBucket() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateBucket()
	})
}

// SetBucketURL sets the "bucket_url" field.
func (u *FileSourceUpsertBulk) SetBucketURL(v string) *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.SetBucketURL(v)
	})
}

// UpdateBucketURL sets the "bucket_url" field to the value that was provided on create.
func (u *FileSourceUpsertBulk) UpdateBucketURL() *FileSourceUpsertBulk {
	return u.Update(func(s *FileSourceUpsert) {
		s.UpdateBucketURL()
	})
}

// Exec executes the query.
func (u *FileSourceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FileSourceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileSourceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileSourceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
