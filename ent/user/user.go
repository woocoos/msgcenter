// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrincipalName holds the string denoting the principal_name field in the database.
	FieldPrincipalName = "principal_name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// EdgeSilences holds the string denoting the silences edge name in mutations.
	EdgeSilences = "silences"
	// Table holds the table name of the user in the database.
	Table = "user"
	// SilencesTable is the table that holds the silences relation/edge.
	SilencesTable = "msg_silence"
	// SilencesInverseTable is the table name for the Silence entity.
	// It exists in this package in order to avoid circular dependency with the "silence" package.
	SilencesInverseTable = "msg_silence"
	// SilencesColumn is the table column denoting the silences relation/edge.
	SilencesColumn = "created_by"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldPrincipalName,
	FieldDisplayName,
	FieldEmail,
	FieldMobile,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/msgcenter/ent/runtime"
var (
	Hooks [1]ent.Hook
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// MobileValidator is a validator for the "mobile" field. It is called by the builders before save.
	MobileValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrincipalName orders the results by the principal_name field.
func ByPrincipalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrincipalName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// BySilencesCount orders the results by silences count.
func BySilencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSilencesStep(), opts...)
	}
}

// BySilences orders the results by silences terms.
func BySilences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSilencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSilencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SilencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SilencesTable, SilencesColumn),
	)
}
