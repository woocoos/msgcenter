scalar Duration
scalar LabelName
scalar MapString
scalar HostPort

enum MatchType {
    MatchEqual
    MatchNotEqual
    MatchRegexp
    MatchNotRegexp
}

type Route {
    receiver: String
    groupBy: [LabelName]
    matchers: [Matcher]
    muteTimeIntervals: [String!]
    activeTimeIntervals: [String!]
    continue: Boolean
    routes: [Route]
    groupWait: Duration
    GroupInterval: Duration
    repeatInterval: Duration
}

type Matcher {
    type: MatchType!
    name: String!
    value: String!
}

type Receiver {
    name: String!
    emailConfigs: [EmailConfig]
}

type EmailConfig {
    to: String!
    from: String
    smartHost: HostPort!
    authType: String!
    authUsername: String!
    authPassword: String!
    authSecret: String!
    authIdentity: String!
    headers: MapString
}

extend type MsgType {
    # 订阅的用户
    subscriberUsers:[MsgSubscriber!]!
    # 订阅的用户组
    subscriberRoles:[MsgSubscriber!]!
    # 排除的用户
    excludeSubscriberUsers:[MsgSubscriber!]!
}

extend type Query {
    # 消息通道列表
    msgChannels(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: MsgChannelOrder
        where: MsgChannelWhereInput
    ): MsgChannelConnection!

    # 消息类型列表
    msgTypes(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: MsgTypeOrder
        where: MsgTypeWhereInput
    ): MsgTypeConnection!

    # 消息类型分类
    msgTypeCategories(keyword:String,appID:ID): [String!]!

    # 消息事件列表
    msgEvents(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: MsgEventOrder
        where: MsgEventWhereInput
    ): MsgEventConnection!

    # 消息模板列表
    msgTemplates(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: MsgTemplateOrder
        where: MsgTemplateWhereInput
    ): MsgTemplateConnection!

    # 消息配置
    msgConfig:String!
}