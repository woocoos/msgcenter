schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
CreateMsgChannelInput is used for create MsgChannel object.
Input was generated by ent.
"""
input CreateMsgChannelInput {
  """备注"""
  comments: String
  """消息通道名称"""
  name: String!
  """通道配置Json格式"""
  receiver: ReceiverInput
  """支持的消息模式:站内信,app推送,邮件,短信,微信等"""
  receiverType: MsgChannelReceiverType!
  """组织ID"""
  tenantID: ID!
}

"""
CreateMsgEventInput is used for create MsgEvent object.
Input was generated by ent.
"""
input CreateMsgEventInput {
  """备注"""
  comments: String
  """根据route配置对应的以,分隔的mode列表"""
  modes: String!
  msgTypeID: ID!
  """消息事件名称,应用内唯一"""
  name: String!
  """消息路由配置"""
  route: RouteInput
}

"""
CreateMsgSubscriberInput is used for create MsgSubscriber object.
Input was generated by ent.
"""
input CreateMsgSubscriberInput {
  """是否排除"""
  exclude: Boolean
  msgTypeID: ID!
  """用户组ID"""
  orgRoleID: ID
  """组织ID"""
  tenantID: ID!
  userID: ID
}

"""
CreateMsgTemplateInput is used for create MsgTemplate object.
Input was generated by ent.
"""
input CreateMsgTemplateInput {
  """附件地址。key：/msg/att/1/xxx"""
  attachments: [String!]
  """附件ids"""
  attachmentsFileIds: [ID!]
  """密送"""
  bcc: String
  """消息体"""
  body: String
  """抄送"""
  cc: String
  """备注"""
  comments: String
  eventID: ID!
  """消息类型:文本,网页,需要结合mod确定支持的格式"""
  format: MsgTemplateFormat!
  """发件人"""
  from: String
  """应用消息类型ID"""
  msgTypeID: Int!
  """消息模板名称"""
  name: String!
  """消息模式:站内信,app推送,邮件,短信,微信等"""
  receiverType: MsgTemplateReceiverType!
  """标题"""
  subject: String
  """组织ID"""
  tenantID: ID!
  """收件人"""
  to: String
  """模板地址。key：/msg/tpl/temp/1/xxx"""
  tpl: String
  """模板地址"""
  tplFileID: ID
}

"""
CreateMsgTypeInput is used for create MsgType object.
Input was generated by ent.
"""
input CreateMsgTypeInput {
  """应用ID"""
  appID: ID
  """是否可定制"""
  canCustom: Boolean
  """是否可订阅"""
  canSubs: Boolean
  """消息类型分类"""
  category: String!
  """备注"""
  comments: String
  """消息类型名称,应用内唯一"""
  name: String!
  """状态"""
  status: MsgTypeSimpleStatus
}

"""
CreateSilenceInput is used for create Silence object.
Input was generated by ent.
"""
input CreateSilenceInput {
  """备注"""
  comments: String
  """结束时间"""
  endsAt: Time!
  """应用ID"""
  matchers: [MatcherInput]
  """开始时间"""
  startsAt: Time!
  """状态"""
  state: SilenceSilenceState
  tenantID: Int!
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

""" time duration: RFCXXX duration string, e.g. 1h30m """
scalar Duration

type EmailConfig {
  authIdentity: String!
  authPassword: String!
  authSecret: String!
  authType: String!
  authUsername: String!
  from: String
  headers: MapString
  smartHost: HostPort!
  to: String!
}

input EmailConfigInput {
  authIdentity: String
  authPassword: String
  authSecret: String
  authType: String!
  authUsername: String
  from: String
  headers: MapString
  smartHost: HostPort!
  to: String!
}

"""An object with a Global ID,for using in Noder interface."""
scalar GID

""" host:port """
scalar HostPort

""" utf8 string """
scalar LabelName

""" map[string]string JSON Raw """
scalar MapString

enum MatchType {
  """ = """
  MatchEqual
  """ != """
  MatchNotEqual
  """ !~ """
  MatchNotRegexp
  """ =~ """
  MatchRegexp
}

type Matcher {
  name: String!
  type: MatchType!
  value: String!
}

input MatcherInput {
  name: String!
  type: MatchType!
  value: String!
}

"""SubscriptionAction is a generic type for all subscription actions"""
type Message {
  action: String!
  key: String!
  payload: String!
  sendAt: String!
  topic: String!
}

"""MessageFilter is a generic type for all subscription filters"""
type MessageFilter {
  appCode: String!
  deviceId: String!
  tenantId: ID!
  userId: ID!
}

type MsgAlert implements Node {
  """注解"""
  annotations: MapString
  createdAt: Time!
  """是否移除"""
  deleted: Boolean!
  """结束时间"""
  endsAt: Time
  """指纹hash值"""
  fingerprint: String!
  id: ID!
  """标签"""
  labels: MapString
  nlog(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Nlogs returned from the connection."""
    orderBy: NlogOrder
    """Filtering options for Nlogs returned from the connection."""
    where: NlogWhereInput
  ): NlogConnection!
  nlogAlerts: [NlogAlert!]
  """开始时间"""
  startsAt: Time!
  """通知状态,firing: 触发通知,resolved: 已处理过"""
  state: MsgAlertAlertStatus!
  tenantID: Int!
  """状态"""
  timeout: Boolean!
  updatedAt: Time
  """generatorURL"""
  url: String
}

"""MsgAlertAlertStatus is enum for the field state"""
enum MsgAlertAlertStatus @goModel(model: "github.com/woocoos/msgcenter/pkg/alert.AlertStatus") {
  firing
  none
  resolved
}

"""A connection to a list of items."""
type MsgAlertConnection {
  """A list of edges."""
  edges: [MsgAlertEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MsgAlertEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: MsgAlert
}

"""Ordering options for MsgAlert connections"""
input MsgAlertOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MsgAlerts."""
  field: MsgAlertOrderField!
}

"""Properties by which MsgAlert connections can be ordered."""
enum MsgAlertOrderField {
  createdAt
}

"""
MsgAlertWhereInput is used for filtering MsgAlert objects.
Input was generated by ent.
"""
input MsgAlertWhereInput {
  and: [MsgAlertWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted field predicates"""
  deleted: Boolean
  deletedNEQ: Boolean
  """ends_at field predicates"""
  endsAt: Time
  endsAtGT: Time
  endsAtGTE: Time
  endsAtIn: [Time!]
  endsAtIsNil: Boolean
  endsAtLT: Time
  endsAtLTE: Time
  endsAtNEQ: Time
  endsAtNotIn: [Time!]
  endsAtNotNil: Boolean
  """fingerprint field predicates"""
  fingerprint: String
  fingerprintContains: String
  fingerprintContainsFold: String
  fingerprintEqualFold: String
  fingerprintGT: String
  fingerprintGTE: String
  fingerprintHasPrefix: String
  fingerprintHasSuffix: String
  fingerprintIn: [String!]
  fingerprintLT: String
  fingerprintLTE: String
  fingerprintNEQ: String
  fingerprintNotIn: [String!]
  """nlog edge predicates"""
  hasNlog: Boolean
  """nlog_alerts edge predicates"""
  hasNlogAlerts: Boolean
  hasNlogAlertsWith: [NlogAlertWhereInput!]
  hasNlogWith: [NlogWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: MsgAlertWhereInput
  or: [MsgAlertWhereInput!]
  """starts_at field predicates"""
  startsAt: Time
  startsAtGT: Time
  startsAtGTE: Time
  startsAtIn: [Time!]
  startsAtLT: Time
  startsAtLTE: Time
  startsAtNEQ: Time
  startsAtNotIn: [Time!]
  """state field predicates"""
  state: MsgAlertAlertStatus
  stateIn: [MsgAlertAlertStatus!]
  stateNEQ: MsgAlertAlertStatus
  stateNotIn: [MsgAlertAlertStatus!]
  """tenant_id field predicates"""
  tenantID: Int
  tenantIDGT: Int
  tenantIDGTE: Int
  tenantIDIn: [Int!]
  tenantIDLT: Int
  tenantIDLTE: Int
  tenantIDNEQ: Int
  tenantIDNotIn: [Int!]
  """timeout field predicates"""
  timeout: Boolean
  timeoutNEQ: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """url field predicates"""
  url: String
  urlContains: String
  urlContainsFold: String
  urlEqualFold: String
  urlGT: String
  urlGTE: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIn: [String!]
  urlIsNil: Boolean
  urlLT: String
  urlLTE: String
  urlNEQ: String
  urlNotIn: [String!]
  urlNotNil: Boolean
}

type MsgChannel implements Node {
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """消息通道名称"""
  name: String!
  """通道配置Json格式"""
  receiver: Receiver
  """支持的消息模式:站内信,app推送,邮件,短信,微信等"""
  receiverType: MsgChannelReceiverType!
  """状态"""
  status: MsgChannelSimpleStatus
  """组织ID"""
  tenantID: ID!
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type MsgChannelConnection {
  """A list of edges."""
  edges: [MsgChannelEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MsgChannelEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: MsgChannel
}

"""Ordering options for MsgChannel connections"""
input MsgChannelOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MsgChannels."""
  field: MsgChannelOrderField!
}

"""Properties by which MsgChannel connections can be ordered."""
enum MsgChannelOrderField {
  createdAt
}

"""MsgChannelReceiverType is enum for the field receiver_type"""
enum MsgChannelReceiverType @goModel(model: "github.com/woocoos/msgcenter/pkg/profile.ReceiverType") {
  email
  message
  webhook
}

"""MsgChannelSimpleStatus is enum for the field status"""
enum MsgChannelSimpleStatus @goModel(model: "github.com/woocoos/entco/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
}

"""
MsgChannelWhereInput is used for filtering MsgChannel objects.
Input was generated by ent.
"""
input MsgChannelWhereInput {
  and: [MsgChannelWhereInput!]
  """comments field predicates"""
  comments: String
  commentsContains: String
  commentsContainsFold: String
  commentsEqualFold: String
  commentsGT: String
  commentsGTE: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIn: [String!]
  commentsIsNil: Boolean
  commentsLT: String
  commentsLTE: String
  commentsNEQ: String
  commentsNotIn: [String!]
  commentsNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: MsgChannelWhereInput
  or: [MsgChannelWhereInput!]
  """receiver_type field predicates"""
  receiverType: MsgChannelReceiverType
  receiverTypeIn: [MsgChannelReceiverType!]
  receiverTypeNEQ: MsgChannelReceiverType
  receiverTypeNotIn: [MsgChannelReceiverType!]
  """status field predicates"""
  status: MsgChannelSimpleStatus
  statusIn: [MsgChannelSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: MsgChannelSimpleStatus
  statusNotIn: [MsgChannelSimpleStatus!]
  statusNotNil: Boolean
  """tenant_id field predicates"""
  tenantID: ID
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDIn: [ID!]
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDNEQ: ID
  tenantIDNotIn: [ID!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type MsgEvent implements Node {
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  """自定义的消息模板"""
  customerTemplate: [MsgTemplate!]
  id: ID!
  """根据route配置对应的以,分隔的mode列表"""
  modes: String!
  """消息类型"""
  msgType: MsgType!
  """消息类型ID"""
  msgTypeID: ID!
  """消息事件名称,应用内唯一"""
  name: String!
  """消息路由配置"""
  route: Route
  routeStr(type: RouteStrType!): String!
  """状态"""
  status: MsgEventSimpleStatus
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type MsgEventConnection {
  """A list of edges."""
  edges: [MsgEventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MsgEventEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: MsgEvent
}

"""Ordering options for MsgEvent connections"""
input MsgEventOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MsgEvents."""
  field: MsgEventOrderField!
}

"""Properties by which MsgEvent connections can be ordered."""
enum MsgEventOrderField {
  createdAt
}

"""MsgEventSimpleStatus is enum for the field status"""
enum MsgEventSimpleStatus @goModel(model: "github.com/woocoos/entco/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
}

"""
MsgEventWhereInput is used for filtering MsgEvent objects.
Input was generated by ent.
"""
input MsgEventWhereInput {
  and: [MsgEventWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """customer_template edge predicates"""
  hasCustomerTemplate: Boolean
  hasCustomerTemplateWith: [MsgTemplateWhereInput!]
  """msg_type edge predicates"""
  hasMsgType: Boolean
  hasMsgTypeWith: [MsgTypeWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """modes field predicates"""
  modes: String
  modesContains: String
  modesContainsFold: String
  modesEqualFold: String
  modesGT: String
  modesGTE: String
  modesHasPrefix: String
  modesHasSuffix: String
  modesIn: [String!]
  modesLT: String
  modesLTE: String
  modesNEQ: String
  modesNotIn: [String!]
  """msg_type_id field predicates"""
  msgTypeID: ID
  msgTypeIDIn: [ID!]
  msgTypeIDNEQ: ID
  msgTypeIDNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: MsgEventWhereInput
  or: [MsgEventWhereInput!]
  """status field predicates"""
  status: MsgEventSimpleStatus
  statusIn: [MsgEventSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: MsgEventSimpleStatus
  statusNotIn: [MsgEventSimpleStatus!]
  statusNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type MsgInternal implements Node {
  """消息体"""
  body: String
  createdAt: Time!
  createdBy: Int!
  """内容类型: html,txt"""
  format: String!
  id: ID!
  msgInternalTo: [MsgInternalTo!]
  """消息跳转"""
  redirect: String
  """标题"""
  subject: String!
  tenantID: Int!
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type MsgInternalConnection {
  """A list of edges."""
  edges: [MsgInternalEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MsgInternalEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: MsgInternal
}

"""Ordering options for MsgInternal connections"""
input MsgInternalOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MsgInternals."""
  field: MsgInternalOrderField!
}

"""Properties by which MsgInternal connections can be ordered."""
enum MsgInternalOrderField {
  createdAt
}

type MsgInternalTo implements Node {
  createdAt: Time!
  """删除时间"""
  deleteAt: Time
  id: ID!
  msgInternal: MsgInternal!
  """站内信ID"""
  msgInternalID: ID!
  """阅读时间"""
  readAt: Time
  tenantID: Int!
  user: User!
  """用户ID"""
  userID: ID!
}

"""A connection to a list of items."""
type MsgInternalToConnection {
  """A list of edges."""
  edges: [MsgInternalToEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MsgInternalToEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: MsgInternalTo
}

"""
MsgInternalToWhereInput is used for filtering MsgInternalTo objects.
Input was generated by ent.
"""
input MsgInternalToWhereInput {
  and: [MsgInternalToWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """delete_at field predicates"""
  deleteAt: Time
  deleteAtGT: Time
  deleteAtGTE: Time
  deleteAtIn: [Time!]
  deleteAtIsNil: Boolean
  deleteAtLT: Time
  deleteAtLTE: Time
  deleteAtNEQ: Time
  deleteAtNotIn: [Time!]
  deleteAtNotNil: Boolean
  """msg_internal edge predicates"""
  hasMsgInternal: Boolean
  hasMsgInternalWith: [MsgInternalWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """msg_internal_id field predicates"""
  msgInternalID: ID
  msgInternalIDIn: [ID!]
  msgInternalIDNEQ: ID
  msgInternalIDNotIn: [ID!]
  not: MsgInternalToWhereInput
  or: [MsgInternalToWhereInput!]
  """read_at field predicates"""
  readAt: Time
  readAtGT: Time
  readAtGTE: Time
  readAtIn: [Time!]
  readAtIsNil: Boolean
  readAtLT: Time
  readAtLTE: Time
  readAtNEQ: Time
  readAtNotIn: [Time!]
  readAtNotNil: Boolean
  """tenant_id field predicates"""
  tenantID: Int
  tenantIDGT: Int
  tenantIDGTE: Int
  tenantIDIn: [Int!]
  tenantIDLT: Int
  tenantIDLTE: Int
  tenantIDNEQ: Int
  tenantIDNotIn: [Int!]
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDNEQ: ID
  userIDNotIn: [ID!]
}

"""
MsgInternalWhereInput is used for filtering MsgInternal objects.
Input was generated by ent.
"""
input MsgInternalWhereInput {
  and: [MsgInternalWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """format field predicates"""
  format: String
  formatContains: String
  formatContainsFold: String
  formatEqualFold: String
  formatGT: String
  formatGTE: String
  formatHasPrefix: String
  formatHasSuffix: String
  formatIn: [String!]
  formatLT: String
  formatLTE: String
  formatNEQ: String
  formatNotIn: [String!]
  """msg_internal_to edge predicates"""
  hasMsgInternalTo: Boolean
  hasMsgInternalToWith: [MsgInternalToWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: MsgInternalWhereInput
  or: [MsgInternalWhereInput!]
  """redirect field predicates"""
  redirect: String
  redirectContains: String
  redirectContainsFold: String
  redirectEqualFold: String
  redirectGT: String
  redirectGTE: String
  redirectHasPrefix: String
  redirectHasSuffix: String
  redirectIn: [String!]
  redirectIsNil: Boolean
  redirectLT: String
  redirectLTE: String
  redirectNEQ: String
  redirectNotIn: [String!]
  redirectNotNil: Boolean
  """subject field predicates"""
  subject: String
  subjectContains: String
  subjectContainsFold: String
  subjectEqualFold: String
  subjectGT: String
  subjectGTE: String
  subjectHasPrefix: String
  subjectHasSuffix: String
  subjectIn: [String!]
  subjectLT: String
  subjectLTE: String
  subjectNEQ: String
  subjectNotIn: [String!]
  """tenant_id field predicates"""
  tenantID: Int
  tenantIDGT: Int
  tenantIDGTE: Int
  tenantIDIn: [Int!]
  tenantIDLT: Int
  tenantIDLTE: Int
  tenantIDNEQ: Int
  tenantIDNotIn: [Int!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type MsgSubscriber implements Node {
  createdAt: Time!
  createdBy: Int!
  """是否排除"""
  exclude: Boolean
  id: ID!
  msgType: MsgType!
  """应用消息类型ID"""
  msgTypeID: ID!
  """用户组ID"""
  orgRoleID: ID
  """组织ID"""
  tenantID: ID!
  updatedAt: Time
  updatedBy: Int
  user: User
  """用户ID"""
  userID: ID
}

"""Ordering options for MsgSubscriber connections"""
input MsgSubscriberOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MsgSubscribers."""
  field: MsgSubscriberOrderField!
}

"""Properties by which MsgSubscriber connections can be ordered."""
enum MsgSubscriberOrderField {
  createdAt
}

"""
MsgSubscriberWhereInput is used for filtering MsgSubscriber objects.
Input was generated by ent.
"""
input MsgSubscriberWhereInput {
  and: [MsgSubscriberWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """exclude field predicates"""
  exclude: Boolean
  excludeIsNil: Boolean
  excludeNEQ: Boolean
  excludeNotNil: Boolean
  """msg_type edge predicates"""
  hasMsgType: Boolean
  hasMsgTypeWith: [MsgTypeWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """msg_type_id field predicates"""
  msgTypeID: ID
  msgTypeIDIn: [ID!]
  msgTypeIDNEQ: ID
  msgTypeIDNotIn: [ID!]
  not: MsgSubscriberWhereInput
  or: [MsgSubscriberWhereInput!]
  """org_role_id field predicates"""
  orgRoleID: ID
  orgRoleIDGT: ID
  orgRoleIDGTE: ID
  orgRoleIDIn: [ID!]
  orgRoleIDIsNil: Boolean
  orgRoleIDLT: ID
  orgRoleIDLTE: ID
  orgRoleIDNEQ: ID
  orgRoleIDNotIn: [ID!]
  orgRoleIDNotNil: Boolean
  """tenant_id field predicates"""
  tenantID: ID
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDIn: [ID!]
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDNEQ: ID
  tenantIDNotIn: [ID!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

type MsgTemplate implements Node {
  """附件地址。key：/msg/att/1/xxx"""
  attachments: [String!]
  """附件ids"""
  attachmentsFileIds: [ID!]
  """密送"""
  bcc: String
  """消息体"""
  body: String
  """抄送"""
  cc: String
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  event: MsgEvent!
  """消息类型:文本,网页,需要结合mod确定支持的格式"""
  format: MsgTemplateFormat!
  """发件人"""
  from: String
  id: ID!
  """消息事件ID"""
  msgEventID: ID!
  """应用消息类型ID"""
  msgTypeID: Int!
  """消息模板名称"""
  name: String!
  """消息模式:站内信,app推送,邮件,短信,微信等"""
  receiverType: MsgTemplateReceiverType!
  """状态"""
  status: MsgTemplateSimpleStatus
  """标题"""
  subject: String
  """组织ID"""
  tenantID: ID!
  """收件人"""
  to: String
  """模板地址。key：/msg/tpl/temp/1/xxx"""
  tpl: String
  """模板地址"""
  tplFileID: ID
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type MsgTemplateConnection {
  """A list of edges."""
  edges: [MsgTemplateEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MsgTemplateEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: MsgTemplate
}

"""MsgTemplateFormat is enum for the field format"""
enum MsgTemplateFormat @goModel(model: "github.com/woocoos/msgcenter/ent/msgtemplate.Format") {
  html
  txt
}

"""Ordering options for MsgTemplate connections"""
input MsgTemplateOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MsgTemplates."""
  field: MsgTemplateOrderField!
}

"""Properties by which MsgTemplate connections can be ordered."""
enum MsgTemplateOrderField {
  createdAt
}

"""MsgTemplateReceiverType is enum for the field receiver_type"""
enum MsgTemplateReceiverType @goModel(model: "github.com/woocoos/msgcenter/pkg/profile.ReceiverType") {
  email
  message
  webhook
}

"""MsgTemplateSimpleStatus is enum for the field status"""
enum MsgTemplateSimpleStatus @goModel(model: "github.com/woocoos/entco/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
}

"""
MsgTemplateWhereInput is used for filtering MsgTemplate objects.
Input was generated by ent.
"""
input MsgTemplateWhereInput {
  and: [MsgTemplateWhereInput!]
  """bcc field predicates"""
  bcc: String
  bccContains: String
  bccContainsFold: String
  bccEqualFold: String
  bccGT: String
  bccGTE: String
  bccHasPrefix: String
  bccHasSuffix: String
  bccIn: [String!]
  bccIsNil: Boolean
  bccLT: String
  bccLTE: String
  bccNEQ: String
  bccNotIn: [String!]
  bccNotNil: Boolean
  """cc field predicates"""
  cc: String
  ccContains: String
  ccContainsFold: String
  ccEqualFold: String
  ccGT: String
  ccGTE: String
  ccHasPrefix: String
  ccHasSuffix: String
  ccIn: [String!]
  ccIsNil: Boolean
  ccLT: String
  ccLTE: String
  ccNEQ: String
  ccNotIn: [String!]
  ccNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """format field predicates"""
  format: MsgTemplateFormat
  formatIn: [MsgTemplateFormat!]
  formatNEQ: MsgTemplateFormat
  formatNotIn: [MsgTemplateFormat!]
  """from field predicates"""
  from: String
  fromContains: String
  fromContainsFold: String
  fromEqualFold: String
  fromGT: String
  fromGTE: String
  fromHasPrefix: String
  fromHasSuffix: String
  fromIn: [String!]
  fromIsNil: Boolean
  fromLT: String
  fromLTE: String
  fromNEQ: String
  fromNotIn: [String!]
  fromNotNil: Boolean
  """event edge predicates"""
  hasEvent: Boolean
  hasEventWith: [MsgEventWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """msg_event_id field predicates"""
  msgEventID: ID
  msgEventIDIn: [ID!]
  msgEventIDNEQ: ID
  msgEventIDNotIn: [ID!]
  """msg_type_id field predicates"""
  msgTypeID: Int
  msgTypeIDGT: Int
  msgTypeIDGTE: Int
  msgTypeIDIn: [Int!]
  msgTypeIDLT: Int
  msgTypeIDLTE: Int
  msgTypeIDNEQ: Int
  msgTypeIDNotIn: [Int!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: MsgTemplateWhereInput
  or: [MsgTemplateWhereInput!]
  """receiver_type field predicates"""
  receiverType: MsgTemplateReceiverType
  receiverTypeIn: [MsgTemplateReceiverType!]
  receiverTypeNEQ: MsgTemplateReceiverType
  receiverTypeNotIn: [MsgTemplateReceiverType!]
  """status field predicates"""
  status: MsgTemplateSimpleStatus
  statusIn: [MsgTemplateSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: MsgTemplateSimpleStatus
  statusNotIn: [MsgTemplateSimpleStatus!]
  statusNotNil: Boolean
  """subject field predicates"""
  subject: String
  subjectContains: String
  subjectContainsFold: String
  subjectEqualFold: String
  subjectGT: String
  subjectGTE: String
  subjectHasPrefix: String
  subjectHasSuffix: String
  subjectIn: [String!]
  subjectIsNil: Boolean
  subjectLT: String
  subjectLTE: String
  subjectNEQ: String
  subjectNotIn: [String!]
  subjectNotNil: Boolean
  """tenant_id field predicates"""
  tenantID: ID
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDIn: [ID!]
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDNEQ: ID
  tenantIDNotIn: [ID!]
  """to field predicates"""
  to: String
  toContains: String
  toContainsFold: String
  toEqualFold: String
  toGT: String
  toGTE: String
  toHasPrefix: String
  toHasSuffix: String
  toIn: [String!]
  toIsNil: Boolean
  toLT: String
  toLTE: String
  toNEQ: String
  toNotIn: [String!]
  toNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type MsgType implements Node {
  """应用ID"""
  appID: ID
  """是否可定制"""
  canCustom: Boolean
  """是否可订阅"""
  canSubs: Boolean
  """消息类型分类"""
  category: String!
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  """消息事件"""
  events: [MsgEvent!]
  """ 排除的用户 """
  excludeSubscriberUsers: [MsgSubscriber!]!
  id: ID!
  """消息类型名称,应用内唯一"""
  name: String!
  """状态"""
  status: MsgTypeSimpleStatus
  """ 订阅的用户组 """
  subscriberRoles: [MsgSubscriber!]!
  """ 订阅的用户 """
  subscriberUsers: [MsgSubscriber!]!
  """订阅者"""
  subscribers: [MsgSubscriber!]
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type MsgTypeConnection {
  """A list of edges."""
  edges: [MsgTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MsgTypeEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: MsgType
}

"""Ordering options for MsgType connections"""
input MsgTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order MsgTypes."""
  field: MsgTypeOrderField!
}

"""Properties by which MsgType connections can be ordered."""
enum MsgTypeOrderField {
  createdAt
}

"""MsgTypeSimpleStatus is enum for the field status"""
enum MsgTypeSimpleStatus @goModel(model: "github.com/woocoos/entco/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
}

"""
MsgTypeWhereInput is used for filtering MsgType objects.
Input was generated by ent.
"""
input MsgTypeWhereInput {
  and: [MsgTypeWhereInput!]
  """app_id field predicates"""
  appID: ID
  appIDGT: ID
  appIDGTE: ID
  appIDIn: [ID!]
  appIDIsNil: Boolean
  appIDLT: ID
  appIDLTE: ID
  appIDNEQ: ID
  appIDNotIn: [ID!]
  appIDNotNil: Boolean
  """can_custom field predicates"""
  canCustom: Boolean
  canCustomIsNil: Boolean
  canCustomNEQ: Boolean
  canCustomNotNil: Boolean
  """can_subs field predicates"""
  canSubs: Boolean
  canSubsIsNil: Boolean
  canSubsNEQ: Boolean
  canSubsNotNil: Boolean
  """category field predicates"""
  category: String
  categoryContains: String
  categoryContainsFold: String
  categoryEqualFold: String
  categoryGT: String
  categoryGTE: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIn: [String!]
  categoryLT: String
  categoryLTE: String
  categoryNEQ: String
  categoryNotIn: [String!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [MsgEventWhereInput!]
  """subscribers edge predicates"""
  hasSubscribers: Boolean
  hasSubscribersWith: [MsgSubscriberWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: MsgTypeWhereInput
  or: [MsgTypeWhereInput!]
  """status field predicates"""
  status: MsgTypeSimpleStatus
  statusIn: [MsgTypeSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: MsgTypeSimpleStatus
  statusNotIn: [MsgTypeSimpleStatus!]
  statusNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type Mutation {
  """ 创建消息通道 """
  createMsgChannel(input: CreateMsgChannelInput!): MsgChannel!
  """ 创建消息事件 """
  createMsgEvent(input: CreateMsgEventInput!): MsgEvent!
  """ 消息订阅 """
  createMsgSubscriber(inputs: [CreateMsgSubscriberInput!]!): [MsgSubscriber!]!
  """ 创建消息模板 """
  createMsgTemplate(input: CreateMsgTemplateInput!): MsgTemplate!
  """ 创建消息类型 """
  createMsgType(input: CreateMsgTypeInput!): MsgType!
  """ 创建静默 """
  createSilence(input: CreateSilenceInput!): Silence!
  """ 删除消息通道 """
  deleteMsgChannel(id: ID!): Boolean!
  """ 删除消息事件 """
  deleteMsgEvent(id: ID!): Boolean!
  """ 删除订阅 """
  deleteMsgSubscriber(ids: [ID!]!): Boolean!
  """ 删除消息模板 """
  deleteMsgTemplate(id: ID!): Boolean!
  """ 删除消息类型 """
  deleteMsgType(id: ID!): Boolean!
  """ 删除静默 """
  deleteSilence(id: ID!): Boolean!
  """ 禁用消息通道 """
  disableMsgChannel(id: ID!): MsgChannel!
  """ 禁用消息事件 """
  disableMsgEvent(id: ID!): MsgEvent!
  """ 禁用消息模板 """
  disableMsgTemplate(id: ID!): MsgTemplate!
  """ 启用消息通道 """
  enableMsgChannel(id: ID!): MsgChannel!
  """ 启用消息事件 """
  enableMsgEvent(id: ID!): MsgEvent!
  """ 启用消息模板 """
  enableMsgTemplate(id: ID!): MsgTemplate!
  """ 删除站内信消息 """
  markMessageDeleted(ids: [ID!]!): Boolean!
  """ 设置站内信消息已读未读 """
  markMessageReaOrUnRead(ids: [ID!]!, read: Boolean!): Boolean!
  """ 更新消息通道 """
  updateMsgChannel(id: ID!, input: UpdateMsgChannelInput!): MsgChannel!
  """ 更新消息事件 """
  updateMsgEvent(id: ID!, input: UpdateMsgEventInput!): MsgEvent!
  """ 更新消息模板 """
  updateMsgTemplate(id: ID!, input: UpdateMsgTemplateInput!): MsgTemplate!
  """ 更新消息类型 """
  updateMsgType(id: ID!, input: UpdateMsgTypeInput!): MsgType!
  """ 更新静默 """
  updateSilence(id: ID!, input: UpdateSilenceInput!): Silence!
}

type Nlog implements Node {
  alerts: [MsgAlert!]
  createdAt: Time!
  """过期时间"""
  expiresAt: Time!
  """分组键"""
  groupKey: String!
  id: ID!
  """通道的索引位置"""
  idx: Int!
  nlogAlert: [NlogAlert!]
  """接收组名称"""
  receiver: String!
  """支持的消息模式:站内信,app推送,邮件,短信,微信等"""
  receiverType: NlogReceiverType!
  """发送时间"""
  sendAt: Time!
  tenantID: Int!
  updatedAt: Time
}

type NlogAlert implements Node {
  alert: MsgAlert!
  """alert id"""
  alertID: ID!
  createdAt: Time!
  id: ID!
  nlog: Nlog!
  """nlog id"""
  nlogID: ID!
}

"""Ordering options for NlogAlert connections"""
input NlogAlertOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order NlogAlerts."""
  field: NlogAlertOrderField!
}

"""Properties by which NlogAlert connections can be ordered."""
enum NlogAlertOrderField {
  createdAt
}

"""
NlogAlertWhereInput is used for filtering NlogAlert objects.
Input was generated by ent.
"""
input NlogAlertWhereInput {
  and: [NlogAlertWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: NlogAlertWhereInput
  or: [NlogAlertWhereInput!]
}

"""A connection to a list of items."""
type NlogConnection {
  """A list of edges."""
  edges: [NlogEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type NlogEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Nlog
}

"""Ordering options for Nlog connections"""
input NlogOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Nlogs."""
  field: NlogOrderField!
}

"""Properties by which Nlog connections can be ordered."""
enum NlogOrderField {
  createdAt
}

"""NlogReceiverType is enum for the field receiver_type"""
enum NlogReceiverType @goModel(model: "github.com/woocoos/msgcenter/pkg/profile.ReceiverType") {
  email
  message
  webhook
}

"""
NlogWhereInput is used for filtering Nlog objects.
Input was generated by ent.
"""
input NlogWhereInput {
  and: [NlogWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtIn: [Time!]
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtNEQ: Time
  expiresAtNotIn: [Time!]
  """group_key field predicates"""
  groupKey: String
  groupKeyContains: String
  groupKeyContainsFold: String
  groupKeyEqualFold: String
  groupKeyGT: String
  groupKeyGTE: String
  groupKeyHasPrefix: String
  groupKeyHasSuffix: String
  groupKeyIn: [String!]
  groupKeyLT: String
  groupKeyLTE: String
  groupKeyNEQ: String
  groupKeyNotIn: [String!]
  """alerts edge predicates"""
  hasAlerts: Boolean
  hasAlertsWith: [MsgAlertWhereInput!]
  """nlog_alert edge predicates"""
  hasNlogAlert: Boolean
  hasNlogAlertWith: [NlogAlertWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """idx field predicates"""
  idx: Int
  idxGT: Int
  idxGTE: Int
  idxIn: [Int!]
  idxLT: Int
  idxLTE: Int
  idxNEQ: Int
  idxNotIn: [Int!]
  not: NlogWhereInput
  or: [NlogWhereInput!]
  """receiver field predicates"""
  receiver: String
  receiverContains: String
  receiverContainsFold: String
  receiverEqualFold: String
  receiverGT: String
  receiverGTE: String
  receiverHasPrefix: String
  receiverHasSuffix: String
  receiverIn: [String!]
  receiverLT: String
  receiverLTE: String
  receiverNEQ: String
  receiverNotIn: [String!]
  """receiver_type field predicates"""
  receiverType: NlogReceiverType
  receiverTypeIn: [NlogReceiverType!]
  receiverTypeNEQ: NlogReceiverType
  receiverTypeNotIn: [NlogReceiverType!]
  """send_at field predicates"""
  sendAt: Time
  sendAtGT: Time
  sendAtGTE: Time
  sendAtIn: [Time!]
  sendAtLT: Time
  sendAtLTE: Time
  sendAtNEQ: Time
  sendAtNotIn: [Time!]
  """tenant_id field predicates"""
  tenantID: Int
  tenantIDGT: Int
  tenantIDGTE: Int
  tenantIDIn: [Int!]
  tenantIDLT: Int
  tenantIDLTE: Int
  tenantIDNEQ: Int
  tenantIDNotIn: [Int!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/woocoos/msgcenter/ent.Noder") {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Query {
  """消息列表"""
  msgAlerts(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: MsgAlertOrder, where: MsgAlertWhereInput): MsgAlertConnection
  """ 消息通道列表 """
  msgChannels(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: MsgChannelOrder, where: MsgChannelWhereInput): MsgChannelConnection!
  """ 消息事件列表 """
  msgEvents(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: MsgEventOrder, where: MsgEventWhereInput): MsgEventConnection!
  """站内信查询"""
  msgInternals(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for MsgInternals returned from the connection."""
    orderBy: MsgInternalOrder
    """Filtering options for MsgInternals returned from the connection."""
    where: MsgInternalWhereInput
  ): MsgInternalConnection!
  """ 消息模板列表 """
  msgTemplates(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: MsgTemplateOrder, where: MsgTemplateWhereInput): MsgTemplateConnection!
  """ 消息类型分类 """
  msgTypeCategories(appID: ID, keyword: String): [String!]!
  """ 消息类型列表 """
  msgTypes(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: MsgTypeOrder, where: MsgTypeWhereInput): MsgTypeConnection!
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: GID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [GID!]!
  ): [Node]!
  """ 静默消息 """
  silences(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: SilenceOrder, where: SilenceWhereInput): SilenceConnection!
}

type Receiver {
  emailConfigs: [EmailConfig]
  name: String!
}

input ReceiverInput {
  emailConfigs: [EmailConfigInput]
  name: String!
}

type Route {
  GroupInterval: Duration
  activeTimeIntervals: [String!]
  continue: Boolean
  groupBy: [LabelName]
  groupWait: Duration
  matchers: [Matcher]
  muteTimeIntervals: [String!]
  receiver: String
  repeatInterval: Duration
  routes: [Route]
}

input RouteInput {
  activeTimeIntervals: [String!]
  continue: Boolean
  groupBy: [LabelName]
  groupInterval: Duration
  groupWait: Duration
  matchers: [MatcherInput]
  muteTimeIntervals: [String!]
  receiver: String
  repeatInterval: Duration
  routes: [RouteInput]
}

enum RouteStrType {
  Json
  Yaml
}

type Silence implements Node {
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: ID!
  """结束时间"""
  endsAt: Time!
  id: ID!
  """应用ID"""
  matchers: [Matcher]
  """开始时间"""
  startsAt: Time!
  """状态"""
  state: SilenceSilenceState!
  tenantID: Int!
  updatedAt: Time
  updatedBy: Int
  """创建人"""
  user: User!
}

"""A connection to a list of items."""
type SilenceConnection {
  """A list of edges."""
  edges: [SilenceEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type SilenceEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Silence
}

"""Ordering options for Silence connections"""
input SilenceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Silences."""
  field: SilenceOrderField!
}

"""Properties by which Silence connections can be ordered."""
enum SilenceOrderField {
  createdAt
}

"""SilenceSilenceState is enum for the field state"""
enum SilenceSilenceState @goModel(model: "github.com/woocoos/msgcenter/pkg/alert.SilenceState") {
  active
  expired
  pending
}

"""
SilenceWhereInput is used for filtering Silence objects.
Input was generated by ent.
"""
input SilenceWhereInput {
  and: [SilenceWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: ID
  createdByIn: [ID!]
  createdByNEQ: ID
  createdByNotIn: [ID!]
  """ends_at field predicates"""
  endsAt: Time
  endsAtGT: Time
  endsAtGTE: Time
  endsAtIn: [Time!]
  endsAtLT: Time
  endsAtLTE: Time
  endsAtNEQ: Time
  endsAtNotIn: [Time!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: SilenceWhereInput
  or: [SilenceWhereInput!]
  """starts_at field predicates"""
  startsAt: Time
  startsAtGT: Time
  startsAtGTE: Time
  startsAtIn: [Time!]
  startsAtLT: Time
  startsAtLTE: Time
  startsAtNEQ: Time
  startsAtNotIn: [Time!]
  """state field predicates"""
  state: SilenceSilenceState
  stateIn: [SilenceSilenceState!]
  stateNEQ: SilenceSilenceState
  stateNotIn: [SilenceSilenceState!]
  """tenant_id field predicates"""
  tenantID: Int
  tenantIDGT: Int
  tenantIDGTE: Int
  tenantIDIn: [Int!]
  tenantIDLT: Int
  tenantIDLTE: Int
  tenantIDNEQ: Int
  tenantIDNotIn: [Int!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type Subscription {
  message: Message
}

"""The builtin Time type"""
scalar Time

"""
UpdateMsgChannelInput is used for update MsgChannel object.
Input was generated by ent.
"""
input UpdateMsgChannelInput {
  clearComments: Boolean
  clearReceiver: Boolean
  """备注"""
  comments: String
  """消息通道名称"""
  name: String
  """通道配置Json格式"""
  receiver: ReceiverInput
  """支持的消息模式:站内信,app推送,邮件,短信,微信等"""
  receiverType: MsgChannelReceiverType
  """组织ID"""
  tenantID: ID
}

"""
UpdateMsgEventInput is used for update MsgEvent object.
Input was generated by ent.
"""
input UpdateMsgEventInput {
  clearComments: Boolean
  clearRoute: Boolean
  """备注"""
  comments: String
  """根据route配置对应的以,分隔的mode列表"""
  modes: String
  msgTypeID: ID
  """消息事件名称,应用内唯一"""
  name: String
  """消息路由配置"""
  route: RouteInput
}

"""
UpdateMsgSubscriberInput is used for update MsgSubscriber object.
Input was generated by ent.
"""
input UpdateMsgSubscriberInput {
  clearExclude: Boolean
  clearOrgRoleID: Boolean
  clearUser: Boolean
  """是否排除"""
  exclude: Boolean
  msgTypeID: ID
  """用户组ID"""
  orgRoleID: ID
  """组织ID"""
  tenantID: ID
  userID: ID
}

"""
UpdateMsgTemplateInput is used for update MsgTemplate object.
Input was generated by ent.
"""
input UpdateMsgTemplateInput {
  appendAttachments: [String!]
  appendAttachmentsFileIds: [ID!]
  """附件地址。key：/msg/att/1/xxx"""
  attachments: [String!]
  """附件ids"""
  attachmentsFileIds: [ID!]
  """密送"""
  bcc: String
  """消息体"""
  body: String
  """抄送"""
  cc: String
  clearAttachments: Boolean
  clearAttachmentsFileIds: Boolean
  clearBcc: Boolean
  clearBody: Boolean
  clearCc: Boolean
  clearComments: Boolean
  clearFrom: Boolean
  clearSubject: Boolean
  clearTo: Boolean
  clearTpl: Boolean
  clearTplFileID: Boolean
  """备注"""
  comments: String
  eventID: ID
  """消息类型:文本,网页,需要结合mod确定支持的格式"""
  format: MsgTemplateFormat
  """发件人"""
  from: String
  """应用消息类型ID"""
  msgTypeID: Int
  """消息模板名称"""
  name: String
  """消息模式:站内信,app推送,邮件,短信,微信等"""
  receiverType: MsgTemplateReceiverType
  """标题"""
  subject: String
  """组织ID"""
  tenantID: ID
  """收件人"""
  to: String
  """模板地址。key：/msg/tpl/temp/1/xxx"""
  tpl: String
  """模板地址"""
  tplFileID: ID
}

"""
UpdateMsgTypeInput is used for update MsgType object.
Input was generated by ent.
"""
input UpdateMsgTypeInput {
  """应用ID"""
  appID: ID
  """是否可定制"""
  canCustom: Boolean
  """是否可订阅"""
  canSubs: Boolean
  """消息类型分类"""
  category: String
  clearAppID: Boolean
  clearCanCustom: Boolean
  clearCanSubs: Boolean
  clearComments: Boolean
  clearStatus: Boolean
  """备注"""
  comments: String
  """消息类型名称,应用内唯一"""
  name: String
  """状态"""
  status: MsgTypeSimpleStatus
}

"""
UpdateSilenceInput is used for update Silence object.
Input was generated by ent.
"""
input UpdateSilenceInput {
  appendMatchers: [MatcherInput]
  clearComments: Boolean
  clearMatchers: Boolean
  """备注"""
  comments: String
  """结束时间"""
  endsAt: Time
  """应用ID"""
  matchers: [MatcherInput]
  """开始时间"""
  startsAt: Time
  """状态"""
  state: SilenceSilenceState
}

type User implements Node {
  """显示名"""
  displayName: String!
  """邮箱"""
  email: String
  """ID"""
  id: ID!
  """手机"""
  mobile: String
  """登陆名称"""
  principalName: String!
  """静默"""
  silences: [Silence!]
}