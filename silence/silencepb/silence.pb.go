// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: silence/silencepb/silence.proto

package silencepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type specifies how the given name and pattern are matched
// against a label set.
type Matcher_Type int32

const (
	Matcher_EQUAL      Matcher_Type = 0
	Matcher_REGEXP     Matcher_Type = 1
	Matcher_NOT_EQUAL  Matcher_Type = 2
	Matcher_NOT_REGEXP Matcher_Type = 3
)

// Enum value maps for Matcher_Type.
var (
	Matcher_Type_name = map[int32]string{
		0: "EQUAL",
		1: "REGEXP",
		2: "NOT_EQUAL",
		3: "NOT_REGEXP",
	}
	Matcher_Type_value = map[string]int32{
		"EQUAL":      0,
		"REGEXP":     1,
		"NOT_EQUAL":  2,
		"NOT_REGEXP": 3,
	}
)

func (x Matcher_Type) Enum() *Matcher_Type {
	p := new(Matcher_Type)
	*p = x
	return p
}

func (x Matcher_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Matcher_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_silence_silencepb_silence_proto_enumTypes[0].Descriptor()
}

func (Matcher_Type) Type() protoreflect.EnumType {
	return &file_silence_silencepb_silence_proto_enumTypes[0]
}

func (x Matcher_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Matcher_Type.Descriptor instead.
func (Matcher_Type) EnumDescriptor() ([]byte, []int) {
	return file_silence_silencepb_silence_proto_rawDescGZIP(), []int{0, 0}
}

// Matcher specifies a rule, which can match or set of labels or not.
type Matcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Matcher_Type `protobuf:"varint,1,opt,name=type,proto3,enum=silencepb.Matcher_Type" json:"type,omitempty"`
	// The label name in a label set to against which the matcher
	// checks the pattern.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The pattern being checked according to the matcher's type.
	Pattern string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *Matcher) Reset() {
	*x = Matcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_silence_silencepb_silence_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matcher) ProtoMessage() {}

func (x *Matcher) ProtoReflect() protoreflect.Message {
	mi := &file_silence_silencepb_silence_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matcher.ProtoReflect.Descriptor instead.
func (*Matcher) Descriptor() ([]byte, []int) {
	return file_silence_silencepb_silence_proto_rawDescGZIP(), []int{0}
}

func (x *Matcher) GetType() Matcher_Type {
	if x != nil {
		return x.Type
	}
	return Matcher_EQUAL
}

func (x *Matcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Matcher) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

// Silence specifies an object that ignores alerts based
// on a set of matchers during a given time frame.
type Silence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A globally unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A set of matchers all of which have to be true for a silence
	// to affect a given label set.
	Matchers []*Matcher `protobuf:"bytes,2,rep,name=matchers,proto3" json:"matchers,omitempty"`
	// The time range during which the silence is active.
	StartsAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=starts_at,json=startsAt,proto3" json:"starts_at,omitempty"`
	EndsAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	// The last notification made to the silence.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Comment for the silence.
	CreatedBy string `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Comment   string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Silence) Reset() {
	*x = Silence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_silence_silencepb_silence_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Silence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Silence) ProtoMessage() {}

func (x *Silence) ProtoReflect() protoreflect.Message {
	mi := &file_silence_silencepb_silence_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Silence.ProtoReflect.Descriptor instead.
func (*Silence) Descriptor() ([]byte, []int) {
	return file_silence_silencepb_silence_proto_rawDescGZIP(), []int{1}
}

func (x *Silence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Silence) GetMatchers() []*Matcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *Silence) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *Silence) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *Silence) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Silence) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Silence) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// MeshSilence wraps a regular silence with an expiration timestamp
// after which the silence may be garbage collected.
type MeshSilence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Silence   *Silence               `protobuf:"bytes,1,opt,name=silence,proto3" json:"silence,omitempty"`
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *MeshSilence) Reset() {
	*x = MeshSilence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_silence_silencepb_silence_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSilence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSilence) ProtoMessage() {}

func (x *MeshSilence) ProtoReflect() protoreflect.Message {
	mi := &file_silence_silencepb_silence_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSilence.ProtoReflect.Descriptor instead.
func (*MeshSilence) Descriptor() ([]byte, []int) {
	return file_silence_silencepb_silence_proto_rawDescGZIP(), []int{2}
}

func (x *MeshSilence) GetSilence() *Silence {
	if x != nil {
		return x.Silence
	}
	return nil
}

func (x *MeshSilence) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

var File_silence_silencepb_silence_proto protoreflect.FileDescriptor

var file_silence_silencepb_silence_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x70, 0x62, 0x2f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01,
	0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x22, 0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47, 0x45, 0x58,
	0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x50,
	0x10, 0x03, 0x22, 0xab, 0x02, 0x0a, 0x07, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x76, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f, 0x6f, 0x63, 0x6f, 0x6f, 0x73, 0x2f, 0x6d,
	0x73, 0x67, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_silence_silencepb_silence_proto_rawDescOnce sync.Once
	file_silence_silencepb_silence_proto_rawDescData = file_silence_silencepb_silence_proto_rawDesc
)

func file_silence_silencepb_silence_proto_rawDescGZIP() []byte {
	file_silence_silencepb_silence_proto_rawDescOnce.Do(func() {
		file_silence_silencepb_silence_proto_rawDescData = protoimpl.X.CompressGZIP(file_silence_silencepb_silence_proto_rawDescData)
	})
	return file_silence_silencepb_silence_proto_rawDescData
}

var file_silence_silencepb_silence_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_silence_silencepb_silence_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_silence_silencepb_silence_proto_goTypes = []interface{}{
	(Matcher_Type)(0),             // 0: silencepb.Matcher.Type
	(*Matcher)(nil),               // 1: silencepb.Matcher
	(*Silence)(nil),               // 2: silencepb.Silence
	(*MeshSilence)(nil),           // 3: silencepb.MeshSilence
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_silence_silencepb_silence_proto_depIdxs = []int32{
	0, // 0: silencepb.Matcher.type:type_name -> silencepb.Matcher.Type
	1, // 1: silencepb.Silence.matchers:type_name -> silencepb.Matcher
	4, // 2: silencepb.Silence.starts_at:type_name -> google.protobuf.Timestamp
	4, // 3: silencepb.Silence.ends_at:type_name -> google.protobuf.Timestamp
	4, // 4: silencepb.Silence.updated_at:type_name -> google.protobuf.Timestamp
	2, // 5: silencepb.MeshSilence.silence:type_name -> silencepb.Silence
	4, // 6: silencepb.MeshSilence.expires_at:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_silence_silencepb_silence_proto_init() }
func file_silence_silencepb_silence_proto_init() {
	if File_silence_silencepb_silence_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_silence_silencepb_silence_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_silence_silencepb_silence_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Silence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_silence_silencepb_silence_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSilence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_silence_silencepb_silence_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_silence_silencepb_silence_proto_goTypes,
		DependencyIndexes: file_silence_silencepb_silence_proto_depIdxs,
		EnumInfos:         file_silence_silencepb_silence_proto_enumTypes,
		MessageInfos:      file_silence_silencepb_silence_proto_msgTypes,
	}.Build()
	File_silence_silencepb_silence_proto = out.File
	file_silence_silencepb_silence_proto_rawDesc = nil
	file_silence_silencepb_silence_proto_goTypes = nil
	file_silence_silencepb_silence_proto_depIdxs = nil
}
